
/Users/chipmc/Documents/Maker/Particle/Projects/Daylight-Savings-Time/target/1.3.1/photon/Daylight-Savings-Time.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000025f4  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a2610  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000000d0  20000000  080a2614  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000650  200000d0  200000d0  000300d0  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a26e4  080a26e4  000226e4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a270c  080a270c  0002270c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0008d91c  00000000  00000000  00022710  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000c463  00000000  00000000  000b002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00011348  00000000  00000000  000bc48f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001a98  00000000  00000000  000cd7d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002c18  00000000  00000000  000cf26f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0001f63c  00000000  00000000  000d1e87  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001af7f  00000000  00000000  000f14c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a3d7c  00000000  00000000  0010c442  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000aee4  00000000  00000000  001b01c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f001 fc91 	bl	80a1954 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f001 fc96 	bl	80a196a <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a2614 	.word	0x080a2614
 80a004c:	200000d0 	.word	0x200000d0
 80a0050:	200000d0 	.word	0x200000d0
 80a0054:	20000720 	.word	0x20000720
 80a0058:	20000720 	.word	0x20000720

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f000 ff95 	bl	80a0f8c <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a25dc 	.word	0x080a25dc
 80a0084:	080a2610 	.word	0x080a2610

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b812 	b.w	80a00b0 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f845 	bl	80a011c <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f000 bf3b 	b.w	80a0f10 <_post_loop>

080a009a <_ZdlPv>:
 80a009a:	f000 ba33 	b.w	80a0504 <free>

080a009e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a009e:	7800      	ldrb	r0, [r0, #0]
 80a00a0:	fab0 f080 	clz	r0, r0
 80a00a4:	0940      	lsrs	r0, r0, #5
 80a00a6:	4770      	bx	lr

080a00a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00a8:	2301      	movs	r3, #1
 80a00aa:	7003      	strb	r3, [r0, #0]
 80a00ac:	4770      	bx	lr
	...

080a00b0 <setup>:

// These are UTC time test values that are based on the example EST timezone
char data[128];     // Where we will store the output to Publish


void setup() {
 80a00b0:	b508      	push	{r3, lr}
  Serial.begin();
 80a00b2:	f000 fe39 	bl	80a0d28 <_Z16_fetch_usbserialv>
 80a00b6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a00ba:	f000 fe1b 	bl	80a0cf4 <_ZN9USBSerial5beginEl>
  Time.zone(Timezone);
 80a00be:	4b05      	ldr	r3, [pc, #20]	; (80a00d4 <setup+0x24>)
 80a00c0:	6818      	ldr	r0, [r3, #0]
 80a00c2:	f000 fc7f 	bl	80a09c4 <_ZN9TimeClass4zoneEf>
  Time.setDSTOffset(DSToffsetValue);
 80a00c6:	4b04      	ldr	r3, [pc, #16]	; (80a00d8 <setup+0x28>)
 80a00c8:	6818      	ldr	r0, [r3, #0]
}
 80a00ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}


void setup() {
  Serial.begin();
  Time.zone(Timezone);
  Time.setDSTOffset(DSToffsetValue);
 80a00ce:	f000 bc95 	b.w	80a09fc <_ZN9TimeClass12setDSTOffsetEf>
 80a00d2:	bf00      	nop
 80a00d4:	20000004 	.word	0x20000004
 80a00d8:	20000010 	.word	0x20000010

080a00dc <_Z8isDSTusav>:
  }
  while (1) Particle.process();                                              // Keep from going unresponsive as no more main loop transits
}


bool isDSTusa() { 
 80a00dc:	b538      	push	{r3, r4, r5, lr}
  // United States of America Summer Timer calculation (2am Local Time - 2nd Sunday in March/ 1st Sunday in November)
  // Adapted from @ScruffR's code posted here https://community.particle.io/t/daylight-savings-problem/38424/4
  // The code works in from months, days and hours in succession toward the two transitions
  int dayOfMonth = Time.day();
 80a00de:	f000 fd13 	bl	80a0b08 <_ZN9TimeClass3dayEv>
 80a00e2:	4605      	mov	r5, r0
  int month = Time.month();
 80a00e4:	f000 fd21 	bl	80a0b2a <_ZN9TimeClass5monthEv>
 80a00e8:	4604      	mov	r4, r0
  int dayOfWeek = Time.weekday() - 1; // make Sunday 0 .. Saturday 6
 80a00ea:	f000 fd17 	bl	80a0b1c <_ZN9TimeClass7weekdayEv>

  // By Month - inside or outside the DST window
  if (month >= 4 && month <= 10)  
 80a00ee:	1f23      	subs	r3, r4, #4
 80a00f0:	2b06      	cmp	r3, #6
 80a00f2:	d90e      	bls.n	80a0112 <_Z8isDSTusav+0x36>
  { // April to October definetly DST
    return true;
  }
  else if (month < 3 || month > 11)
 80a00f4:	1ee3      	subs	r3, r4, #3
 80a00f6:	2b08      	cmp	r3, #8
 80a00f8:	d80d      	bhi.n	80a0116 <_Z8isDSTusav+0x3a>
  { // before March or after October is definetly standard time
    return false;
  }

  boolean beforeFirstSunday = (dayOfMonth - dayOfWeek < 0);
 80a00fa:	3801      	subs	r0, #1
  boolean secondSundayOrAfter = (dayOfMonth - dayOfWeek > 7);

  if (beforeFirstSunday && !secondSundayOrAfter) return (month == 11);
 80a00fc:	1a2d      	subs	r5, r5, r0
 80a00fe:	d501      	bpl.n	80a0104 <_Z8isDSTusav+0x28>
 80a0100:	2c0b      	cmp	r4, #11
 80a0102:	e002      	b.n	80a010a <_Z8isDSTusav+0x2e>
  else if (!beforeFirstSunday && !secondSundayOrAfter) return false;
 80a0104:	2d07      	cmp	r5, #7
 80a0106:	dd06      	ble.n	80a0116 <_Z8isDSTusav+0x3a>
  else if (!beforeFirstSunday && secondSundayOrAfter) return (month == 3);
 80a0108:	2c03      	cmp	r4, #3
 80a010a:	bf14      	ite	ne
 80a010c:	2000      	movne	r0, #0
 80a010e:	2001      	moveq	r0, #1
 80a0110:	bd38      	pop	{r3, r4, r5, pc}
  int dayOfWeek = Time.weekday() - 1; // make Sunday 0 .. Saturday 6

  // By Month - inside or outside the DST window
  if (month >= 4 && month <= 10)  
  { // April to October definetly DST
    return true;
 80a0112:	2001      	movs	r0, #1
 80a0114:	bd38      	pop	{r3, r4, r5, pc}
  }
  else if (month < 3 || month > 11)
  { // before March or after October is definetly standard time
    return false;
 80a0116:	2000      	movs	r0, #0
  if (secSinceMidnightLocal >= 2*3600)
  { //  In the US, Daylight Time is based on local time 
    return !dayStartedAs;
  }
  return dayStartedAs;
}
 80a0118:	bd38      	pop	{r3, r4, r5, pc}
	...

080a011c <loop>:
  Time.zone(Timezone);
  Time.setDSTOffset(DSToffsetValue);
}


void loop() {
 80a011c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  for (int i=0; i<=30; i++) {
    testTime = februaryFifteenthMidnight + i * daySeconds;
 80a0120:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 80a021c <loop+0x100>
  Time.zone(Timezone);
  Time.setDSTOffset(DSToffsetValue);
}


void loop() {
 80a0124:	b087      	sub	sp, #28
  for (int i=0; i<=30; i++) {
 80a0126:	2400      	movs	r4, #0
    testTime = februaryFifteenthMidnight + i * daySeconds;
 80a0128:	4b3a      	ldr	r3, [pc, #232]	; (80a0214 <loop+0xf8>)
 80a012a:	4e3b      	ldr	r6, [pc, #236]	; (80a0218 <loop+0xfc>)
 80a012c:	6818      	ldr	r0, [r3, #0]
 80a012e:	f8d8 3000 	ldr.w	r3, [r8]
 80a0132:	4f3a      	ldr	r7, [pc, #232]	; (80a021c <loop+0x100>)
 80a0134:	fb03 0004 	mla	r0, r3, r4, r0
 80a0138:	6030      	str	r0, [r6, #0]
    Time.setTime(testTime);                                           // Note this is UTC time not local.  
 80a013a:	f000 fc91 	bl	80a0a60 <_ZN9TimeClass7setTimeEl>

    // Now, we will see if the Timezone calculations are correct
    if (Time.isValid()) 
 80a013e:	f000 fcbb 	bl	80a0ab8 <_ZN9TimeClass7isValidEv>
 80a0142:	b138      	cbz	r0, 80a0154 <loop+0x38>
    { // We only want to run this if time is valid - otherwise random result
      isDSTusa() ? Time.beginDST() : Time.endDST();       
 80a0144:	f7ff ffca 	bl	80a00dc <_Z8isDSTusav>
 80a0148:	b110      	cbz	r0, 80a0150 <loop+0x34>
 80a014a:	f000 fc71 	bl	80a0a30 <_ZN9TimeClass8beginDSTEv>
 80a014e:	e001      	b.n	80a0154 <loop+0x38>
 80a0150:	f000 fc78 	bl	80a0a44 <_ZN9TimeClass6endDSTEv>
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
 80a0154:	f000 fcd1 	bl	80a0afa <_ZN9TimeClass3nowEv>
 80a0158:	4601      	mov	r1, r0
 80a015a:	a802      	add	r0, sp, #8
 80a015c:	f000 fc8a 	bl	80a0a74 <_ZN9TimeClass7timeStrEl>
 80a0160:	f8dd 9008 	ldr.w	r9, [sp, #8]
    }
    snprintf(data, sizeof(data),"%s - DST: %s", (const char*)Time.timeStr(), Time.isDST() ? "True" : "False");
 80a0164:	f000 fc74 	bl	80a0a50 <_ZN9TimeClass5isDSTEv>
 80a0168:	4d2d      	ldr	r5, [pc, #180]	; (80a0220 <loop+0x104>)
 80a016a:	4a2e      	ldr	r2, [pc, #184]	; (80a0224 <loop+0x108>)
 80a016c:	464b      	mov	r3, r9
 80a016e:	2800      	cmp	r0, #0
 80a0170:	bf14      	ite	ne
 80a0172:	4628      	movne	r0, r5
 80a0174:	4610      	moveq	r0, r2
 80a0176:	2180      	movs	r1, #128	; 0x80
 80a0178:	4a2b      	ldr	r2, [pc, #172]	; (80a0228 <loop+0x10c>)
 80a017a:	9000      	str	r0, [sp, #0]
 80a017c:	482b      	ldr	r0, [pc, #172]	; (80a022c <loop+0x110>)
 80a017e:	f000 f9e1 	bl	80a0544 <snprintf>
 80a0182:	a802      	add	r0, sp, #8
 80a0184:	f000 fb64 	bl	80a0850 <_ZN6StringD1Ev>
  Time.setDSTOffset(DSToffsetValue);
}


void loop() {
  for (int i=0; i<=30; i++) {
 80a0188:	3401      	adds	r4, #1
    if (Time.isValid()) 
    { // We only want to run this if time is valid - otherwise random result
      isDSTusa() ? Time.beginDST() : Time.endDST();       
    }
    snprintf(data, sizeof(data),"%s - DST: %s", (const char*)Time.timeStr(), Time.isDST() ? "True" : "False");
    Serial.println(data);
 80a018a:	f000 fdcd 	bl	80a0d28 <_Z16_fetch_usbserialv>
 80a018e:	4927      	ldr	r1, [pc, #156]	; (80a022c <loop+0x110>)
 80a0190:	f000 faf7 	bl	80a0782 <_ZN5Print7printlnEPKc>
  Time.setDSTOffset(DSToffsetValue);
}


void loop() {
  for (int i=0; i<=30; i++) {
 80a0194:	2c1f      	cmp	r4, #31
 80a0196:	d1c7      	bne.n	80a0128 <loop+0xc>
    //Particle.publish("Test",data,PRIVATE);
    //delay(1000);
  }

  for (int i=0; i<=30; i++) {
    testTime = halloweenMidnight + i * daySeconds;
 80a0198:	f8df 8098 	ldr.w	r8, [pc, #152]	; 80a0234 <loop+0x118>
 80a019c:	2400      	movs	r4, #0
 80a019e:	683b      	ldr	r3, [r7, #0]
 80a01a0:	f8d8 0000 	ldr.w	r0, [r8]
 80a01a4:	fb03 0004 	mla	r0, r3, r4, r0
 80a01a8:	6030      	str	r0, [r6, #0]
    Time.setTime(testTime);                                           // Note this is UTC time not local.  
 80a01aa:	f000 fc59 	bl	80a0a60 <_ZN9TimeClass7setTimeEl>
    // Now, we will see if the Timezone calculations are correct
    if (Time.isValid()) 
 80a01ae:	f000 fc83 	bl	80a0ab8 <_ZN9TimeClass7isValidEv>
 80a01b2:	b138      	cbz	r0, 80a01c4 <loop+0xa8>
    { // We only want to run this if time is valid - otherwise random result
      isDSTusa() ? Time.beginDST() : Time.endDST();       
 80a01b4:	f7ff ff92 	bl	80a00dc <_Z8isDSTusav>
 80a01b8:	b110      	cbz	r0, 80a01c0 <loop+0xa4>
 80a01ba:	f000 fc39 	bl	80a0a30 <_ZN9TimeClass8beginDSTEv>
 80a01be:	e001      	b.n	80a01c4 <loop+0xa8>
 80a01c0:	f000 fc40 	bl	80a0a44 <_ZN9TimeClass6endDSTEv>
 80a01c4:	f000 fc99 	bl	80a0afa <_ZN9TimeClass3nowEv>
 80a01c8:	4601      	mov	r1, r0
 80a01ca:	a802      	add	r0, sp, #8
 80a01cc:	f000 fc52 	bl	80a0a74 <_ZN9TimeClass7timeStrEl>
 80a01d0:	f8dd 9008 	ldr.w	r9, [sp, #8]
    }
    snprintf(data, sizeof(data),"%s - DST: %s", (const char*)Time.timeStr(), Time.isDST() ? "True" : "False");
 80a01d4:	f000 fc3c 	bl	80a0a50 <_ZN9TimeClass5isDSTEv>
 80a01d8:	4a12      	ldr	r2, [pc, #72]	; (80a0224 <loop+0x108>)
 80a01da:	464b      	mov	r3, r9
 80a01dc:	2800      	cmp	r0, #0
 80a01de:	bf14      	ite	ne
 80a01e0:	4628      	movne	r0, r5
 80a01e2:	4610      	moveq	r0, r2
 80a01e4:	2180      	movs	r1, #128	; 0x80
 80a01e6:	4a10      	ldr	r2, [pc, #64]	; (80a0228 <loop+0x10c>)
 80a01e8:	9000      	str	r0, [sp, #0]
 80a01ea:	4810      	ldr	r0, [pc, #64]	; (80a022c <loop+0x110>)
 80a01ec:	f000 f9aa 	bl	80a0544 <snprintf>
 80a01f0:	a802      	add	r0, sp, #8
 80a01f2:	f000 fb2d 	bl	80a0850 <_ZN6StringD1Ev>
    Serial.println(data);
    //Particle.publish("Test",data,PRIVATE);
    //delay(1000);
  }

  for (int i=0; i<=30; i++) {
 80a01f6:	3401      	adds	r4, #1
    if (Time.isValid()) 
    { // We only want to run this if time is valid - otherwise random result
      isDSTusa() ? Time.beginDST() : Time.endDST();       
    }
    snprintf(data, sizeof(data),"%s - DST: %s", (const char*)Time.timeStr(), Time.isDST() ? "True" : "False");
    Serial.println(data);
 80a01f8:	f000 fd96 	bl	80a0d28 <_Z16_fetch_usbserialv>
 80a01fc:	490b      	ldr	r1, [pc, #44]	; (80a022c <loop+0x110>)
 80a01fe:	f000 fac0 	bl	80a0782 <_ZN5Print7printlnEPKc>
    Serial.println(data);
    //Particle.publish("Test",data,PRIVATE);
    //delay(1000);
  }

  for (int i=0; i<=30; i++) {
 80a0202:	2c1f      	cmp	r4, #31
 80a0204:	d1cb      	bne.n	80a019e <loop+0x82>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a0206:	4c0a      	ldr	r4, [pc, #40]	; (80a0230 <loop+0x114>)
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a0208:	f000 f828 	bl	80a025c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a020c:	6020      	str	r0, [r4, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
 80a020e:	f000 f901 	bl	80a0414 <spark_process>
 80a0212:	e7f9      	b.n	80a0208 <loop+0xec>
 80a0214:	20000008 	.word	0x20000008
 80a0218:	200000d4 	.word	0x200000d4
 80a021c:	20000000 	.word	0x20000000
 80a0220:	080a2170 	.word	0x080a2170
 80a0224:	080a2175 	.word	0x080a2175
 80a0228:	080a217b 	.word	0x080a217b
 80a022c:	200000d8 	.word	0x200000d8
 80a0230:	2000061c 	.word	0x2000061c
 80a0234:	2000000c 	.word	0x2000000c

080a0238 <_GLOBAL__sub_I_Timezone>:
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a0238:	f000 b830 	b.w	80a029c <HAL_Pin_Map>

080a023c <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a023c:	b508      	push	{r3, lr}
 80a023e:	4b02      	ldr	r3, [pc, #8]	; (80a0248 <os_mutex_create+0xc>)
 80a0240:	681b      	ldr	r3, [r3, #0]
 80a0242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0244:	9301      	str	r3, [sp, #4]
 80a0246:	bd08      	pop	{r3, pc}
 80a0248:	080601d0 	.word	0x080601d0

080a024c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a024c:	b508      	push	{r3, lr}
 80a024e:	4b02      	ldr	r3, [pc, #8]	; (80a0258 <HAL_RNG_GetRandomNumber+0xc>)
 80a0250:	681b      	ldr	r3, [r3, #0]
 80a0252:	685b      	ldr	r3, [r3, #4]
 80a0254:	9301      	str	r3, [sp, #4]
 80a0256:	bd08      	pop	{r3, pc}
 80a0258:	0806019c 	.word	0x0806019c

080a025c <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a025c:	b508      	push	{r3, lr}
 80a025e:	4b02      	ldr	r3, [pc, #8]	; (80a0268 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0260:	681b      	ldr	r3, [r3, #0]
 80a0262:	695b      	ldr	r3, [r3, #20]
 80a0264:	9301      	str	r3, [sp, #4]
 80a0266:	bd08      	pop	{r3, pc}
 80a0268:	0806019c 	.word	0x0806019c

080a026c <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
 80a026c:	b508      	push	{r3, lr}
 80a026e:	4b02      	ldr	r3, [pc, #8]	; (80a0278 <HAL_RTC_Get_UnixTime+0xc>)
 80a0270:	681b      	ldr	r3, [r3, #0]
 80a0272:	69db      	ldr	r3, [r3, #28]
 80a0274:	9301      	str	r3, [sp, #4]
 80a0276:	bd08      	pop	{r3, pc}
 80a0278:	0806019c 	.word	0x0806019c

080a027c <HAL_RTC_Set_UnixTime>:
DYNALIB_FN(BASE_IDX + 6, hal, HAL_RTC_Set_UnixTime, void(time_t))
 80a027c:	b508      	push	{r3, lr}
 80a027e:	4b02      	ldr	r3, [pc, #8]	; (80a0288 <HAL_RTC_Set_UnixTime+0xc>)
 80a0280:	681b      	ldr	r3, [r3, #0]
 80a0282:	6a1b      	ldr	r3, [r3, #32]
 80a0284:	9301      	str	r3, [sp, #4]
 80a0286:	bd08      	pop	{r3, pc}
 80a0288:	0806019c 	.word	0x0806019c

080a028c <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
 80a028c:	b508      	push	{r3, lr}
 80a028e:	4b02      	ldr	r3, [pc, #8]	; (80a0298 <HAL_RTC_Time_Is_Valid+0xc>)
 80a0290:	681b      	ldr	r3, [r3, #0]
 80a0292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a0294:	9301      	str	r3, [sp, #4]
 80a0296:	bd08      	pop	{r3, pc}
 80a0298:	0806019c 	.word	0x0806019c

080a029c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a029c:	b508      	push	{r3, lr}
 80a029e:	4b02      	ldr	r3, [pc, #8]	; (80a02a8 <HAL_Pin_Map+0xc>)
 80a02a0:	681b      	ldr	r3, [r3, #0]
 80a02a2:	681b      	ldr	r3, [r3, #0]
 80a02a4:	9301      	str	r3, [sp, #4]
 80a02a6:	bd08      	pop	{r3, pc}
 80a02a8:	080601b0 	.word	0x080601b0

080a02ac <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a02ac:	b508      	push	{r3, lr}
 80a02ae:	4b02      	ldr	r3, [pc, #8]	; (80a02b8 <HAL_SPI_Init+0xc>)
 80a02b0:	681b      	ldr	r3, [r3, #0]
 80a02b2:	69db      	ldr	r3, [r3, #28]
 80a02b4:	9301      	str	r3, [sp, #4]
 80a02b6:	bd08      	pop	{r3, pc}
 80a02b8:	080601b4 	.word	0x080601b4

080a02bc <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a02bc:	b508      	push	{r3, lr}
 80a02be:	4b02      	ldr	r3, [pc, #8]	; (80a02c8 <HAL_USART_Init+0xc>)
 80a02c0:	681b      	ldr	r3, [r3, #0]
 80a02c2:	699b      	ldr	r3, [r3, #24]
 80a02c4:	9301      	str	r3, [sp, #4]
 80a02c6:	bd08      	pop	{r3, pc}
 80a02c8:	080601c4 	.word	0x080601c4

080a02cc <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a02cc:	b508      	push	{r3, lr}
 80a02ce:	4b02      	ldr	r3, [pc, #8]	; (80a02d8 <HAL_USART_Write_Data+0xc>)
 80a02d0:	681b      	ldr	r3, [r3, #0]
 80a02d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a02d4:	9301      	str	r3, [sp, #4]
 80a02d6:	bd08      	pop	{r3, pc}
 80a02d8:	080601c4 	.word	0x080601c4

080a02dc <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a02dc:	b508      	push	{r3, lr}
 80a02de:	4b02      	ldr	r3, [pc, #8]	; (80a02e8 <HAL_USART_Available_Data+0xc>)
 80a02e0:	681b      	ldr	r3, [r3, #0]
 80a02e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a02e4:	9301      	str	r3, [sp, #4]
 80a02e6:	bd08      	pop	{r3, pc}
 80a02e8:	080601c4 	.word	0x080601c4

080a02ec <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a02ec:	b508      	push	{r3, lr}
 80a02ee:	4b02      	ldr	r3, [pc, #8]	; (80a02f8 <HAL_USART_Read_Data+0xc>)
 80a02f0:	681b      	ldr	r3, [r3, #0]
 80a02f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a02f4:	9301      	str	r3, [sp, #4]
 80a02f6:	bd08      	pop	{r3, pc}
 80a02f8:	080601c4 	.word	0x080601c4

080a02fc <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a02fc:	b508      	push	{r3, lr}
 80a02fe:	4b02      	ldr	r3, [pc, #8]	; (80a0308 <HAL_USART_Peek_Data+0xc>)
 80a0300:	681b      	ldr	r3, [r3, #0]
 80a0302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0304:	9301      	str	r3, [sp, #4]
 80a0306:	bd08      	pop	{r3, pc}
 80a0308:	080601c4 	.word	0x080601c4

080a030c <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a030c:	b508      	push	{r3, lr}
 80a030e:	4b02      	ldr	r3, [pc, #8]	; (80a0318 <HAL_USART_Flush_Data+0xc>)
 80a0310:	681b      	ldr	r3, [r3, #0]
 80a0312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0314:	9301      	str	r3, [sp, #4]
 80a0316:	bd08      	pop	{r3, pc}
 80a0318:	080601c4 	.word	0x080601c4

080a031c <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a031c:	b508      	push	{r3, lr}
 80a031e:	4b02      	ldr	r3, [pc, #8]	; (80a0328 <HAL_USART_Available_Data_For_Write+0xc>)
 80a0320:	681b      	ldr	r3, [r3, #0]
 80a0322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0324:	9301      	str	r3, [sp, #4]
 80a0326:	bd08      	pop	{r3, pc}
 80a0328:	080601c4 	.word	0x080601c4

080a032c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a032c:	b508      	push	{r3, lr}
 80a032e:	4b02      	ldr	r3, [pc, #8]	; (80a0338 <HAL_USB_USART_Init+0xc>)
 80a0330:	681b      	ldr	r3, [r3, #0]
 80a0332:	681b      	ldr	r3, [r3, #0]
 80a0334:	9301      	str	r3, [sp, #4]
 80a0336:	bd08      	pop	{r3, pc}
 80a0338:	080601d8 	.word	0x080601d8

080a033c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a033c:	b508      	push	{r3, lr}
 80a033e:	4b02      	ldr	r3, [pc, #8]	; (80a0348 <HAL_USB_USART_Begin+0xc>)
 80a0340:	681b      	ldr	r3, [r3, #0]
 80a0342:	685b      	ldr	r3, [r3, #4]
 80a0344:	9301      	str	r3, [sp, #4]
 80a0346:	bd08      	pop	{r3, pc}
 80a0348:	080601d8 	.word	0x080601d8

080a034c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a034c:	b508      	push	{r3, lr}
 80a034e:	4b02      	ldr	r3, [pc, #8]	; (80a0358 <HAL_USB_USART_Available_Data+0xc>)
 80a0350:	681b      	ldr	r3, [r3, #0]
 80a0352:	691b      	ldr	r3, [r3, #16]
 80a0354:	9301      	str	r3, [sp, #4]
 80a0356:	bd08      	pop	{r3, pc}
 80a0358:	080601d8 	.word	0x080601d8

080a035c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a035c:	b508      	push	{r3, lr}
 80a035e:	4b02      	ldr	r3, [pc, #8]	; (80a0368 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a0360:	681b      	ldr	r3, [r3, #0]
 80a0362:	695b      	ldr	r3, [r3, #20]
 80a0364:	9301      	str	r3, [sp, #4]
 80a0366:	bd08      	pop	{r3, pc}
 80a0368:	080601d8 	.word	0x080601d8

080a036c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a036c:	b508      	push	{r3, lr}
 80a036e:	4b02      	ldr	r3, [pc, #8]	; (80a0378 <HAL_USB_USART_Receive_Data+0xc>)
 80a0370:	681b      	ldr	r3, [r3, #0]
 80a0372:	699b      	ldr	r3, [r3, #24]
 80a0374:	9301      	str	r3, [sp, #4]
 80a0376:	bd08      	pop	{r3, pc}
 80a0378:	080601d8 	.word	0x080601d8

080a037c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a037c:	b508      	push	{r3, lr}
 80a037e:	4b02      	ldr	r3, [pc, #8]	; (80a0388 <HAL_USB_USART_Send_Data+0xc>)
 80a0380:	681b      	ldr	r3, [r3, #0]
 80a0382:	69db      	ldr	r3, [r3, #28]
 80a0384:	9301      	str	r3, [sp, #4]
 80a0386:	bd08      	pop	{r3, pc}
 80a0388:	080601d8 	.word	0x080601d8

080a038c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a038c:	b508      	push	{r3, lr}
 80a038e:	4b02      	ldr	r3, [pc, #8]	; (80a0398 <HAL_USB_USART_Flush_Data+0xc>)
 80a0390:	681b      	ldr	r3, [r3, #0]
 80a0392:	6a1b      	ldr	r3, [r3, #32]
 80a0394:	9301      	str	r3, [sp, #4]
 80a0396:	bd08      	pop	{r3, pc}
 80a0398:	080601d8 	.word	0x080601d8

080a039c <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a039c:	b508      	push	{r3, lr}
 80a039e:	4b02      	ldr	r3, [pc, #8]	; (80a03a8 <inet_gethostbyname+0xc>)
 80a03a0:	681b      	ldr	r3, [r3, #0]
 80a03a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a03a4:	9301      	str	r3, [sp, #4]
 80a03a6:	bd08      	pop	{r3, pc}
 80a03a8:	080601c0 	.word	0x080601c0

080a03ac <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 80a03ac:	b508      	push	{r3, lr}
 80a03ae:	4b02      	ldr	r3, [pc, #8]	; (80a03b8 <system_mode+0xc>)
 80a03b0:	681b      	ldr	r3, [r3, #0]
 80a03b2:	681b      	ldr	r3, [r3, #0]
 80a03b4:	9301      	str	r3, [sp, #4]
 80a03b6:	bd08      	pop	{r3, pc}
 80a03b8:	080601a4 	.word	0x080601a4

080a03bc <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a03bc:	b508      	push	{r3, lr}
 80a03be:	4b02      	ldr	r3, [pc, #8]	; (80a03c8 <set_system_mode+0xc>)
 80a03c0:	681b      	ldr	r3, [r3, #0]
 80a03c2:	685b      	ldr	r3, [r3, #4]
 80a03c4:	9301      	str	r3, [sp, #4]
 80a03c6:	bd08      	pop	{r3, pc}
 80a03c8:	080601a4 	.word	0x080601a4

080a03cc <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 80a03cc:	b508      	push	{r3, lr}
 80a03ce:	4b02      	ldr	r3, [pc, #8]	; (80a03d8 <system_thread_get_state+0xc>)
 80a03d0:	681b      	ldr	r3, [r3, #0]
 80a03d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a03d4:	9301      	str	r3, [sp, #4]
 80a03d6:	bd08      	pop	{r3, pc}
 80a03d8:	080601a4 	.word	0x080601a4

080a03dc <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
 80a03dc:	b508      	push	{r3, lr}
 80a03de:	4b02      	ldr	r3, [pc, #8]	; (80a03e8 <system_notify_time_changed+0xc>)
 80a03e0:	681b      	ldr	r3, [r3, #0]
 80a03e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a03e4:	9301      	str	r3, [sp, #4]
 80a03e6:	bd08      	pop	{r3, pc}
 80a03e8:	080601a4 	.word	0x080601a4

080a03ec <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a03ec:	b508      	push	{r3, lr}
 80a03ee:	4b03      	ldr	r3, [pc, #12]	; (80a03fc <system_ctrl_set_app_request_handler+0x10>)
 80a03f0:	681b      	ldr	r3, [r3, #0]
 80a03f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a03f6:	9301      	str	r3, [sp, #4]
 80a03f8:	bd08      	pop	{r3, pc}
 80a03fa:	0000      	.short	0x0000
 80a03fc:	080601a4 	.word	0x080601a4

080a0400 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a0400:	b508      	push	{r3, lr}
 80a0402:	4b03      	ldr	r3, [pc, #12]	; (80a0410 <system_ctrl_set_result+0x10>)
 80a0404:	681b      	ldr	r3, [r3, #0]
 80a0406:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a040a:	9301      	str	r3, [sp, #4]
 80a040c:	bd08      	pop	{r3, pc}
 80a040e:	0000      	.short	0x0000
 80a0410:	080601a4 	.word	0x080601a4

080a0414 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a0414:	b508      	push	{r3, lr}
 80a0416:	4b02      	ldr	r3, [pc, #8]	; (80a0420 <spark_process+0xc>)
 80a0418:	681b      	ldr	r3, [r3, #0]
 80a041a:	689b      	ldr	r3, [r3, #8]
 80a041c:	9301      	str	r3, [sp, #4]
 80a041e:	bd08      	pop	{r3, pc}
 80a0420:	080601cc 	.word	0x080601cc

080a0424 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a0424:	b508      	push	{r3, lr}
 80a0426:	4b02      	ldr	r3, [pc, #8]	; (80a0430 <spark_cloud_flag_connected+0xc>)
 80a0428:	681b      	ldr	r3, [r3, #0]
 80a042a:	695b      	ldr	r3, [r3, #20]
 80a042c:	9301      	str	r3, [sp, #4]
 80a042e:	bd08      	pop	{r3, pc}
 80a0430:	080601cc 	.word	0x080601cc

080a0434 <spark_sync_time_pending>:
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 80a0434:	b508      	push	{r3, lr}
 80a0436:	4b02      	ldr	r3, [pc, #8]	; (80a0440 <spark_sync_time_pending+0xc>)
 80a0438:	681b      	ldr	r3, [r3, #0]
 80a043a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a043c:	9301      	str	r3, [sp, #4]
 80a043e:	bd08      	pop	{r3, pc}
 80a0440:	080601cc 	.word	0x080601cc

080a0444 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a0444:	b508      	push	{r3, lr}
 80a0446:	4b02      	ldr	r3, [pc, #8]	; (80a0450 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a0448:	681b      	ldr	r3, [r3, #0]
 80a044a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a044c:	9301      	str	r3, [sp, #4]
 80a044e:	bd08      	pop	{r3, pc}
 80a0450:	080601cc 	.word	0x080601cc

080a0454 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0454:	b508      	push	{r3, lr}
 80a0456:	4b02      	ldr	r3, [pc, #8]	; (80a0460 <network_connect+0xc>)
 80a0458:	681b      	ldr	r3, [r3, #0]
 80a045a:	685b      	ldr	r3, [r3, #4]
 80a045c:	9301      	str	r3, [sp, #4]
 80a045e:	bd08      	pop	{r3, pc}
 80a0460:	080601c8 	.word	0x080601c8

080a0464 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a0464:	b508      	push	{r3, lr}
 80a0466:	4b02      	ldr	r3, [pc, #8]	; (80a0470 <network_connecting+0xc>)
 80a0468:	681b      	ldr	r3, [r3, #0]
 80a046a:	689b      	ldr	r3, [r3, #8]
 80a046c:	9301      	str	r3, [sp, #4]
 80a046e:	bd08      	pop	{r3, pc}
 80a0470:	080601c8 	.word	0x080601c8

080a0474 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a0474:	b508      	push	{r3, lr}
 80a0476:	4b02      	ldr	r3, [pc, #8]	; (80a0480 <network_disconnect+0xc>)
 80a0478:	681b      	ldr	r3, [r3, #0]
 80a047a:	68db      	ldr	r3, [r3, #12]
 80a047c:	9301      	str	r3, [sp, #4]
 80a047e:	bd08      	pop	{r3, pc}
 80a0480:	080601c8 	.word	0x080601c8

080a0484 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a0484:	b508      	push	{r3, lr}
 80a0486:	4b02      	ldr	r3, [pc, #8]	; (80a0490 <network_ready+0xc>)
 80a0488:	681b      	ldr	r3, [r3, #0]
 80a048a:	691b      	ldr	r3, [r3, #16]
 80a048c:	9301      	str	r3, [sp, #4]
 80a048e:	bd08      	pop	{r3, pc}
 80a0490:	080601c8 	.word	0x080601c8

080a0494 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0494:	b508      	push	{r3, lr}
 80a0496:	4b02      	ldr	r3, [pc, #8]	; (80a04a0 <network_on+0xc>)
 80a0498:	681b      	ldr	r3, [r3, #0]
 80a049a:	695b      	ldr	r3, [r3, #20]
 80a049c:	9301      	str	r3, [sp, #4]
 80a049e:	bd08      	pop	{r3, pc}
 80a04a0:	080601c8 	.word	0x080601c8

080a04a4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a04a4:	b508      	push	{r3, lr}
 80a04a6:	4b02      	ldr	r3, [pc, #8]	; (80a04b0 <network_off+0xc>)
 80a04a8:	681b      	ldr	r3, [r3, #0]
 80a04aa:	699b      	ldr	r3, [r3, #24]
 80a04ac:	9301      	str	r3, [sp, #4]
 80a04ae:	bd08      	pop	{r3, pc}
 80a04b0:	080601c8 	.word	0x080601c8

080a04b4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a04b4:	b508      	push	{r3, lr}
 80a04b6:	4b02      	ldr	r3, [pc, #8]	; (80a04c0 <network_listen+0xc>)
 80a04b8:	681b      	ldr	r3, [r3, #0]
 80a04ba:	69db      	ldr	r3, [r3, #28]
 80a04bc:	9301      	str	r3, [sp, #4]
 80a04be:	bd08      	pop	{r3, pc}
 80a04c0:	080601c8 	.word	0x080601c8

080a04c4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a04c4:	b508      	push	{r3, lr}
 80a04c6:	4b02      	ldr	r3, [pc, #8]	; (80a04d0 <network_listening+0xc>)
 80a04c8:	681b      	ldr	r3, [r3, #0]
 80a04ca:	6a1b      	ldr	r3, [r3, #32]
 80a04cc:	9301      	str	r3, [sp, #4]
 80a04ce:	bd08      	pop	{r3, pc}
 80a04d0:	080601c8 	.word	0x080601c8

080a04d4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a04d4:	b508      	push	{r3, lr}
 80a04d6:	4b02      	ldr	r3, [pc, #8]	; (80a04e0 <network_set_listen_timeout+0xc>)
 80a04d8:	681b      	ldr	r3, [r3, #0]
 80a04da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a04dc:	9301      	str	r3, [sp, #4]
 80a04de:	bd08      	pop	{r3, pc}
 80a04e0:	080601c8 	.word	0x080601c8

080a04e4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a04e4:	b508      	push	{r3, lr}
 80a04e6:	4b02      	ldr	r3, [pc, #8]	; (80a04f0 <network_get_listen_timeout+0xc>)
 80a04e8:	681b      	ldr	r3, [r3, #0]
 80a04ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a04ec:	9301      	str	r3, [sp, #4]
 80a04ee:	bd08      	pop	{r3, pc}
 80a04f0:	080601c8 	.word	0x080601c8

080a04f4 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a04f4:	b508      	push	{r3, lr}
 80a04f6:	4b02      	ldr	r3, [pc, #8]	; (80a0500 <malloc+0xc>)
 80a04f8:	681b      	ldr	r3, [r3, #0]
 80a04fa:	681b      	ldr	r3, [r3, #0]
 80a04fc:	9301      	str	r3, [sp, #4]
 80a04fe:	bd08      	pop	{r3, pc}
 80a0500:	080601a0 	.word	0x080601a0

080a0504 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a0504:	b508      	push	{r3, lr}
 80a0506:	4b02      	ldr	r3, [pc, #8]	; (80a0510 <free+0xc>)
 80a0508:	681b      	ldr	r3, [r3, #0]
 80a050a:	685b      	ldr	r3, [r3, #4]
 80a050c:	9301      	str	r3, [sp, #4]
 80a050e:	bd08      	pop	{r3, pc}
 80a0510:	080601a0 	.word	0x080601a0

080a0514 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a0514:	b508      	push	{r3, lr}
 80a0516:	4b02      	ldr	r3, [pc, #8]	; (80a0520 <realloc+0xc>)
 80a0518:	681b      	ldr	r3, [r3, #0]
 80a051a:	689b      	ldr	r3, [r3, #8]
 80a051c:	9301      	str	r3, [sp, #4]
 80a051e:	bd08      	pop	{r3, pc}
 80a0520:	080601a0 	.word	0x080601a0

080a0524 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 80a0524:	b508      	push	{r3, lr}
 80a0526:	4b02      	ldr	r3, [pc, #8]	; (80a0530 <siprintf+0xc>)
 80a0528:	681b      	ldr	r3, [r3, #0]
 80a052a:	691b      	ldr	r3, [r3, #16]
 80a052c:	9301      	str	r3, [sp, #4]
 80a052e:	bd08      	pop	{r3, pc}
 80a0530:	080601a0 	.word	0x080601a0

080a0534 <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
 80a0534:	b508      	push	{r3, lr}
 80a0536:	4b02      	ldr	r3, [pc, #8]	; (80a0540 <siscanf+0xc>)
 80a0538:	681b      	ldr	r3, [r3, #0]
 80a053a:	699b      	ldr	r3, [r3, #24]
 80a053c:	9301      	str	r3, [sp, #4]
 80a053e:	bd08      	pop	{r3, pc}
 80a0540:	080601a0 	.word	0x080601a0

080a0544 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 80a0544:	b508      	push	{r3, lr}
 80a0546:	4b02      	ldr	r3, [pc, #8]	; (80a0550 <snprintf+0xc>)
 80a0548:	681b      	ldr	r3, [r3, #0]
 80a054a:	69db      	ldr	r3, [r3, #28]
 80a054c:	9301      	str	r3, [sp, #4]
 80a054e:	bd08      	pop	{r3, pc}
 80a0550:	080601a0 	.word	0x080601a0

080a0554 <_malloc_r>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a0554:	b508      	push	{r3, lr}
 80a0556:	4b02      	ldr	r3, [pc, #8]	; (80a0560 <_malloc_r+0xc>)
 80a0558:	681b      	ldr	r3, [r3, #0]
 80a055a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a055c:	9301      	str	r3, [sp, #4]
 80a055e:	bd08      	pop	{r3, pc}
 80a0560:	080601a0 	.word	0x080601a0

080a0564 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0564:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a0566:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0568:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a056a:	b113      	cbz	r3, 80a0572 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a056c:	2203      	movs	r2, #3
 80a056e:	4601      	mov	r1, r0
 80a0570:	4798      	blx	r3
    }
 80a0572:	4620      	mov	r0, r4
 80a0574:	bd10      	pop	{r4, pc}

080a0576 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a0576:	4770      	bx	lr

080a0578 <_ZN9IPAddressD0Ev>:
 80a0578:	b510      	push	{r4, lr}
 80a057a:	4604      	mov	r4, r0
 80a057c:	2118      	movs	r1, #24
 80a057e:	f000 fd70 	bl	80a1062 <_ZdlPvj>
 80a0582:	4620      	mov	r0, r4
 80a0584:	bd10      	pop	{r4, pc}

080a0586 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a0586:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0588:	460f      	mov	r7, r1
 80a058a:	f100 0608 	add.w	r6, r0, #8
 80a058e:	1d05      	adds	r5, r0, #4
 80a0590:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0592:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a0596:	220a      	movs	r2, #10
 80a0598:	4638      	mov	r0, r7
 80a059a:	f000 f926 	bl	80a07ea <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a059e:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a05a0:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a05a2:	d007      	beq.n	80a05b4 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a05a4:	2c00      	cmp	r4, #0
 80a05a6:	d0f4      	beq.n	80a0592 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a05a8:	212e      	movs	r1, #46	; 0x2e
 80a05aa:	4638      	mov	r0, r7
 80a05ac:	f000 f8da 	bl	80a0764 <_ZN5Print5printEc>
 80a05b0:	4404      	add	r4, r0
 80a05b2:	e7ee      	b.n	80a0592 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a05b4:	4620      	mov	r0, r4
 80a05b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a05b8 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a05b8:	b510      	push	{r4, lr}
 80a05ba:	4604      	mov	r4, r0
 80a05bc:	4b04      	ldr	r3, [pc, #16]	; (80a05d0 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a05be:	2211      	movs	r2, #17
 80a05c0:	f840 3b04 	str.w	r3, [r0], #4
 80a05c4:	2100      	movs	r1, #0
 80a05c6:	f001 f9d0 	bl	80a196a <memset>
{
    clear();
}
 80a05ca:	4620      	mov	r0, r4
 80a05cc:	bd10      	pop	{r4, pc}
 80a05ce:	bf00      	nop
 80a05d0:	080a2190 	.word	0x080a2190

080a05d4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a05d4:	4603      	mov	r3, r0
 80a05d6:	4a07      	ldr	r2, [pc, #28]	; (80a05f4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a05d8:	b510      	push	{r4, lr}
 80a05da:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a05de:	f101 0210 	add.w	r2, r1, #16
 80a05e2:	f851 4b04 	ldr.w	r4, [r1], #4
 80a05e6:	4291      	cmp	r1, r2
 80a05e8:	f843 4b04 	str.w	r4, [r3], #4
 80a05ec:	d1f9      	bne.n	80a05e2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a05ee:	780a      	ldrb	r2, [r1, #0]
 80a05f0:	701a      	strb	r2, [r3, #0]
}
 80a05f2:	bd10      	pop	{r4, pc}
 80a05f4:	080a2190 	.word	0x080a2190

080a05f8 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a05f8:	4a02      	ldr	r2, [pc, #8]	; (80a0604 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a05fa:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a05fc:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a05fe:	2204      	movs	r2, #4
 80a0600:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a0602:	4770      	bx	lr
 80a0604:	080a2190 	.word	0x080a2190

080a0608 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a0608:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a060a:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a060e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a0612:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a0616:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a061a:	2304      	movs	r3, #4
 80a061c:	6041      	str	r1, [r0, #4]
 80a061e:	7503      	strb	r3, [r0, #20]
 80a0620:	bd10      	pop	{r4, pc}
	...

080a0624 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a0624:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a0626:	4d04      	ldr	r5, [pc, #16]	; (80a0638 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a0628:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a062a:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a062e:	9500      	str	r5, [sp, #0]
 80a0630:	f7ff ffea 	bl	80a0608 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a0634:	b003      	add	sp, #12
 80a0636:	bd30      	pop	{r4, r5, pc}
 80a0638:	080a2190 	.word	0x080a2190

080a063c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a063c:	4a01      	ldr	r2, [pc, #4]	; (80a0644 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a063e:	4b02      	ldr	r3, [pc, #8]	; (80a0648 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a0640:	601a      	str	r2, [r3, #0]
 80a0642:	4770      	bx	lr
 80a0644:	080a2257 	.word	0x080a2257
 80a0648:	20000158 	.word	0x20000158

080a064c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a064c:	2300      	movs	r3, #0
 80a064e:	461a      	mov	r2, r3
 80a0650:	6840      	ldr	r0, [r0, #4]
 80a0652:	f7ff beff 	b.w	80a0454 <network_connect>

080a0656 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a0656:	2200      	movs	r2, #0
 80a0658:	2102      	movs	r1, #2
 80a065a:	6840      	ldr	r0, [r0, #4]
 80a065c:	f7ff bf0a 	b.w	80a0474 <network_disconnect>

080a0660 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a0660:	2200      	movs	r2, #0
 80a0662:	4611      	mov	r1, r2
 80a0664:	6840      	ldr	r0, [r0, #4]
 80a0666:	f7ff befd 	b.w	80a0464 <network_connecting>

080a066a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a066a:	2200      	movs	r2, #0
 80a066c:	4611      	mov	r1, r2
 80a066e:	6840      	ldr	r0, [r0, #4]
 80a0670:	f7ff bf08 	b.w	80a0484 <network_ready>

080a0674 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a0674:	2300      	movs	r3, #0
 80a0676:	461a      	mov	r2, r3
 80a0678:	4619      	mov	r1, r3
 80a067a:	6840      	ldr	r0, [r0, #4]
 80a067c:	f7ff bf0a 	b.w	80a0494 <network_on>

080a0680 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a0680:	2300      	movs	r3, #0
 80a0682:	461a      	mov	r2, r3
 80a0684:	4619      	mov	r1, r3
 80a0686:	6840      	ldr	r0, [r0, #4]
 80a0688:	f7ff bf0c 	b.w	80a04a4 <network_off>

080a068c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a068c:	2200      	movs	r2, #0
 80a068e:	f081 0101 	eor.w	r1, r1, #1
 80a0692:	6840      	ldr	r0, [r0, #4]
 80a0694:	f7ff bf0e 	b.w	80a04b4 <network_listen>

080a0698 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a0698:	2200      	movs	r2, #0
 80a069a:	6840      	ldr	r0, [r0, #4]
 80a069c:	f7ff bf1a 	b.w	80a04d4 <network_set_listen_timeout>

080a06a0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a06a0:	2200      	movs	r2, #0
 80a06a2:	4611      	mov	r1, r2
 80a06a4:	6840      	ldr	r0, [r0, #4]
 80a06a6:	f7ff bf1d 	b.w	80a04e4 <network_get_listen_timeout>

080a06aa <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a06aa:	2200      	movs	r2, #0
 80a06ac:	4611      	mov	r1, r2
 80a06ae:	6840      	ldr	r0, [r0, #4]
 80a06b0:	f7ff bf08 	b.w	80a04c4 <network_listening>

080a06b4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a06b4:	b570      	push	{r4, r5, r6, lr}
 80a06b6:	4616      	mov	r6, r2
 80a06b8:	b08e      	sub	sp, #56	; 0x38
 80a06ba:	4604      	mov	r4, r0
    IPAddress addr;
 80a06bc:	a808      	add	r0, sp, #32
 80a06be:	f7ff ff7b 	bl	80a05b8 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a06c2:	2211      	movs	r2, #17
 80a06c4:	2100      	movs	r1, #0
 80a06c6:	a803      	add	r0, sp, #12
 80a06c8:	f001 f94f 	bl	80a196a <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a06cc:	4630      	mov	r0, r6
 80a06ce:	f001 f98f 	bl	80a19f0 <strlen>
 80a06d2:	2500      	movs	r5, #0
 80a06d4:	4b0a      	ldr	r3, [pc, #40]	; (80a0700 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a06d6:	9500      	str	r5, [sp, #0]
 80a06d8:	b281      	uxth	r1, r0
 80a06da:	685b      	ldr	r3, [r3, #4]
 80a06dc:	aa03      	add	r2, sp, #12
 80a06de:	4630      	mov	r0, r6
 80a06e0:	f7ff fe5c 	bl	80a039c <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a06e4:	b120      	cbz	r0, 80a06f0 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a06e6:	4629      	mov	r1, r5
 80a06e8:	4620      	mov	r0, r4
 80a06ea:	f7ff ff85 	bl	80a05f8 <_ZN9IPAddressC1Em>
 80a06ee:	e003      	b.n	80a06f8 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a06f0:	a903      	add	r1, sp, #12
 80a06f2:	4620      	mov	r0, r4
 80a06f4:	f7ff ff6e 	bl	80a05d4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a06f8:	4620      	mov	r0, r4
 80a06fa:	b00e      	add	sp, #56	; 0x38
 80a06fc:	bd70      	pop	{r4, r5, r6, pc}
 80a06fe:	bf00      	nop
 80a0700:	2000060c 	.word	0x2000060c

080a0704 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a0704:	4b02      	ldr	r3, [pc, #8]	; (80a0710 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a0706:	4a03      	ldr	r2, [pc, #12]	; (80a0714 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a0708:	601a      	str	r2, [r3, #0]
 80a070a:	2200      	movs	r2, #0
 80a070c:	605a      	str	r2, [r3, #4]
 80a070e:	4770      	bx	lr
 80a0710:	2000015c 	.word	0x2000015c
 80a0714:	080a2288 	.word	0x080a2288

080a0718 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a0718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a071a:	4606      	mov	r6, r0
 80a071c:	460d      	mov	r5, r1
 80a071e:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a0720:	2400      	movs	r4, #0
  while (size--) {
 80a0722:	42bd      	cmp	r5, r7
 80a0724:	d00c      	beq.n	80a0740 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a0726:	6833      	ldr	r3, [r6, #0]
 80a0728:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a072c:	689b      	ldr	r3, [r3, #8]
 80a072e:	4630      	mov	r0, r6
 80a0730:	4798      	blx	r3
     if (chunk>=0)
 80a0732:	2800      	cmp	r0, #0
 80a0734:	db01      	blt.n	80a073a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a0736:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a0738:	e7f3      	b.n	80a0722 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a073a:	2c00      	cmp	r4, #0
 80a073c:	bf08      	it	eq
 80a073e:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a0740:	4620      	mov	r0, r4
 80a0742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0744 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a0744:	b570      	push	{r4, r5, r6, lr}
 80a0746:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a0748:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a074a:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a074c:	b149      	cbz	r1, 80a0762 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a074e:	f001 f94f 	bl	80a19f0 <strlen>
 80a0752:	682b      	ldr	r3, [r5, #0]
 80a0754:	4602      	mov	r2, r0
 80a0756:	4621      	mov	r1, r4
 80a0758:	4628      	mov	r0, r5
    }
 80a075a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a075e:	68db      	ldr	r3, [r3, #12]
 80a0760:	4718      	bx	r3
    }
 80a0762:	bd70      	pop	{r4, r5, r6, pc}

080a0764 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a0764:	6803      	ldr	r3, [r0, #0]
 80a0766:	689b      	ldr	r3, [r3, #8]
 80a0768:	4718      	bx	r3

080a076a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a076a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a076c:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a076e:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a0770:	f7ff fff8 	bl	80a0764 <_ZN5Print5printEc>
  n += print('\n');
 80a0774:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a0776:	4604      	mov	r4, r0
  n += print('\n');
 80a0778:	4628      	mov	r0, r5
 80a077a:	f7ff fff3 	bl	80a0764 <_ZN5Print5printEc>
  return n;
}
 80a077e:	4420      	add	r0, r4
 80a0780:	bd38      	pop	{r3, r4, r5, pc}

080a0782 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a0782:	b538      	push	{r3, r4, r5, lr}
 80a0784:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a0786:	f7ff ffdd 	bl	80a0744 <_ZN5Print5writeEPKc>
 80a078a:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a078c:	4628      	mov	r0, r5
 80a078e:	f7ff ffec 	bl	80a076a <_ZN5Print7printlnEv>
  return n;
}
 80a0792:	4420      	add	r0, r4
 80a0794:	bd38      	pop	{r3, r4, r5, pc}

080a0796 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a0796:	2a01      	cmp	r2, #1
 80a0798:	bf98      	it	ls
 80a079a:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a079c:	b530      	push	{r4, r5, lr}
 80a079e:	460b      	mov	r3, r1
 80a07a0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a07a2:	2100      	movs	r1, #0
 80a07a4:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a07a8:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a07ac:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a07b0:	fb05 3312 	mls	r3, r5, r2, r3
 80a07b4:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a07b6:	2b09      	cmp	r3, #9
 80a07b8:	bf94      	ite	ls
 80a07ba:	3330      	addls	r3, #48	; 0x30
 80a07bc:	3337      	addhi	r3, #55	; 0x37
 80a07be:	b2db      	uxtb	r3, r3
 80a07c0:	4621      	mov	r1, r4
 80a07c2:	f804 3901 	strb.w	r3, [r4], #-1
 80a07c6:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a07c8:	2d00      	cmp	r5, #0
 80a07ca:	d1ef      	bne.n	80a07ac <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a07cc:	f7ff ffba 	bl	80a0744 <_ZN5Print5writeEPKc>
}
 80a07d0:	b00b      	add	sp, #44	; 0x2c
 80a07d2:	bd30      	pop	{r4, r5, pc}

080a07d4 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a07d4:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a07d6:	b922      	cbnz	r2, 80a07e2 <_ZN5Print5printEmi+0xe>
 80a07d8:	6803      	ldr	r3, [r0, #0]
 80a07da:	b2c9      	uxtb	r1, r1
 80a07dc:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a07de:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a07e0:	4718      	bx	r3
  else return printNumber(n, base);
 80a07e2:	b2d2      	uxtb	r2, r2
}
 80a07e4:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a07e6:	f7ff bfd6 	b.w	80a0796 <_ZN5Print11printNumberEmh>

080a07ea <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a07ea:	f7ff bff3 	b.w	80a07d4 <_ZN5Print5printEmi>

080a07ee <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a07ee:	b510      	push	{r4, lr}
 80a07f0:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a07f2:	f7ff feb7 	bl	80a0564 <_ZNSt14_Function_baseD1Ev>
 80a07f6:	4620      	mov	r0, r4
 80a07f8:	bd10      	pop	{r4, pc}
	...

080a07fc <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a07fc:	4803      	ldr	r0, [pc, #12]	; (80a080c <_GLOBAL__sub_I_RGB+0x10>)
 80a07fe:	2300      	movs	r3, #0
 80a0800:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a0802:	4a03      	ldr	r2, [pc, #12]	; (80a0810 <_GLOBAL__sub_I_RGB+0x14>)
 80a0804:	4903      	ldr	r1, [pc, #12]	; (80a0814 <_GLOBAL__sub_I_RGB+0x18>)
 80a0806:	f000 bc27 	b.w	80a1058 <__aeabi_atexit>
 80a080a:	bf00      	nop
 80a080c:	20000164 	.word	0x20000164
 80a0810:	200000d0 	.word	0x200000d0
 80a0814:	080a07ef 	.word	0x080a07ef

080a0818 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a0818:	4770      	bx	lr

080a081a <_ZN8SPIClassD0Ev>:
 80a081a:	b510      	push	{r4, lr}
 80a081c:	4604      	mov	r4, r0
 80a081e:	2110      	movs	r1, #16
 80a0820:	f000 fc1f 	bl	80a1062 <_ZdlPvj>
 80a0824:	4620      	mov	r0, r4
 80a0826:	bd10      	pop	{r4, pc}

080a0828 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a0828:	b570      	push	{r4, r5, r6, lr}
 80a082a:	4604      	mov	r4, r0
 80a082c:	460e      	mov	r6, r1
 80a082e:	4b07      	ldr	r3, [pc, #28]	; (80a084c <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a0830:	2500      	movs	r5, #0
 80a0832:	6003      	str	r3, [r0, #0]
 80a0834:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a0838:	f7ff fd00 	bl	80a023c <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a083c:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a083e:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a0840:	f7ff fd34 	bl	80a02ac <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a0844:	60a5      	str	r5, [r4, #8]
}
 80a0846:	4620      	mov	r0, r4
 80a0848:	bd70      	pop	{r4, r5, r6, pc}
 80a084a:	bf00      	nop
 80a084c:	080a22bc 	.word	0x080a22bc

080a0850 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a0850:	b510      	push	{r4, lr}
 80a0852:	4604      	mov	r4, r0
{
	free(buffer);
 80a0854:	6800      	ldr	r0, [r0, #0]
 80a0856:	f7ff fe55 	bl	80a0504 <free>
}
 80a085a:	4620      	mov	r0, r4
 80a085c:	bd10      	pop	{r4, pc}

080a085e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a085e:	b510      	push	{r4, lr}
 80a0860:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a0862:	6800      	ldr	r0, [r0, #0]
 80a0864:	b108      	cbz	r0, 80a086a <_ZN6String10invalidateEv+0xc>
 80a0866:	f7ff fe4d 	bl	80a0504 <free>
	buffer = NULL;
 80a086a:	2300      	movs	r3, #0
 80a086c:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a086e:	60a3      	str	r3, [r4, #8]
 80a0870:	6063      	str	r3, [r4, #4]
 80a0872:	bd10      	pop	{r4, pc}

080a0874 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a0874:	b538      	push	{r3, r4, r5, lr}
 80a0876:	4604      	mov	r4, r0
 80a0878:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a087a:	6800      	ldr	r0, [r0, #0]
 80a087c:	3101      	adds	r1, #1
 80a087e:	f7ff fe49 	bl	80a0514 <realloc>
	if (newbuffer) {
 80a0882:	b110      	cbz	r0, 80a088a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a0884:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a0888:	2001      	movs	r0, #1
	}
	return 0;
}
 80a088a:	bd38      	pop	{r3, r4, r5, pc}

080a088c <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a088c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a088e:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a0890:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a0892:	b113      	cbz	r3, 80a089a <_ZN6String7reserveEj+0xe>
 80a0894:	6843      	ldr	r3, [r0, #4]
 80a0896:	428b      	cmp	r3, r1
 80a0898:	d207      	bcs.n	80a08aa <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a089a:	4620      	mov	r0, r4
 80a089c:	f7ff ffea 	bl	80a0874 <_ZN6String12changeBufferEj>
 80a08a0:	b120      	cbz	r0, 80a08ac <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a08a2:	68a3      	ldr	r3, [r4, #8]
 80a08a4:	b90b      	cbnz	r3, 80a08aa <_ZN6String7reserveEj+0x1e>
 80a08a6:	6822      	ldr	r2, [r4, #0]
 80a08a8:	7013      	strb	r3, [r2, #0]
 80a08aa:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a08ac:	bd10      	pop	{r4, pc}

080a08ae <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a08ae:	b570      	push	{r4, r5, r6, lr}
 80a08b0:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a08b2:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a08b4:	4604      	mov	r4, r0
 80a08b6:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a08b8:	f7ff ffe8 	bl	80a088c <_ZN6String7reserveEj>
 80a08bc:	b918      	cbnz	r0, 80a08c6 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a08be:	4620      	mov	r0, r4
 80a08c0:	f7ff ffcd 	bl	80a085e <_ZN6String10invalidateEv>
		return *this;
 80a08c4:	e009      	b.n	80a08da <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a08c6:	462a      	mov	r2, r5
 80a08c8:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a08ca:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a08cc:	6820      	ldr	r0, [r4, #0]
 80a08ce:	f001 f841 	bl	80a1954 <memcpy>
	buffer[len] = 0;
 80a08d2:	6822      	ldr	r2, [r4, #0]
 80a08d4:	68a3      	ldr	r3, [r4, #8]
 80a08d6:	2100      	movs	r1, #0
 80a08d8:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a08da:	4620      	mov	r0, r4
 80a08dc:	bd70      	pop	{r4, r5, r6, pc}

080a08de <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a08de:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a08e0:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a08e2:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a08e4:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a08e6:	6043      	str	r3, [r0, #4]
	len = 0;
 80a08e8:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a08ea:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a08ec:	460d      	mov	r5, r1
 80a08ee:	b139      	cbz	r1, 80a0900 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a08f0:	4608      	mov	r0, r1
 80a08f2:	f001 f87d 	bl	80a19f0 <strlen>
 80a08f6:	4629      	mov	r1, r5
 80a08f8:	4602      	mov	r2, r0
 80a08fa:	4620      	mov	r0, r4
 80a08fc:	f7ff ffd7 	bl	80a08ae <_ZN6String4copyEPKcj>
}
 80a0900:	4620      	mov	r0, r4
 80a0902:	bd38      	pop	{r3, r4, r5, pc}

080a0904 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a0904:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a0908:	4b03      	ldr	r3, [pc, #12]	; (80a0918 <_GLOBAL__sub_I_System+0x14>)
 80a090a:	2000      	movs	r0, #0
 80a090c:	7018      	strb	r0, [r3, #0]
 80a090e:	8058      	strh	r0, [r3, #2]
 80a0910:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0912:	f7ff bd53 	b.w	80a03bc <set_system_mode>
 80a0916:	bf00      	nop
 80a0918:	20000174 	.word	0x20000174

080a091c <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 80a091c:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
 80a091e:	4b14      	ldr	r3, [pc, #80]	; (80a0970 <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 80a0920:	4f14      	ldr	r7, [pc, #80]	; (80a0974 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 80a0922:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
 80a0924:	4b14      	ldr	r3, [pc, #80]	; (80a0978 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 80a0926:	4406      	add	r6, r0
    unix_time += dst_current_cache;
 80a0928:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
 80a092a:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
 80a092c:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
 80a092e:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 80a0930:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 80a0932:	d01b      	beq.n	80a096c <_ZL22Refresh_UnixTime_Cachel+0x50>
 80a0934:	a80a      	add	r0, sp, #40	; 0x28
 80a0936:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
 80a093a:	f000 ff13 	bl	80a1764 <localtime>
	calendar_time->tm_year += 1900;
	return *calendar_time;
 80a093e:	4604      	mov	r4, r0
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 80a0940:	6943      	ldr	r3, [r0, #20]
	return *calendar_time;
 80a0942:	ad01      	add	r5, sp, #4
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 80a0944:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 80a0948:	6143      	str	r3, [r0, #20]
	return *calendar_time;
 80a094a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a094c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a094e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a0950:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a0952:	f8d4 e000 	ldr.w	lr, [r4]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a0956:	4c09      	ldr	r4, [pc, #36]	; (80a097c <_ZL22Refresh_UnixTime_Cachel+0x60>)
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
 80a0958:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a095c:	ad01      	add	r5, sp, #4
 80a095e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a0960:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a0962:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a0964:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
 80a0966:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a0968:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
 80a096c:	b00b      	add	sp, #44	; 0x2c
 80a096e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0970:	200001ac 	.word	0x200001ac
 80a0974:	200001a8 	.word	0x200001a8
 80a0978:	200001a4 	.word	0x200001a4
 80a097c:	2000017c 	.word	0x2000017c

080a0980 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
 80a0980:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 80a0982:	2000      	movs	r0, #0
 80a0984:	f7ff fd56 	bl	80a0434 <spark_sync_time_pending>
 80a0988:	b128      	cbz	r0, 80a0996 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a098a:	f7ff fd4b 	bl	80a0424 <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 80a098e:	f080 0001 	eor.w	r0, r0, #1
 80a0992:	b2c0      	uxtb	r0, r0
 80a0994:	bd08      	pop	{r3, pc}
 80a0996:	2001      	movs	r0, #1
    }
 80a0998:	bd08      	pop	{r3, pc}
	...

080a099c <_ZN9TimeClass7weekdayEl>:
	return weekday(now());
}

/* the weekday for the given time */
int TimeClass::weekday(time_t t)
{
 80a099c:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 80a099e:	f7ff ffbd 	bl	80a091c <_ZL22Refresh_UnixTime_Cachel>
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
 80a09a2:	4b02      	ldr	r3, [pc, #8]	; (80a09ac <_ZN9TimeClass7weekdayEl+0x10>)
 80a09a4:	6998      	ldr	r0, [r3, #24]
}
 80a09a6:	3001      	adds	r0, #1
 80a09a8:	bd08      	pop	{r3, pc}
 80a09aa:	bf00      	nop
 80a09ac:	2000017c 	.word	0x2000017c

080a09b0 <_ZN9TimeClass5monthEl>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
 80a09b0:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 80a09b2:	f7ff ffb3 	bl	80a091c <_ZL22Refresh_UnixTime_Cachel>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
 80a09b6:	4b02      	ldr	r3, [pc, #8]	; (80a09c0 <_ZN9TimeClass5monthEl+0x10>)
 80a09b8:	6918      	ldr	r0, [r3, #16]
}
 80a09ba:	3001      	adds	r0, #1
 80a09bc:	bd08      	pop	{r3, pc}
 80a09be:	bf00      	nop
 80a09c0:	2000017c 	.word	0x2000017c

080a09c4 <_ZN9TimeClass4zoneEf>:
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 80a09c4:	b510      	push	{r4, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
 80a09c6:	4909      	ldr	r1, [pc, #36]	; (80a09ec <_ZN9TimeClass4zoneEf+0x28>)
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 80a09c8:	4604      	mov	r4, r0
	if(GMT_Offset < -12 || GMT_Offset > 14)
 80a09ca:	f000 fe33 	bl	80a1634 <__aeabi_fcmplt>
 80a09ce:	b960      	cbnz	r0, 80a09ea <_ZN9TimeClass4zoneEf+0x26>
 80a09d0:	4907      	ldr	r1, [pc, #28]	; (80a09f0 <_ZN9TimeClass4zoneEf+0x2c>)
 80a09d2:	4620      	mov	r0, r4
 80a09d4:	f000 fe4c 	bl	80a1670 <__aeabi_fcmpgt>
 80a09d8:	b938      	cbnz	r0, 80a09ea <_ZN9TimeClass4zoneEf+0x26>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
 80a09da:	4906      	ldr	r1, [pc, #24]	; (80a09f4 <_ZN9TimeClass4zoneEf+0x30>)
 80a09dc:	4620      	mov	r0, r4
 80a09de:	f000 fc8b 	bl	80a12f8 <__aeabi_fmul>
 80a09e2:	f000 fe4f 	bl	80a1684 <__aeabi_f2iz>
 80a09e6:	4b04      	ldr	r3, [pc, #16]	; (80a09f8 <_ZN9TimeClass4zoneEf+0x34>)
 80a09e8:	6018      	str	r0, [r3, #0]
 80a09ea:	bd10      	pop	{r4, pc}
 80a09ec:	c1400000 	.word	0xc1400000
 80a09f0:	41600000 	.word	0x41600000
 80a09f4:	45610000 	.word	0x45610000
 80a09f8:	200001ac 	.word	0x200001ac

080a09fc <_ZN9TimeClass12setDSTOffsetEf>:
{
    return dst_cache / 3600.0;
}

void TimeClass::setDSTOffset(float offset)
{
 80a09fc:	b510      	push	{r4, lr}
    if (offset < 0 || offset > 2)
 80a09fe:	2100      	movs	r1, #0
{
    return dst_cache / 3600.0;
}

void TimeClass::setDSTOffset(float offset)
{
 80a0a00:	4604      	mov	r4, r0
    if (offset < 0 || offset > 2)
 80a0a02:	f000 fe17 	bl	80a1634 <__aeabi_fcmplt>
 80a0a06:	b968      	cbnz	r0, 80a0a24 <_ZN9TimeClass12setDSTOffsetEf+0x28>
 80a0a08:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80a0a0c:	4620      	mov	r0, r4
 80a0a0e:	f000 fe2f 	bl	80a1670 <__aeabi_fcmpgt>
 80a0a12:	b938      	cbnz	r0, 80a0a24 <_ZN9TimeClass12setDSTOffsetEf+0x28>
    {
        return;
    }
    dst_cache = offset * 3600;
 80a0a14:	4904      	ldr	r1, [pc, #16]	; (80a0a28 <_ZN9TimeClass12setDSTOffsetEf+0x2c>)
 80a0a16:	4620      	mov	r0, r4
 80a0a18:	f000 fc6e 	bl	80a12f8 <__aeabi_fmul>
 80a0a1c:	f000 fe32 	bl	80a1684 <__aeabi_f2iz>
 80a0a20:	4b02      	ldr	r3, [pc, #8]	; (80a0a2c <_ZN9TimeClass12setDSTOffsetEf+0x30>)
 80a0a22:	6018      	str	r0, [r3, #0]
 80a0a24:	bd10      	pop	{r4, pc}
 80a0a26:	bf00      	nop
 80a0a28:	45610000 	.word	0x45610000
 80a0a2c:	20000014 	.word	0x20000014

080a0a30 <_ZN9TimeClass8beginDSTEv>:
}

void TimeClass::beginDST()
{
    dst_current_cache = dst_cache;
 80a0a30:	4b02      	ldr	r3, [pc, #8]	; (80a0a3c <_ZN9TimeClass8beginDSTEv+0xc>)
 80a0a32:	681a      	ldr	r2, [r3, #0]
 80a0a34:	4b02      	ldr	r3, [pc, #8]	; (80a0a40 <_ZN9TimeClass8beginDSTEv+0x10>)
 80a0a36:	601a      	str	r2, [r3, #0]
 80a0a38:	4770      	bx	lr
 80a0a3a:	bf00      	nop
 80a0a3c:	20000014 	.word	0x20000014
 80a0a40:	200001a4 	.word	0x200001a4

080a0a44 <_ZN9TimeClass6endDSTEv>:
}

void TimeClass::endDST()
{
    dst_current_cache = 0;
 80a0a44:	4b01      	ldr	r3, [pc, #4]	; (80a0a4c <_ZN9TimeClass6endDSTEv+0x8>)
 80a0a46:	2200      	movs	r2, #0
 80a0a48:	601a      	str	r2, [r3, #0]
 80a0a4a:	4770      	bx	lr
 80a0a4c:	200001a4 	.word	0x200001a4

080a0a50 <_ZN9TimeClass5isDSTEv>:
}

uint8_t TimeClass::isDST()
{
    return !(dst_current_cache == 0);
 80a0a50:	4b02      	ldr	r3, [pc, #8]	; (80a0a5c <_ZN9TimeClass5isDSTEv+0xc>)
 80a0a52:	6818      	ldr	r0, [r3, #0]
}
 80a0a54:	3000      	adds	r0, #0
 80a0a56:	bf18      	it	ne
 80a0a58:	2001      	movne	r0, #1
 80a0a5a:	4770      	bx	lr
 80a0a5c:	200001a4 	.word	0x200001a4

080a0a60 <_ZN9TimeClass7setTimeEl>:

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
 80a0a60:	b508      	push	{r3, lr}
    HAL_RTC_Set_UnixTime(t);
 80a0a62:	f7ff fc0b 	bl	80a027c <HAL_RTC_Set_UnixTime>
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}
 80a0a66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
    HAL_RTC_Set_UnixTime(t);
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
 80a0a6a:	2200      	movs	r2, #0
 80a0a6c:	4611      	mov	r1, r2
 80a0a6e:	4610      	mov	r0, r2
 80a0a70:	f7ff bcb4 	b.w	80a03dc <system_notify_time_changed>

080a0a74 <_ZN9TimeClass7timeStrEl>:
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 80a0a74:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
 80a0a76:	4b0e      	ldr	r3, [pc, #56]	; (80a0ab0 <_ZN9TimeClass7timeStrEl+0x3c>)
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 80a0a78:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
 80a0a7a:	681b      	ldr	r3, [r3, #0]
 80a0a7c:	a802      	add	r0, sp, #8
 80a0a7e:	4419      	add	r1, r3
 80a0a80:	4b0c      	ldr	r3, [pc, #48]	; (80a0ab4 <_ZN9TimeClass7timeStrEl+0x40>)
 80a0a82:	681b      	ldr	r3, [r3, #0]
 80a0a84:	4419      	add	r1, r3
 80a0a86:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
 80a0a8a:	f000 fe6b 	bl	80a1764 <localtime>
        char* ascstr = asctime(calendar_time);
 80a0a8e:	f000 fe1f 	bl	80a16d0 <asctime>
 80a0a92:	4605      	mov	r5, r0
        int len = strlen(ascstr);
 80a0a94:	f000 ffac 	bl	80a19f0 <strlen>
        ascstr[len-1] = 0; // remove final newline
 80a0a98:	2300      	movs	r3, #0
 80a0a9a:	4428      	add	r0, r5
 80a0a9c:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
 80a0aa0:	4629      	mov	r1, r5
 80a0aa2:	4620      	mov	r0, r4
 80a0aa4:	f7ff ff1b 	bl	80a08de <_ZN6StringC1EPK19__FlashStringHelper>
}
 80a0aa8:	4620      	mov	r0, r4
 80a0aaa:	b003      	add	sp, #12
 80a0aac:	bd30      	pop	{r4, r5, pc}
 80a0aae:	bf00      	nop
 80a0ab0:	200001ac 	.word	0x200001ac
 80a0ab4:	200001a4 	.word	0x200001a4

080a0ab8 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 80a0ab8:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
 80a0aba:	2000      	movs	r0, #0
 80a0abc:	f7ff fbe6 	bl	80a028c <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
 80a0ac0:	4604      	mov	r4, r0
 80a0ac2:	b968      	cbnz	r0, 80a0ae0 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 80a0ac4:	f7ff fc72 	bl	80a03ac <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 80a0ac8:	2801      	cmp	r0, #1
 80a0aca:	d10b      	bne.n	80a0ae4 <_ZN9TimeClass7isValidEv+0x2c>
 80a0acc:	4620      	mov	r0, r4
 80a0ace:	f7ff fc7d 	bl	80a03cc <system_thread_get_state>
 80a0ad2:	b938      	cbnz	r0, 80a0ae4 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
 80a0ad4:	f7ff ff54 	bl	80a0980 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a0ad8:	b930      	cbnz	r0, 80a0ae8 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
 80a0ada:	f7ff fc9b 	bl	80a0414 <spark_process>
 80a0ade:	e7f9      	b.n	80a0ad4 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
 80a0ae0:	2001      	movs	r0, #1
 80a0ae2:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
 80a0ae4:	2000      	movs	r0, #0
 80a0ae6:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
 80a0ae8:	f7ff ff4a 	bl	80a0980 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
 80a0aec:	2000      	movs	r0, #0
 80a0aee:	f7ff fbcd 	bl	80a028c <HAL_RTC_Time_Is_Valid>
 80a0af2:	3000      	adds	r0, #0
 80a0af4:	bf18      	it	ne
 80a0af6:	2001      	movne	r0, #1
    }
    return rtcstate;
}
 80a0af8:	bd10      	pop	{r4, pc}

080a0afa <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
 80a0afa:	b508      	push	{r3, lr}
    (void)isValid();
 80a0afc:	f7ff ffdc 	bl	80a0ab8 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
 80a0b00:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
 80a0b04:	f7ff bbb2 	b.w	80a026c <HAL_RTC_Get_UnixTime>

080a0b08 <_ZN9TimeClass3dayEv>:
	return calendar_time_cache.tm_sec;
}

/* current day */
int TimeClass::day()
{
 80a0b08:	b508      	push	{r3, lr}
	return day(now());
 80a0b0a:	f7ff fff6 	bl	80a0afa <_ZN9TimeClass3nowEv>
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
	Refresh_UnixTime_Cache(t);
 80a0b0e:	f7ff ff05 	bl	80a091c <_ZL22Refresh_UnixTime_Cachel>

/* current day */
int TimeClass::day()
{
	return day(now());
}
 80a0b12:	4b01      	ldr	r3, [pc, #4]	; (80a0b18 <_ZN9TimeClass3dayEv+0x10>)
 80a0b14:	68d8      	ldr	r0, [r3, #12]
 80a0b16:	bd08      	pop	{r3, pc}
 80a0b18:	2000017c 	.word	0x2000017c

080a0b1c <_ZN9TimeClass7weekdayEv>:
	return calendar_time_cache.tm_mday;
}

/* the current weekday */
int TimeClass::weekday()
{
 80a0b1c:	b508      	push	{r3, lr}
	return weekday(now());
 80a0b1e:	f7ff ffec 	bl	80a0afa <_ZN9TimeClass3nowEv>
}
 80a0b22:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

/* the current weekday */
int TimeClass::weekday()
{
	return weekday(now());
 80a0b26:	f7ff bf39 	b.w	80a099c <_ZN9TimeClass7weekdayEl>

080a0b2a <_ZN9TimeClass5monthEv>:
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
}

/* current month */
int TimeClass::month()
{
 80a0b2a:	b508      	push	{r3, lr}
	return month(now());
 80a0b2c:	f7ff ffe5 	bl	80a0afa <_ZN9TimeClass3nowEv>
}
 80a0b30:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

/* current month */
int TimeClass::month()
{
	return month(now());
 80a0b34:	f7ff bf3c 	b.w	80a09b0 <_ZN9TimeClass5monthEl>

080a0b38 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a0b38:	4b02      	ldr	r3, [pc, #8]	; (80a0b44 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a0b3a:	681a      	ldr	r2, [r3, #0]
 80a0b3c:	4b02      	ldr	r3, [pc, #8]	; (80a0b48 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a0b3e:	601a      	str	r2, [r3, #0]
 80a0b40:	4770      	bx	lr
 80a0b42:	bf00      	nop
 80a0b44:	20000018 	.word	0x20000018
 80a0b48:	200001a0 	.word	0x200001a0

080a0b4c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a0b4c:	4770      	bx	lr

080a0b4e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a0b4e:	7441      	strb	r1, [r0, #17]
 80a0b50:	4770      	bx	lr

080a0b52 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a0b52:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a0b54:	7c00      	ldrb	r0, [r0, #16]
 80a0b56:	f7ff fbe1 	bl	80a031c <HAL_USART_Available_Data_For_Write>
}
 80a0b5a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0b5e:	bd08      	pop	{r3, pc}

080a0b60 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a0b60:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a0b62:	7c00      	ldrb	r0, [r0, #16]
 80a0b64:	f7ff fbba 	bl	80a02dc <HAL_USART_Available_Data>
}
 80a0b68:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0b6c:	bd08      	pop	{r3, pc}

080a0b6e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a0b6e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a0b70:	7c00      	ldrb	r0, [r0, #16]
 80a0b72:	f7ff fbc3 	bl	80a02fc <HAL_USART_Peek_Data>
}
 80a0b76:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a0b7a:	bf28      	it	cs
 80a0b7c:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a0b80:	bd08      	pop	{r3, pc}

080a0b82 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a0b82:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a0b84:	7c00      	ldrb	r0, [r0, #16]
 80a0b86:	f7ff fbb1 	bl	80a02ec <HAL_USART_Read_Data>
}
 80a0b8a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a0b8e:	bf28      	it	cs
 80a0b90:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a0b94:	bd08      	pop	{r3, pc}

080a0b96 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a0b96:	7c00      	ldrb	r0, [r0, #16]
 80a0b98:	f7ff bbb8 	b.w	80a030c <HAL_USART_Flush_Data>

080a0b9c <_ZN11USARTSerialD0Ev>:
 80a0b9c:	b510      	push	{r4, lr}
 80a0b9e:	4604      	mov	r4, r0
 80a0ba0:	2114      	movs	r1, #20
 80a0ba2:	f000 fa5e 	bl	80a1062 <_ZdlPvj>
 80a0ba6:	4620      	mov	r0, r4
 80a0ba8:	bd10      	pop	{r4, pc}

080a0baa <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a0baa:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a0bac:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a0bae:	4604      	mov	r4, r0
 80a0bb0:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a0bb2:	b925      	cbnz	r5, 80a0bbe <_ZN11USARTSerial5writeEh+0x14>
 80a0bb4:	7c00      	ldrb	r0, [r0, #16]
 80a0bb6:	f7ff fbb1 	bl	80a031c <HAL_USART_Available_Data_For_Write>
 80a0bba:	2800      	cmp	r0, #0
 80a0bbc:	dd05      	ble.n	80a0bca <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a0bbe:	4631      	mov	r1, r6
 80a0bc0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a0bc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a0bc6:	f7ff bb81 	b.w	80a02cc <HAL_USART_Write_Data>
  }
  return 0;
}
 80a0bca:	4628      	mov	r0, r5
 80a0bcc:	bd70      	pop	{r4, r5, r6, pc}
	...

080a0bd0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a0bd0:	b510      	push	{r4, lr}
 80a0bd2:	4604      	mov	r4, r0
 80a0bd4:	4608      	mov	r0, r1
 80a0bd6:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a0bd8:	2200      	movs	r2, #0
 80a0bda:	6062      	str	r2, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a0bdc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a0be0:	60a2      	str	r2, [r4, #8]
 80a0be2:	4a05      	ldr	r2, [pc, #20]	; (80a0bf8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a0be4:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a0be6:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a0be8:	2201      	movs	r2, #1
 80a0bea:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a0bec:	461a      	mov	r2, r3
 80a0bee:	f7ff fb65 	bl	80a02bc <HAL_USART_Init>
}
 80a0bf2:	4620      	mov	r0, r4
 80a0bf4:	bd10      	pop	{r4, pc}
 80a0bf6:	bf00      	nop
 80a0bf8:	080a22f4 	.word	0x080a22f4

080a0bfc <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a0bfc:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a0bfe:	4d0c      	ldr	r5, [pc, #48]	; (80a0c30 <_Z22__fetch_global_Serial1v+0x34>)
 80a0c00:	6829      	ldr	r1, [r5, #0]
 80a0c02:	f011 0401 	ands.w	r4, r1, #1
 80a0c06:	d111      	bne.n	80a0c2c <_Z22__fetch_global_Serial1v+0x30>
 80a0c08:	4628      	mov	r0, r5
 80a0c0a:	f7ff fa48 	bl	80a009e <__cxa_guard_acquire>
 80a0c0e:	b168      	cbz	r0, 80a0c2c <_Z22__fetch_global_Serial1v+0x30>
 80a0c10:	4a08      	ldr	r2, [pc, #32]	; (80a0c34 <_Z22__fetch_global_Serial1v+0x38>)
 80a0c12:	4621      	mov	r1, r4
 80a0c14:	4b08      	ldr	r3, [pc, #32]	; (80a0c38 <_Z22__fetch_global_Serial1v+0x3c>)
 80a0c16:	4809      	ldr	r0, [pc, #36]	; (80a0c3c <_Z22__fetch_global_Serial1v+0x40>)
 80a0c18:	f7ff ffda 	bl	80a0bd0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a0c1c:	4628      	mov	r0, r5
 80a0c1e:	f7ff fa43 	bl	80a00a8 <__cxa_guard_release>
 80a0c22:	4a07      	ldr	r2, [pc, #28]	; (80a0c40 <_Z22__fetch_global_Serial1v+0x44>)
 80a0c24:	4907      	ldr	r1, [pc, #28]	; (80a0c44 <_Z22__fetch_global_Serial1v+0x48>)
 80a0c26:	4805      	ldr	r0, [pc, #20]	; (80a0c3c <_Z22__fetch_global_Serial1v+0x40>)
 80a0c28:	f000 fa16 	bl	80a1058 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a0c2c:	4803      	ldr	r0, [pc, #12]	; (80a0c3c <_Z22__fetch_global_Serial1v+0x40>)
 80a0c2e:	bd38      	pop	{r3, r4, r5, pc}
 80a0c30:	20000248 	.word	0x20000248
 80a0c34:	2000024c 	.word	0x2000024c
 80a0c38:	200001c4 	.word	0x200001c4
 80a0c3c:	200001b0 	.word	0x200001b0
 80a0c40:	200000d0 	.word	0x200000d0
 80a0c44:	080a0b4d 	.word	0x080a0b4d

080a0c48 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a0c48:	7441      	strb	r1, [r0, #17]
 80a0c4a:	4770      	bx	lr

080a0c4c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a0c4c:	4770      	bx	lr

080a0c4e <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a0c4e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a0c50:	2100      	movs	r1, #0
 80a0c52:	7c00      	ldrb	r0, [r0, #16]
 80a0c54:	f7ff fb8a 	bl	80a036c <HAL_USB_USART_Receive_Data>
}
 80a0c58:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a0c5c:	bf28      	it	cs
 80a0c5e:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a0c62:	bd08      	pop	{r3, pc}

080a0c64 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a0c64:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a0c66:	2101      	movs	r1, #1
 80a0c68:	7c00      	ldrb	r0, [r0, #16]
 80a0c6a:	f7ff fb7f 	bl	80a036c <HAL_USB_USART_Receive_Data>
}
 80a0c6e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a0c72:	bf28      	it	cs
 80a0c74:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a0c78:	bd08      	pop	{r3, pc}

080a0c7a <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a0c7a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a0c7c:	7c00      	ldrb	r0, [r0, #16]
 80a0c7e:	f7ff fb6d 	bl	80a035c <HAL_USB_USART_Available_Data_For_Write>
}
 80a0c82:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0c86:	bd08      	pop	{r3, pc}

080a0c88 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a0c88:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a0c8a:	7c00      	ldrb	r0, [r0, #16]
 80a0c8c:	f7ff fb5e 	bl	80a034c <HAL_USB_USART_Available_Data>
}
 80a0c90:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0c94:	bd08      	pop	{r3, pc}

080a0c96 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a0c96:	7c00      	ldrb	r0, [r0, #16]
 80a0c98:	f7ff bb78 	b.w	80a038c <HAL_USB_USART_Flush_Data>

080a0c9c <_ZN9USBSerialD0Ev>:
 80a0c9c:	b510      	push	{r4, lr}
 80a0c9e:	4604      	mov	r4, r0
 80a0ca0:	2114      	movs	r1, #20
 80a0ca2:	f000 f9de 	bl	80a1062 <_ZdlPvj>
 80a0ca6:	4620      	mov	r0, r4
 80a0ca8:	bd10      	pop	{r4, pc}

080a0caa <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a0caa:	b538      	push	{r3, r4, r5, lr}
 80a0cac:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a0cae:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a0cb0:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a0cb2:	f7ff fb53 	bl	80a035c <HAL_USB_USART_Available_Data_For_Write>
 80a0cb6:	2800      	cmp	r0, #0
 80a0cb8:	dc01      	bgt.n	80a0cbe <_ZN9USBSerial5writeEh+0x14>
 80a0cba:	7c60      	ldrb	r0, [r4, #17]
 80a0cbc:	b128      	cbz	r0, 80a0cca <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a0cbe:	4629      	mov	r1, r5
 80a0cc0:	7c20      	ldrb	r0, [r4, #16]
 80a0cc2:	f7ff fb5b 	bl	80a037c <HAL_USB_USART_Send_Data>
 80a0cc6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a0cca:	bd38      	pop	{r3, r4, r5, pc}

080a0ccc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a0ccc:	b510      	push	{r4, lr}
 80a0cce:	4604      	mov	r4, r0
 80a0cd0:	2300      	movs	r3, #0
 80a0cd2:	6063      	str	r3, [r4, #4]
 80a0cd4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0cd8:	60a3      	str	r3, [r4, #8]
 80a0cda:	4b05      	ldr	r3, [pc, #20]	; (80a0cf0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a0cdc:	4608      	mov	r0, r1
 80a0cde:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a0ce0:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a0ce2:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a0ce4:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a0ce6:	4611      	mov	r1, r2
 80a0ce8:	f7ff fb20 	bl	80a032c <HAL_USB_USART_Init>
}
 80a0cec:	4620      	mov	r0, r4
 80a0cee:	bd10      	pop	{r4, pc}
 80a0cf0:	080a2324 	.word	0x080a2324

080a0cf4 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a0cf4:	2200      	movs	r2, #0
 80a0cf6:	7c00      	ldrb	r0, [r0, #16]
 80a0cf8:	f7ff bb20 	b.w	80a033c <HAL_USB_USART_Begin>

080a0cfc <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a0cfc:	b510      	push	{r4, lr}
 80a0cfe:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a0d00:	2214      	movs	r2, #20
 80a0d02:	2100      	movs	r1, #0
 80a0d04:	f000 fe31 	bl	80a196a <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a0d08:	4b05      	ldr	r3, [pc, #20]	; (80a0d20 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a0d0a:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a0d0c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a0d0e:	4b05      	ldr	r3, [pc, #20]	; (80a0d24 <_Z19acquireSerialBufferv+0x28>)
 80a0d10:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a0d12:	f240 1301 	movw	r3, #257	; 0x101
 80a0d16:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a0d18:	2381      	movs	r3, #129	; 0x81
 80a0d1a:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a0d1c:	bd10      	pop	{r4, pc}
 80a0d1e:	bf00      	nop
 80a0d20:	20000355 	.word	0x20000355
 80a0d24:	200002d4 	.word	0x200002d4

080a0d28 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a0d28:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a0d2a:	4d0e      	ldr	r5, [pc, #56]	; (80a0d64 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a0d2c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a0d2e:	a801      	add	r0, sp, #4
 80a0d30:	f7ff ffe4 	bl	80a0cfc <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a0d34:	6829      	ldr	r1, [r5, #0]
 80a0d36:	f011 0401 	ands.w	r4, r1, #1
 80a0d3a:	d110      	bne.n	80a0d5e <_Z16_fetch_usbserialv+0x36>
 80a0d3c:	4628      	mov	r0, r5
 80a0d3e:	f7ff f9ae 	bl	80a009e <__cxa_guard_acquire>
 80a0d42:	b160      	cbz	r0, 80a0d5e <_Z16_fetch_usbserialv+0x36>
 80a0d44:	aa01      	add	r2, sp, #4
 80a0d46:	4621      	mov	r1, r4
 80a0d48:	4807      	ldr	r0, [pc, #28]	; (80a0d68 <_Z16_fetch_usbserialv+0x40>)
 80a0d4a:	f7ff ffbf 	bl	80a0ccc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a0d4e:	4628      	mov	r0, r5
 80a0d50:	f7ff f9aa 	bl	80a00a8 <__cxa_guard_release>
 80a0d54:	4a05      	ldr	r2, [pc, #20]	; (80a0d6c <_Z16_fetch_usbserialv+0x44>)
 80a0d56:	4906      	ldr	r1, [pc, #24]	; (80a0d70 <_Z16_fetch_usbserialv+0x48>)
 80a0d58:	4803      	ldr	r0, [pc, #12]	; (80a0d68 <_Z16_fetch_usbserialv+0x40>)
 80a0d5a:	f000 f97d 	bl	80a1058 <__aeabi_atexit>
	return _usbserial;
}
 80a0d5e:	4802      	ldr	r0, [pc, #8]	; (80a0d68 <_Z16_fetch_usbserialv+0x40>)
 80a0d60:	b007      	add	sp, #28
 80a0d62:	bd30      	pop	{r4, r5, pc}
 80a0d64:	200002d0 	.word	0x200002d0
 80a0d68:	20000458 	.word	0x20000458
 80a0d6c:	200000d0 	.word	0x200000d0
 80a0d70:	080a0c4d 	.word	0x080a0c4d

080a0d74 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a0d74:	b510      	push	{r4, lr}
 80a0d76:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a0d78:	2214      	movs	r2, #20
 80a0d7a:	2100      	movs	r1, #0
 80a0d7c:	f000 fdf5 	bl	80a196a <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a0d80:	4b05      	ldr	r3, [pc, #20]	; (80a0d98 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a0d82:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a0d84:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a0d86:	4b05      	ldr	r3, [pc, #20]	; (80a0d9c <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a0d88:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a0d8a:	f240 1301 	movw	r3, #257	; 0x101
 80a0d8e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a0d90:	2381      	movs	r3, #129	; 0x81
 80a0d92:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a0d94:	bd10      	pop	{r4, pc}
 80a0d96:	bf00      	nop
 80a0d98:	20000508 	.word	0x20000508
 80a0d9c:	20000470 	.word	0x20000470

080a0da0 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a0da0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a0da2:	4c0e      	ldr	r4, [pc, #56]	; (80a0ddc <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a0da4:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a0da6:	a801      	add	r0, sp, #4
 80a0da8:	f7ff ffe4 	bl	80a0d74 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a0dac:	6823      	ldr	r3, [r4, #0]
 80a0dae:	07db      	lsls	r3, r3, #31
 80a0db0:	d410      	bmi.n	80a0dd4 <_Z17_fetch_usbserial1v+0x34>
 80a0db2:	4620      	mov	r0, r4
 80a0db4:	f7ff f973 	bl	80a009e <__cxa_guard_acquire>
 80a0db8:	b160      	cbz	r0, 80a0dd4 <_Z17_fetch_usbserial1v+0x34>
 80a0dba:	aa01      	add	r2, sp, #4
 80a0dbc:	2101      	movs	r1, #1
 80a0dbe:	4808      	ldr	r0, [pc, #32]	; (80a0de0 <_Z17_fetch_usbserial1v+0x40>)
 80a0dc0:	f7ff ff84 	bl	80a0ccc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a0dc4:	4620      	mov	r0, r4
 80a0dc6:	f7ff f96f 	bl	80a00a8 <__cxa_guard_release>
 80a0dca:	4a06      	ldr	r2, [pc, #24]	; (80a0de4 <_Z17_fetch_usbserial1v+0x44>)
 80a0dcc:	4906      	ldr	r1, [pc, #24]	; (80a0de8 <_Z17_fetch_usbserial1v+0x48>)
 80a0dce:	4804      	ldr	r0, [pc, #16]	; (80a0de0 <_Z17_fetch_usbserial1v+0x40>)
 80a0dd0:	f000 f942 	bl	80a1058 <__aeabi_atexit>
  return _usbserial1;
}
 80a0dd4:	4802      	ldr	r0, [pc, #8]	; (80a0de0 <_Z17_fetch_usbserial1v+0x40>)
 80a0dd6:	b006      	add	sp, #24
 80a0dd8:	bd10      	pop	{r4, pc}
 80a0dda:	bf00      	nop
 80a0ddc:	2000046c 	.word	0x2000046c
 80a0de0:	200004f4 	.word	0x200004f4
 80a0de4:	200000d0 	.word	0x200000d0
 80a0de8:	080a0c4d 	.word	0x080a0c4d

080a0dec <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a0dec:	2200      	movs	r2, #0
 80a0dee:	4611      	mov	r1, r2
 80a0df0:	6840      	ldr	r0, [r0, #4]
 80a0df2:	f7ff bb47 	b.w	80a0484 <network_ready>

080a0df6 <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a0df6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0df8:	4616      	mov	r6, r2
 80a0dfa:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a0dfc:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a0dfe:	460f      	mov	r7, r1
 80a0e00:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a0e02:	2100      	movs	r1, #0
 80a0e04:	a803      	add	r0, sp, #12
 80a0e06:	f000 fdb0 	bl	80a196a <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a0e0a:	4630      	mov	r0, r6
 80a0e0c:	f000 fdf0 	bl	80a19f0 <strlen>
 80a0e10:	2500      	movs	r5, #0
 80a0e12:	9500      	str	r5, [sp, #0]
 80a0e14:	b281      	uxth	r1, r0
 80a0e16:	687b      	ldr	r3, [r7, #4]
 80a0e18:	aa03      	add	r2, sp, #12
 80a0e1a:	4630      	mov	r0, r6
 80a0e1c:	f7ff fabe 	bl	80a039c <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a0e20:	b120      	cbz	r0, 80a0e2c <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a0e22:	4629      	mov	r1, r5
 80a0e24:	4620      	mov	r0, r4
 80a0e26:	f7ff fbe7 	bl	80a05f8 <_ZN9IPAddressC1Em>
 80a0e2a:	e003      	b.n	80a0e34 <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a0e2c:	a903      	add	r1, sp, #12
 80a0e2e:	4620      	mov	r0, r4
 80a0e30:	f7ff fbd0 	bl	80a05d4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a0e34:	4620      	mov	r0, r4
 80a0e36:	b009      	add	sp, #36	; 0x24
 80a0e38:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0e3a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a0e3a:	2200      	movs	r2, #0
 80a0e3c:	4611      	mov	r1, r2
 80a0e3e:	6840      	ldr	r0, [r0, #4]
 80a0e40:	f7ff bb40 	b.w	80a04c4 <network_listening>

080a0e44 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a0e44:	2200      	movs	r2, #0
 80a0e46:	4611      	mov	r1, r2
 80a0e48:	6840      	ldr	r0, [r0, #4]
 80a0e4a:	f7ff bb4b 	b.w	80a04e4 <network_get_listen_timeout>

080a0e4e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a0e4e:	2200      	movs	r2, #0
 80a0e50:	6840      	ldr	r0, [r0, #4]
 80a0e52:	f7ff bb3f 	b.w	80a04d4 <network_set_listen_timeout>

080a0e56 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a0e56:	2200      	movs	r2, #0
 80a0e58:	f081 0101 	eor.w	r1, r1, #1
 80a0e5c:	6840      	ldr	r0, [r0, #4]
 80a0e5e:	f7ff bb29 	b.w	80a04b4 <network_listen>

080a0e62 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a0e62:	2300      	movs	r3, #0
 80a0e64:	461a      	mov	r2, r3
 80a0e66:	4619      	mov	r1, r3
 80a0e68:	6840      	ldr	r0, [r0, #4]
 80a0e6a:	f7ff bb1b 	b.w	80a04a4 <network_off>

080a0e6e <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a0e6e:	2300      	movs	r3, #0
 80a0e70:	461a      	mov	r2, r3
 80a0e72:	4619      	mov	r1, r3
 80a0e74:	6840      	ldr	r0, [r0, #4]
 80a0e76:	f7ff bb0d 	b.w	80a0494 <network_on>

080a0e7a <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a0e7a:	2200      	movs	r2, #0
 80a0e7c:	4611      	mov	r1, r2
 80a0e7e:	6840      	ldr	r0, [r0, #4]
 80a0e80:	f7ff baf0 	b.w	80a0464 <network_connecting>

080a0e84 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a0e84:	2200      	movs	r2, #0
 80a0e86:	2102      	movs	r1, #2
 80a0e88:	6840      	ldr	r0, [r0, #4]
 80a0e8a:	f7ff baf3 	b.w	80a0474 <network_disconnect>

080a0e8e <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a0e8e:	2300      	movs	r3, #0
 80a0e90:	461a      	mov	r2, r3
 80a0e92:	6840      	ldr	r0, [r0, #4]
 80a0e94:	f7ff bade 	b.w	80a0454 <network_connect>

080a0e98 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a0e98:	4b02      	ldr	r3, [pc, #8]	; (80a0ea4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a0e9a:	2204      	movs	r2, #4
 80a0e9c:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a0e9e:	4a02      	ldr	r2, [pc, #8]	; (80a0ea8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a0ea0:	601a      	str	r2, [r3, #0]
 80a0ea2:	4770      	bx	lr
 80a0ea4:	2000060c 	.word	0x2000060c
 80a0ea8:	080a2354 	.word	0x080a2354

080a0eac <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a0eac:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a0eae:	4b14      	ldr	r3, [pc, #80]	; (80a0f00 <serialEventRun+0x54>)
 80a0eb0:	b133      	cbz	r3, 80a0ec0 <serialEventRun+0x14>
 80a0eb2:	f7ff ff39 	bl	80a0d28 <_Z16_fetch_usbserialv>
 80a0eb6:	6803      	ldr	r3, [r0, #0]
 80a0eb8:	691b      	ldr	r3, [r3, #16]
 80a0eba:	4798      	blx	r3
 80a0ebc:	2800      	cmp	r0, #0
 80a0ebe:	dc16      	bgt.n	80a0eee <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a0ec0:	4b10      	ldr	r3, [pc, #64]	; (80a0f04 <serialEventRun+0x58>)
 80a0ec2:	b133      	cbz	r3, 80a0ed2 <serialEventRun+0x26>
 80a0ec4:	f7ff fe9a 	bl	80a0bfc <_Z22__fetch_global_Serial1v>
 80a0ec8:	6803      	ldr	r3, [r0, #0]
 80a0eca:	691b      	ldr	r3, [r3, #16]
 80a0ecc:	4798      	blx	r3
 80a0ece:	2800      	cmp	r0, #0
 80a0ed0:	dc10      	bgt.n	80a0ef4 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a0ed2:	4b0d      	ldr	r3, [pc, #52]	; (80a0f08 <serialEventRun+0x5c>)
 80a0ed4:	b10b      	cbz	r3, 80a0eda <serialEventRun+0x2e>
 80a0ed6:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a0eda:	4b0c      	ldr	r3, [pc, #48]	; (80a0f0c <serialEventRun+0x60>)
 80a0edc:	b17b      	cbz	r3, 80a0efe <serialEventRun+0x52>
 80a0ede:	f7ff ff5f 	bl	80a0da0 <_Z17_fetch_usbserial1v>
 80a0ee2:	6803      	ldr	r3, [r0, #0]
 80a0ee4:	691b      	ldr	r3, [r3, #16]
 80a0ee6:	4798      	blx	r3
 80a0ee8:	2800      	cmp	r0, #0
 80a0eea:	dc06      	bgt.n	80a0efa <serialEventRun+0x4e>
 80a0eec:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a0eee:	f3af 8000 	nop.w
 80a0ef2:	e7e5      	b.n	80a0ec0 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a0ef4:	f3af 8000 	nop.w
 80a0ef8:	e7eb      	b.n	80a0ed2 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a0efa:	f3af 8000 	nop.w
 80a0efe:	bd08      	pop	{r3, pc}
	...

080a0f10 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a0f10:	b508      	push	{r3, lr}
	serialEventRun();
 80a0f12:	f7ff ffcb 	bl	80a0eac <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a0f16:	f7ff f9a1 	bl	80a025c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a0f1a:	4b01      	ldr	r3, [pc, #4]	; (80a0f20 <_post_loop+0x10>)
 80a0f1c:	6018      	str	r0, [r3, #0]
 80a0f1e:	bd08      	pop	{r3, pc}
 80a0f20:	2000061c 	.word	0x2000061c

080a0f24 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a0f24:	4802      	ldr	r0, [pc, #8]	; (80a0f30 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a0f26:	4a03      	ldr	r2, [pc, #12]	; (80a0f34 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a0f28:	4903      	ldr	r1, [pc, #12]	; (80a0f38 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a0f2a:	1a12      	subs	r2, r2, r0
 80a0f2c:	f000 bd12 	b.w	80a1954 <memcpy>
 80a0f30:	40024000 	.word	0x40024000
 80a0f34:	40024004 	.word	0x40024004
 80a0f38:	080a2610 	.word	0x080a2610

080a0f3c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a0f3c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0f3e:	2300      	movs	r3, #0
 80a0f40:	9300      	str	r3, [sp, #0]
 80a0f42:	461a      	mov	r2, r3
 80a0f44:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a0f48:	f7ff fa5a 	bl	80a0400 <system_ctrl_set_result>
}
 80a0f4c:	b003      	add	sp, #12
 80a0f4e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a0f54 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a0f54:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a0f56:	8843      	ldrh	r3, [r0, #2]
 80a0f58:	2b0a      	cmp	r3, #10
 80a0f5a:	d008      	beq.n	80a0f6e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a0f5c:	2b50      	cmp	r3, #80	; 0x50
 80a0f5e:	d109      	bne.n	80a0f74 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a0f60:	4b09      	ldr	r3, [pc, #36]	; (80a0f88 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a0f62:	681b      	ldr	r3, [r3, #0]
 80a0f64:	b13b      	cbz	r3, 80a0f76 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a0f66:	b003      	add	sp, #12
 80a0f68:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a0f6c:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a0f6e:	f7ff ffe5 	bl	80a0f3c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a0f72:	e006      	b.n	80a0f82 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0f74:	2300      	movs	r3, #0
 80a0f76:	9300      	str	r3, [sp, #0]
 80a0f78:	461a      	mov	r2, r3
 80a0f7a:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a0f7e:	f7ff fa3f 	bl	80a0400 <system_ctrl_set_result>
        break;
    }
}
 80a0f82:	b003      	add	sp, #12
 80a0f84:	f85d fb04 	ldr.w	pc, [sp], #4
 80a0f88:	20000614 	.word	0x20000614

080a0f8c <module_user_init_hook>:

void module_user_init_hook()
{
 80a0f8c:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a0f8e:	4c10      	ldr	r4, [pc, #64]	; (80a0fd0 <module_user_init_hook+0x44>)
 80a0f90:	4d10      	ldr	r5, [pc, #64]	; (80a0fd4 <module_user_init_hook+0x48>)
 80a0f92:	6823      	ldr	r3, [r4, #0]
 80a0f94:	42ab      	cmp	r3, r5
 80a0f96:	4b10      	ldr	r3, [pc, #64]	; (80a0fd8 <module_user_init_hook+0x4c>)
 80a0f98:	bf0c      	ite	eq
 80a0f9a:	2201      	moveq	r2, #1
 80a0f9c:	2200      	movne	r2, #0
 80a0f9e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a0fa0:	d002      	beq.n	80a0fa8 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a0fa2:	f7ff ffbf 	bl	80a0f24 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a0fa6:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a0fa8:	f7ff f950 	bl	80a024c <HAL_RNG_GetRandomNumber>
 80a0fac:	4604      	mov	r4, r0
    srand(seed);
 80a0fae:	f000 fce5 	bl	80a197c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a0fb2:	4b0a      	ldr	r3, [pc, #40]	; (80a0fdc <module_user_init_hook+0x50>)
 80a0fb4:	b113      	cbz	r3, 80a0fbc <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a0fb6:	4620      	mov	r0, r4
 80a0fb8:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a0fbc:	2100      	movs	r1, #0
 80a0fbe:	4807      	ldr	r0, [pc, #28]	; (80a0fdc <module_user_init_hook+0x50>)
 80a0fc0:	f7ff fa40 	bl	80a0444 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a0fc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a0fc8:	2100      	movs	r1, #0
 80a0fca:	4805      	ldr	r0, [pc, #20]	; (80a0fe0 <module_user_init_hook+0x54>)
 80a0fcc:	f7ff ba0e 	b.w	80a03ec <system_ctrl_set_app_request_handler>
 80a0fd0:	40024000 	.word	0x40024000
 80a0fd4:	9a271c1e 	.word	0x9a271c1e
 80a0fd8:	20000618 	.word	0x20000618
 80a0fdc:	00000000 	.word	0x00000000
 80a0fe0:	080a0f55 	.word	0x080a0f55

080a0fe4 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a0fe4:	b513      	push	{r0, r1, r4, lr}
 80a0fe6:	4c08      	ldr	r4, [pc, #32]	; (80a1008 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a0fe8:	2300      	movs	r3, #0
 80a0fea:	461a      	mov	r2, r3
 80a0fec:	4619      	mov	r1, r3
 80a0fee:	9300      	str	r3, [sp, #0]
 80a0ff0:	4620      	mov	r0, r4
 80a0ff2:	f7ff fb17 	bl	80a0624 <_ZN9IPAddressC1Ehhhh>
 80a0ff6:	4620      	mov	r0, r4
 80a0ff8:	4a04      	ldr	r2, [pc, #16]	; (80a100c <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a0ffa:	4905      	ldr	r1, [pc, #20]	; (80a1010 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a0ffc:	b002      	add	sp, #8
 80a0ffe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a1002:	f000 b829 	b.w	80a1058 <__aeabi_atexit>
 80a1006:	bf00      	nop
 80a1008:	20000620 	.word	0x20000620
 80a100c:	200000d0 	.word	0x200000d0
 80a1010:	080a0577 	.word	0x080a0577

080a1014 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a1014:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a1016:	4c0c      	ldr	r4, [pc, #48]	; (80a1048 <_GLOBAL__sub_I_SPI+0x34>)
 80a1018:	4e0c      	ldr	r6, [pc, #48]	; (80a104c <_GLOBAL__sub_I_SPI+0x38>)
 80a101a:	4d0d      	ldr	r5, [pc, #52]	; (80a1050 <_GLOBAL__sub_I_SPI+0x3c>)
 80a101c:	2100      	movs	r1, #0
 80a101e:	4620      	mov	r0, r4
 80a1020:	f7ff fc02 	bl	80a0828 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a1024:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a1026:	4c0b      	ldr	r4, [pc, #44]	; (80a1054 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a1028:	4632      	mov	r2, r6
 80a102a:	4629      	mov	r1, r5
 80a102c:	f000 f814 	bl	80a1058 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a1030:	2101      	movs	r1, #1
 80a1032:	4620      	mov	r0, r4
 80a1034:	f7ff fbf8 	bl	80a0828 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a1038:	4632      	mov	r2, r6
 80a103a:	4629      	mov	r1, r5
 80a103c:	4620      	mov	r0, r4
 80a103e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a1042:	f000 b809 	b.w	80a1058 <__aeabi_atexit>
 80a1046:	bf00      	nop
 80a1048:	20000638 	.word	0x20000638
 80a104c:	200000d0 	.word	0x200000d0
 80a1050:	080a0819 	.word	0x080a0819
 80a1054:	20000648 	.word	0x20000648

080a1058 <__aeabi_atexit>:
 80a1058:	460b      	mov	r3, r1
 80a105a:	4601      	mov	r1, r0
 80a105c:	4618      	mov	r0, r3
 80a105e:	f000 bb73 	b.w	80a1748 <__cxa_atexit>

080a1062 <_ZdlPvj>:
 80a1062:	f7ff b81a 	b.w	80a009a <_ZdlPv>
	...

080a1068 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a1068:	4b24      	ldr	r3, [pc, #144]	; (80a10fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a106a:	681a      	ldr	r2, [r3, #0]
 80a106c:	07d0      	lsls	r0, r2, #31
 80a106e:	bf5c      	itt	pl
 80a1070:	2201      	movpl	r2, #1
 80a1072:	601a      	strpl	r2, [r3, #0]
 80a1074:	4b22      	ldr	r3, [pc, #136]	; (80a1100 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a1076:	681a      	ldr	r2, [r3, #0]
 80a1078:	07d1      	lsls	r1, r2, #31
 80a107a:	bf5c      	itt	pl
 80a107c:	2201      	movpl	r2, #1
 80a107e:	601a      	strpl	r2, [r3, #0]
 80a1080:	4b20      	ldr	r3, [pc, #128]	; (80a1104 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a1082:	681a      	ldr	r2, [r3, #0]
 80a1084:	07d2      	lsls	r2, r2, #31
 80a1086:	bf5c      	itt	pl
 80a1088:	2201      	movpl	r2, #1
 80a108a:	601a      	strpl	r2, [r3, #0]
 80a108c:	4b1e      	ldr	r3, [pc, #120]	; (80a1108 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a108e:	681a      	ldr	r2, [r3, #0]
 80a1090:	07d0      	lsls	r0, r2, #31
 80a1092:	bf5c      	itt	pl
 80a1094:	2201      	movpl	r2, #1
 80a1096:	601a      	strpl	r2, [r3, #0]
 80a1098:	4b1c      	ldr	r3, [pc, #112]	; (80a110c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a109a:	681a      	ldr	r2, [r3, #0]
 80a109c:	07d1      	lsls	r1, r2, #31
 80a109e:	bf5c      	itt	pl
 80a10a0:	2201      	movpl	r2, #1
 80a10a2:	601a      	strpl	r2, [r3, #0]
 80a10a4:	4b1a      	ldr	r3, [pc, #104]	; (80a1110 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a10a6:	681a      	ldr	r2, [r3, #0]
 80a10a8:	07d2      	lsls	r2, r2, #31
 80a10aa:	bf5c      	itt	pl
 80a10ac:	2201      	movpl	r2, #1
 80a10ae:	601a      	strpl	r2, [r3, #0]
 80a10b0:	4b18      	ldr	r3, [pc, #96]	; (80a1114 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a10b2:	681a      	ldr	r2, [r3, #0]
 80a10b4:	07d0      	lsls	r0, r2, #31
 80a10b6:	bf5c      	itt	pl
 80a10b8:	2201      	movpl	r2, #1
 80a10ba:	601a      	strpl	r2, [r3, #0]
 80a10bc:	4b16      	ldr	r3, [pc, #88]	; (80a1118 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a10be:	681a      	ldr	r2, [r3, #0]
 80a10c0:	07d1      	lsls	r1, r2, #31
 80a10c2:	bf5c      	itt	pl
 80a10c4:	2201      	movpl	r2, #1
 80a10c6:	601a      	strpl	r2, [r3, #0]
 80a10c8:	4b14      	ldr	r3, [pc, #80]	; (80a111c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a10ca:	681a      	ldr	r2, [r3, #0]
 80a10cc:	07d2      	lsls	r2, r2, #31
 80a10ce:	bf5c      	itt	pl
 80a10d0:	2201      	movpl	r2, #1
 80a10d2:	601a      	strpl	r2, [r3, #0]
 80a10d4:	4b12      	ldr	r3, [pc, #72]	; (80a1120 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a10d6:	681a      	ldr	r2, [r3, #0]
 80a10d8:	07d0      	lsls	r0, r2, #31
 80a10da:	bf5c      	itt	pl
 80a10dc:	2201      	movpl	r2, #1
 80a10de:	601a      	strpl	r2, [r3, #0]
 80a10e0:	4b10      	ldr	r3, [pc, #64]	; (80a1124 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a10e2:	681a      	ldr	r2, [r3, #0]
 80a10e4:	07d1      	lsls	r1, r2, #31
 80a10e6:	bf5c      	itt	pl
 80a10e8:	2201      	movpl	r2, #1
 80a10ea:	601a      	strpl	r2, [r3, #0]
 80a10ec:	4b0e      	ldr	r3, [pc, #56]	; (80a1128 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a10ee:	681a      	ldr	r2, [r3, #0]
 80a10f0:	07d2      	lsls	r2, r2, #31
 80a10f2:	bf5c      	itt	pl
 80a10f4:	2201      	movpl	r2, #1
 80a10f6:	601a      	strpl	r2, [r3, #0]
 80a10f8:	4770      	bx	lr
 80a10fa:	bf00      	nop
 80a10fc:	20000684 	.word	0x20000684
 80a1100:	20000680 	.word	0x20000680
 80a1104:	2000067c 	.word	0x2000067c
 80a1108:	20000678 	.word	0x20000678
 80a110c:	20000674 	.word	0x20000674
 80a1110:	20000670 	.word	0x20000670
 80a1114:	2000066c 	.word	0x2000066c
 80a1118:	20000668 	.word	0x20000668
 80a111c:	20000664 	.word	0x20000664
 80a1120:	20000660 	.word	0x20000660
 80a1124:	2000065c 	.word	0x2000065c
 80a1128:	20000658 	.word	0x20000658

080a112c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a112c:	4b18      	ldr	r3, [pc, #96]	; (80a1190 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a112e:	681a      	ldr	r2, [r3, #0]
 80a1130:	07d1      	lsls	r1, r2, #31
 80a1132:	bf5c      	itt	pl
 80a1134:	2201      	movpl	r2, #1
 80a1136:	601a      	strpl	r2, [r3, #0]
 80a1138:	4b16      	ldr	r3, [pc, #88]	; (80a1194 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a113a:	681a      	ldr	r2, [r3, #0]
 80a113c:	07d2      	lsls	r2, r2, #31
 80a113e:	bf5c      	itt	pl
 80a1140:	2201      	movpl	r2, #1
 80a1142:	601a      	strpl	r2, [r3, #0]
 80a1144:	4b14      	ldr	r3, [pc, #80]	; (80a1198 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a1146:	681a      	ldr	r2, [r3, #0]
 80a1148:	07d0      	lsls	r0, r2, #31
 80a114a:	bf5c      	itt	pl
 80a114c:	2201      	movpl	r2, #1
 80a114e:	601a      	strpl	r2, [r3, #0]
 80a1150:	4b12      	ldr	r3, [pc, #72]	; (80a119c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a1152:	681a      	ldr	r2, [r3, #0]
 80a1154:	07d1      	lsls	r1, r2, #31
 80a1156:	bf5c      	itt	pl
 80a1158:	2201      	movpl	r2, #1
 80a115a:	601a      	strpl	r2, [r3, #0]
 80a115c:	4b10      	ldr	r3, [pc, #64]	; (80a11a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a115e:	681a      	ldr	r2, [r3, #0]
 80a1160:	07d2      	lsls	r2, r2, #31
 80a1162:	bf5c      	itt	pl
 80a1164:	2201      	movpl	r2, #1
 80a1166:	601a      	strpl	r2, [r3, #0]
 80a1168:	4b0e      	ldr	r3, [pc, #56]	; (80a11a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a116a:	681a      	ldr	r2, [r3, #0]
 80a116c:	07d0      	lsls	r0, r2, #31
 80a116e:	bf5c      	itt	pl
 80a1170:	2201      	movpl	r2, #1
 80a1172:	601a      	strpl	r2, [r3, #0]
 80a1174:	4b0c      	ldr	r3, [pc, #48]	; (80a11a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a1176:	681a      	ldr	r2, [r3, #0]
 80a1178:	07d1      	lsls	r1, r2, #31
 80a117a:	bf5c      	itt	pl
 80a117c:	2201      	movpl	r2, #1
 80a117e:	601a      	strpl	r2, [r3, #0]
 80a1180:	4b0a      	ldr	r3, [pc, #40]	; (80a11ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a1182:	681a      	ldr	r2, [r3, #0]
 80a1184:	07d2      	lsls	r2, r2, #31
 80a1186:	bf5c      	itt	pl
 80a1188:	2201      	movpl	r2, #1
 80a118a:	601a      	strpl	r2, [r3, #0]
 80a118c:	4770      	bx	lr
 80a118e:	bf00      	nop
 80a1190:	200006a4 	.word	0x200006a4
 80a1194:	200006a0 	.word	0x200006a0
 80a1198:	2000069c 	.word	0x2000069c
 80a119c:	20000698 	.word	0x20000698
 80a11a0:	20000694 	.word	0x20000694
 80a11a4:	20000690 	.word	0x20000690
 80a11a8:	2000068c 	.word	0x2000068c
 80a11ac:	20000688 	.word	0x20000688

080a11b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a11b0:	4b18      	ldr	r3, [pc, #96]	; (80a1214 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a11b2:	681a      	ldr	r2, [r3, #0]
 80a11b4:	07d1      	lsls	r1, r2, #31
 80a11b6:	bf5c      	itt	pl
 80a11b8:	2201      	movpl	r2, #1
 80a11ba:	601a      	strpl	r2, [r3, #0]
 80a11bc:	4b16      	ldr	r3, [pc, #88]	; (80a1218 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a11be:	681a      	ldr	r2, [r3, #0]
 80a11c0:	07d2      	lsls	r2, r2, #31
 80a11c2:	bf5c      	itt	pl
 80a11c4:	2201      	movpl	r2, #1
 80a11c6:	601a      	strpl	r2, [r3, #0]
 80a11c8:	4b14      	ldr	r3, [pc, #80]	; (80a121c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a11ca:	681a      	ldr	r2, [r3, #0]
 80a11cc:	07d0      	lsls	r0, r2, #31
 80a11ce:	bf5c      	itt	pl
 80a11d0:	2201      	movpl	r2, #1
 80a11d2:	601a      	strpl	r2, [r3, #0]
 80a11d4:	4b12      	ldr	r3, [pc, #72]	; (80a1220 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a11d6:	681a      	ldr	r2, [r3, #0]
 80a11d8:	07d1      	lsls	r1, r2, #31
 80a11da:	bf5c      	itt	pl
 80a11dc:	2201      	movpl	r2, #1
 80a11de:	601a      	strpl	r2, [r3, #0]
 80a11e0:	4b10      	ldr	r3, [pc, #64]	; (80a1224 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a11e2:	681a      	ldr	r2, [r3, #0]
 80a11e4:	07d2      	lsls	r2, r2, #31
 80a11e6:	bf5c      	itt	pl
 80a11e8:	2201      	movpl	r2, #1
 80a11ea:	601a      	strpl	r2, [r3, #0]
 80a11ec:	4b0e      	ldr	r3, [pc, #56]	; (80a1228 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a11ee:	681a      	ldr	r2, [r3, #0]
 80a11f0:	07d0      	lsls	r0, r2, #31
 80a11f2:	bf5c      	itt	pl
 80a11f4:	2201      	movpl	r2, #1
 80a11f6:	601a      	strpl	r2, [r3, #0]
 80a11f8:	4b0c      	ldr	r3, [pc, #48]	; (80a122c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a11fa:	681a      	ldr	r2, [r3, #0]
 80a11fc:	07d1      	lsls	r1, r2, #31
 80a11fe:	bf5c      	itt	pl
 80a1200:	2201      	movpl	r2, #1
 80a1202:	601a      	strpl	r2, [r3, #0]
 80a1204:	4b0a      	ldr	r3, [pc, #40]	; (80a1230 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a1206:	681a      	ldr	r2, [r3, #0]
 80a1208:	07d2      	lsls	r2, r2, #31
 80a120a:	bf5c      	itt	pl
 80a120c:	2201      	movpl	r2, #1
 80a120e:	601a      	strpl	r2, [r3, #0]
 80a1210:	4770      	bx	lr
 80a1212:	bf00      	nop
 80a1214:	200006c4 	.word	0x200006c4
 80a1218:	200006c0 	.word	0x200006c0
 80a121c:	200006bc 	.word	0x200006bc
 80a1220:	200006b8 	.word	0x200006b8
 80a1224:	200006b4 	.word	0x200006b4
 80a1228:	200006b0 	.word	0x200006b0
 80a122c:	200006ac 	.word	0x200006ac
 80a1230:	200006a8 	.word	0x200006a8

080a1234 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a1234:	4b24      	ldr	r3, [pc, #144]	; (80a12c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a1236:	681a      	ldr	r2, [r3, #0]
 80a1238:	07d0      	lsls	r0, r2, #31
 80a123a:	bf5c      	itt	pl
 80a123c:	2201      	movpl	r2, #1
 80a123e:	601a      	strpl	r2, [r3, #0]
 80a1240:	4b22      	ldr	r3, [pc, #136]	; (80a12cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a1242:	681a      	ldr	r2, [r3, #0]
 80a1244:	07d1      	lsls	r1, r2, #31
 80a1246:	bf5c      	itt	pl
 80a1248:	2201      	movpl	r2, #1
 80a124a:	601a      	strpl	r2, [r3, #0]
 80a124c:	4b20      	ldr	r3, [pc, #128]	; (80a12d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a124e:	681a      	ldr	r2, [r3, #0]
 80a1250:	07d2      	lsls	r2, r2, #31
 80a1252:	bf5c      	itt	pl
 80a1254:	2201      	movpl	r2, #1
 80a1256:	601a      	strpl	r2, [r3, #0]
 80a1258:	4b1e      	ldr	r3, [pc, #120]	; (80a12d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a125a:	681a      	ldr	r2, [r3, #0]
 80a125c:	07d0      	lsls	r0, r2, #31
 80a125e:	bf5c      	itt	pl
 80a1260:	2201      	movpl	r2, #1
 80a1262:	601a      	strpl	r2, [r3, #0]
 80a1264:	4b1c      	ldr	r3, [pc, #112]	; (80a12d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a1266:	681a      	ldr	r2, [r3, #0]
 80a1268:	07d1      	lsls	r1, r2, #31
 80a126a:	bf5c      	itt	pl
 80a126c:	2201      	movpl	r2, #1
 80a126e:	601a      	strpl	r2, [r3, #0]
 80a1270:	4b1a      	ldr	r3, [pc, #104]	; (80a12dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a1272:	681a      	ldr	r2, [r3, #0]
 80a1274:	07d2      	lsls	r2, r2, #31
 80a1276:	bf5c      	itt	pl
 80a1278:	2201      	movpl	r2, #1
 80a127a:	601a      	strpl	r2, [r3, #0]
 80a127c:	4b18      	ldr	r3, [pc, #96]	; (80a12e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a127e:	681a      	ldr	r2, [r3, #0]
 80a1280:	07d0      	lsls	r0, r2, #31
 80a1282:	bf5c      	itt	pl
 80a1284:	2201      	movpl	r2, #1
 80a1286:	601a      	strpl	r2, [r3, #0]
 80a1288:	4b16      	ldr	r3, [pc, #88]	; (80a12e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a128a:	681a      	ldr	r2, [r3, #0]
 80a128c:	07d1      	lsls	r1, r2, #31
 80a128e:	bf5c      	itt	pl
 80a1290:	2201      	movpl	r2, #1
 80a1292:	601a      	strpl	r2, [r3, #0]
 80a1294:	4b14      	ldr	r3, [pc, #80]	; (80a12e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a1296:	681a      	ldr	r2, [r3, #0]
 80a1298:	07d2      	lsls	r2, r2, #31
 80a129a:	bf5c      	itt	pl
 80a129c:	2201      	movpl	r2, #1
 80a129e:	601a      	strpl	r2, [r3, #0]
 80a12a0:	4b12      	ldr	r3, [pc, #72]	; (80a12ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a12a2:	681a      	ldr	r2, [r3, #0]
 80a12a4:	07d0      	lsls	r0, r2, #31
 80a12a6:	bf5c      	itt	pl
 80a12a8:	2201      	movpl	r2, #1
 80a12aa:	601a      	strpl	r2, [r3, #0]
 80a12ac:	4b10      	ldr	r3, [pc, #64]	; (80a12f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a12ae:	681a      	ldr	r2, [r3, #0]
 80a12b0:	07d1      	lsls	r1, r2, #31
 80a12b2:	bf5c      	itt	pl
 80a12b4:	2201      	movpl	r2, #1
 80a12b6:	601a      	strpl	r2, [r3, #0]
 80a12b8:	4b0e      	ldr	r3, [pc, #56]	; (80a12f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a12ba:	681a      	ldr	r2, [r3, #0]
 80a12bc:	07d2      	lsls	r2, r2, #31
 80a12be:	bf5c      	itt	pl
 80a12c0:	2201      	movpl	r2, #1
 80a12c2:	601a      	strpl	r2, [r3, #0]
 80a12c4:	4770      	bx	lr
 80a12c6:	bf00      	nop
 80a12c8:	200006f4 	.word	0x200006f4
 80a12cc:	200006f0 	.word	0x200006f0
 80a12d0:	200006ec 	.word	0x200006ec
 80a12d4:	200006e8 	.word	0x200006e8
 80a12d8:	200006e4 	.word	0x200006e4
 80a12dc:	200006e0 	.word	0x200006e0
 80a12e0:	200006dc 	.word	0x200006dc
 80a12e4:	200006d8 	.word	0x200006d8
 80a12e8:	200006d4 	.word	0x200006d4
 80a12ec:	200006d0 	.word	0x200006d0
 80a12f0:	200006cc 	.word	0x200006cc
 80a12f4:	200006c8 	.word	0x200006c8

080a12f8 <__aeabi_fmul>:
 80a12f8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a12fc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a1300:	bf1e      	ittt	ne
 80a1302:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a1306:	ea92 0f0c 	teqne	r2, ip
 80a130a:	ea93 0f0c 	teqne	r3, ip
 80a130e:	d06f      	beq.n	80a13f0 <__aeabi_fmul+0xf8>
 80a1310:	441a      	add	r2, r3
 80a1312:	ea80 0c01 	eor.w	ip, r0, r1
 80a1316:	0240      	lsls	r0, r0, #9
 80a1318:	bf18      	it	ne
 80a131a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a131e:	d01e      	beq.n	80a135e <__aeabi_fmul+0x66>
 80a1320:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a1324:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a1328:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a132c:	fba0 3101 	umull	r3, r1, r0, r1
 80a1330:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a1334:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a1338:	bf3e      	ittt	cc
 80a133a:	0049      	lslcc	r1, r1, #1
 80a133c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a1340:	005b      	lslcc	r3, r3, #1
 80a1342:	ea40 0001 	orr.w	r0, r0, r1
 80a1346:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a134a:	2afd      	cmp	r2, #253	; 0xfd
 80a134c:	d81d      	bhi.n	80a138a <__aeabi_fmul+0x92>
 80a134e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a1352:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a1356:	bf08      	it	eq
 80a1358:	f020 0001 	biceq.w	r0, r0, #1
 80a135c:	4770      	bx	lr
 80a135e:	f090 0f00 	teq	r0, #0
 80a1362:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a1366:	bf08      	it	eq
 80a1368:	0249      	lsleq	r1, r1, #9
 80a136a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a136e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a1372:	3a7f      	subs	r2, #127	; 0x7f
 80a1374:	bfc2      	ittt	gt
 80a1376:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a137a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a137e:	4770      	bxgt	lr
 80a1380:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a1384:	f04f 0300 	mov.w	r3, #0
 80a1388:	3a01      	subs	r2, #1
 80a138a:	dc5d      	bgt.n	80a1448 <__aeabi_fmul+0x150>
 80a138c:	f112 0f19 	cmn.w	r2, #25
 80a1390:	bfdc      	itt	le
 80a1392:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a1396:	4770      	bxle	lr
 80a1398:	f1c2 0200 	rsb	r2, r2, #0
 80a139c:	0041      	lsls	r1, r0, #1
 80a139e:	fa21 f102 	lsr.w	r1, r1, r2
 80a13a2:	f1c2 0220 	rsb	r2, r2, #32
 80a13a6:	fa00 fc02 	lsl.w	ip, r0, r2
 80a13aa:	ea5f 0031 	movs.w	r0, r1, rrx
 80a13ae:	f140 0000 	adc.w	r0, r0, #0
 80a13b2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a13b6:	bf08      	it	eq
 80a13b8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a13bc:	4770      	bx	lr
 80a13be:	f092 0f00 	teq	r2, #0
 80a13c2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a13c6:	bf02      	ittt	eq
 80a13c8:	0040      	lsleq	r0, r0, #1
 80a13ca:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a13ce:	3a01      	subeq	r2, #1
 80a13d0:	d0f9      	beq.n	80a13c6 <__aeabi_fmul+0xce>
 80a13d2:	ea40 000c 	orr.w	r0, r0, ip
 80a13d6:	f093 0f00 	teq	r3, #0
 80a13da:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a13de:	bf02      	ittt	eq
 80a13e0:	0049      	lsleq	r1, r1, #1
 80a13e2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a13e6:	3b01      	subeq	r3, #1
 80a13e8:	d0f9      	beq.n	80a13de <__aeabi_fmul+0xe6>
 80a13ea:	ea41 010c 	orr.w	r1, r1, ip
 80a13ee:	e78f      	b.n	80a1310 <__aeabi_fmul+0x18>
 80a13f0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a13f4:	ea92 0f0c 	teq	r2, ip
 80a13f8:	bf18      	it	ne
 80a13fa:	ea93 0f0c 	teqne	r3, ip
 80a13fe:	d00a      	beq.n	80a1416 <__aeabi_fmul+0x11e>
 80a1400:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a1404:	bf18      	it	ne
 80a1406:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a140a:	d1d8      	bne.n	80a13be <__aeabi_fmul+0xc6>
 80a140c:	ea80 0001 	eor.w	r0, r0, r1
 80a1410:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a1414:	4770      	bx	lr
 80a1416:	f090 0f00 	teq	r0, #0
 80a141a:	bf17      	itett	ne
 80a141c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a1420:	4608      	moveq	r0, r1
 80a1422:	f091 0f00 	teqne	r1, #0
 80a1426:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a142a:	d014      	beq.n	80a1456 <__aeabi_fmul+0x15e>
 80a142c:	ea92 0f0c 	teq	r2, ip
 80a1430:	d101      	bne.n	80a1436 <__aeabi_fmul+0x13e>
 80a1432:	0242      	lsls	r2, r0, #9
 80a1434:	d10f      	bne.n	80a1456 <__aeabi_fmul+0x15e>
 80a1436:	ea93 0f0c 	teq	r3, ip
 80a143a:	d103      	bne.n	80a1444 <__aeabi_fmul+0x14c>
 80a143c:	024b      	lsls	r3, r1, #9
 80a143e:	bf18      	it	ne
 80a1440:	4608      	movne	r0, r1
 80a1442:	d108      	bne.n	80a1456 <__aeabi_fmul+0x15e>
 80a1444:	ea80 0001 	eor.w	r0, r0, r1
 80a1448:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a144c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a1450:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a1454:	4770      	bx	lr
 80a1456:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a145a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a145e:	4770      	bx	lr

080a1460 <__aeabi_fdiv>:
 80a1460:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a1464:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a1468:	bf1e      	ittt	ne
 80a146a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a146e:	ea92 0f0c 	teqne	r2, ip
 80a1472:	ea93 0f0c 	teqne	r3, ip
 80a1476:	d069      	beq.n	80a154c <__aeabi_fdiv+0xec>
 80a1478:	eba2 0203 	sub.w	r2, r2, r3
 80a147c:	ea80 0c01 	eor.w	ip, r0, r1
 80a1480:	0249      	lsls	r1, r1, #9
 80a1482:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a1486:	d037      	beq.n	80a14f8 <__aeabi_fdiv+0x98>
 80a1488:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a148c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a1490:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a1494:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a1498:	428b      	cmp	r3, r1
 80a149a:	bf38      	it	cc
 80a149c:	005b      	lslcc	r3, r3, #1
 80a149e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a14a2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a14a6:	428b      	cmp	r3, r1
 80a14a8:	bf24      	itt	cs
 80a14aa:	1a5b      	subcs	r3, r3, r1
 80a14ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80a14b0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a14b4:	bf24      	itt	cs
 80a14b6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a14ba:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a14be:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a14c2:	bf24      	itt	cs
 80a14c4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a14c8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a14cc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a14d0:	bf24      	itt	cs
 80a14d2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a14d6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a14da:	011b      	lsls	r3, r3, #4
 80a14dc:	bf18      	it	ne
 80a14de:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a14e2:	d1e0      	bne.n	80a14a6 <__aeabi_fdiv+0x46>
 80a14e4:	2afd      	cmp	r2, #253	; 0xfd
 80a14e6:	f63f af50 	bhi.w	80a138a <__aeabi_fmul+0x92>
 80a14ea:	428b      	cmp	r3, r1
 80a14ec:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a14f0:	bf08      	it	eq
 80a14f2:	f020 0001 	biceq.w	r0, r0, #1
 80a14f6:	4770      	bx	lr
 80a14f8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a14fc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a1500:	327f      	adds	r2, #127	; 0x7f
 80a1502:	bfc2      	ittt	gt
 80a1504:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a1508:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a150c:	4770      	bxgt	lr
 80a150e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a1512:	f04f 0300 	mov.w	r3, #0
 80a1516:	3a01      	subs	r2, #1
 80a1518:	e737      	b.n	80a138a <__aeabi_fmul+0x92>
 80a151a:	f092 0f00 	teq	r2, #0
 80a151e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a1522:	bf02      	ittt	eq
 80a1524:	0040      	lsleq	r0, r0, #1
 80a1526:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a152a:	3a01      	subeq	r2, #1
 80a152c:	d0f9      	beq.n	80a1522 <__aeabi_fdiv+0xc2>
 80a152e:	ea40 000c 	orr.w	r0, r0, ip
 80a1532:	f093 0f00 	teq	r3, #0
 80a1536:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a153a:	bf02      	ittt	eq
 80a153c:	0049      	lsleq	r1, r1, #1
 80a153e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a1542:	3b01      	subeq	r3, #1
 80a1544:	d0f9      	beq.n	80a153a <__aeabi_fdiv+0xda>
 80a1546:	ea41 010c 	orr.w	r1, r1, ip
 80a154a:	e795      	b.n	80a1478 <__aeabi_fdiv+0x18>
 80a154c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a1550:	ea92 0f0c 	teq	r2, ip
 80a1554:	d108      	bne.n	80a1568 <__aeabi_fdiv+0x108>
 80a1556:	0242      	lsls	r2, r0, #9
 80a1558:	f47f af7d 	bne.w	80a1456 <__aeabi_fmul+0x15e>
 80a155c:	ea93 0f0c 	teq	r3, ip
 80a1560:	f47f af70 	bne.w	80a1444 <__aeabi_fmul+0x14c>
 80a1564:	4608      	mov	r0, r1
 80a1566:	e776      	b.n	80a1456 <__aeabi_fmul+0x15e>
 80a1568:	ea93 0f0c 	teq	r3, ip
 80a156c:	d104      	bne.n	80a1578 <__aeabi_fdiv+0x118>
 80a156e:	024b      	lsls	r3, r1, #9
 80a1570:	f43f af4c 	beq.w	80a140c <__aeabi_fmul+0x114>
 80a1574:	4608      	mov	r0, r1
 80a1576:	e76e      	b.n	80a1456 <__aeabi_fmul+0x15e>
 80a1578:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a157c:	bf18      	it	ne
 80a157e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a1582:	d1ca      	bne.n	80a151a <__aeabi_fdiv+0xba>
 80a1584:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a1588:	f47f af5c 	bne.w	80a1444 <__aeabi_fmul+0x14c>
 80a158c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a1590:	f47f af3c 	bne.w	80a140c <__aeabi_fmul+0x114>
 80a1594:	e75f      	b.n	80a1456 <__aeabi_fmul+0x15e>
 80a1596:	bf00      	nop

080a1598 <__gesf2>:
 80a1598:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80a159c:	e006      	b.n	80a15ac <__cmpsf2+0x4>
 80a159e:	bf00      	nop

080a15a0 <__lesf2>:
 80a15a0:	f04f 0c01 	mov.w	ip, #1
 80a15a4:	e002      	b.n	80a15ac <__cmpsf2+0x4>
 80a15a6:	bf00      	nop

080a15a8 <__cmpsf2>:
 80a15a8:	f04f 0c01 	mov.w	ip, #1
 80a15ac:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a15b0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a15b4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a15b8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a15bc:	bf18      	it	ne
 80a15be:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a15c2:	d011      	beq.n	80a15e8 <__cmpsf2+0x40>
 80a15c4:	b001      	add	sp, #4
 80a15c6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80a15ca:	bf18      	it	ne
 80a15cc:	ea90 0f01 	teqne	r0, r1
 80a15d0:	bf58      	it	pl
 80a15d2:	ebb2 0003 	subspl.w	r0, r2, r3
 80a15d6:	bf88      	it	hi
 80a15d8:	17c8      	asrhi	r0, r1, #31
 80a15da:	bf38      	it	cc
 80a15dc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80a15e0:	bf18      	it	ne
 80a15e2:	f040 0001 	orrne.w	r0, r0, #1
 80a15e6:	4770      	bx	lr
 80a15e8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a15ec:	d102      	bne.n	80a15f4 <__cmpsf2+0x4c>
 80a15ee:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a15f2:	d105      	bne.n	80a1600 <__cmpsf2+0x58>
 80a15f4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a15f8:	d1e4      	bne.n	80a15c4 <__cmpsf2+0x1c>
 80a15fa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a15fe:	d0e1      	beq.n	80a15c4 <__cmpsf2+0x1c>
 80a1600:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a1604:	4770      	bx	lr
 80a1606:	bf00      	nop

080a1608 <__aeabi_cfrcmple>:
 80a1608:	4684      	mov	ip, r0
 80a160a:	4608      	mov	r0, r1
 80a160c:	4661      	mov	r1, ip
 80a160e:	e7ff      	b.n	80a1610 <__aeabi_cfcmpeq>

080a1610 <__aeabi_cfcmpeq>:
 80a1610:	b50f      	push	{r0, r1, r2, r3, lr}
 80a1612:	f7ff ffc9 	bl	80a15a8 <__cmpsf2>
 80a1616:	2800      	cmp	r0, #0
 80a1618:	bf48      	it	mi
 80a161a:	f110 0f00 	cmnmi.w	r0, #0
 80a161e:	bd0f      	pop	{r0, r1, r2, r3, pc}

080a1620 <__aeabi_fcmpeq>:
 80a1620:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a1624:	f7ff fff4 	bl	80a1610 <__aeabi_cfcmpeq>
 80a1628:	bf0c      	ite	eq
 80a162a:	2001      	moveq	r0, #1
 80a162c:	2000      	movne	r0, #0
 80a162e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a1632:	bf00      	nop

080a1634 <__aeabi_fcmplt>:
 80a1634:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a1638:	f7ff ffea 	bl	80a1610 <__aeabi_cfcmpeq>
 80a163c:	bf34      	ite	cc
 80a163e:	2001      	movcc	r0, #1
 80a1640:	2000      	movcs	r0, #0
 80a1642:	f85d fb08 	ldr.w	pc, [sp], #8
 80a1646:	bf00      	nop

080a1648 <__aeabi_fcmple>:
 80a1648:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a164c:	f7ff ffe0 	bl	80a1610 <__aeabi_cfcmpeq>
 80a1650:	bf94      	ite	ls
 80a1652:	2001      	movls	r0, #1
 80a1654:	2000      	movhi	r0, #0
 80a1656:	f85d fb08 	ldr.w	pc, [sp], #8
 80a165a:	bf00      	nop

080a165c <__aeabi_fcmpge>:
 80a165c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a1660:	f7ff ffd2 	bl	80a1608 <__aeabi_cfrcmple>
 80a1664:	bf94      	ite	ls
 80a1666:	2001      	movls	r0, #1
 80a1668:	2000      	movhi	r0, #0
 80a166a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a166e:	bf00      	nop

080a1670 <__aeabi_fcmpgt>:
 80a1670:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a1674:	f7ff ffc8 	bl	80a1608 <__aeabi_cfrcmple>
 80a1678:	bf34      	ite	cc
 80a167a:	2001      	movcc	r0, #1
 80a167c:	2000      	movcs	r0, #0
 80a167e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a1682:	bf00      	nop

080a1684 <__aeabi_f2iz>:
 80a1684:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a1688:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80a168c:	d30f      	bcc.n	80a16ae <__aeabi_f2iz+0x2a>
 80a168e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80a1692:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80a1696:	d90d      	bls.n	80a16b4 <__aeabi_f2iz+0x30>
 80a1698:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80a169c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a16a0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a16a4:	fa23 f002 	lsr.w	r0, r3, r2
 80a16a8:	bf18      	it	ne
 80a16aa:	4240      	negne	r0, r0
 80a16ac:	4770      	bx	lr
 80a16ae:	f04f 0000 	mov.w	r0, #0
 80a16b2:	4770      	bx	lr
 80a16b4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80a16b8:	d101      	bne.n	80a16be <__aeabi_f2iz+0x3a>
 80a16ba:	0242      	lsls	r2, r0, #9
 80a16bc:	d105      	bne.n	80a16ca <__aeabi_f2iz+0x46>
 80a16be:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80a16c2:	bf08      	it	eq
 80a16c4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a16c8:	4770      	bx	lr
 80a16ca:	f04f 0000 	mov.w	r0, #0
 80a16ce:	4770      	bx	lr

080a16d0 <asctime>:
 80a16d0:	4b09      	ldr	r3, [pc, #36]	; (80a16f8 <asctime+0x28>)
 80a16d2:	b570      	push	{r4, r5, r6, lr}
 80a16d4:	681c      	ldr	r4, [r3, #0]
 80a16d6:	4606      	mov	r6, r0
 80a16d8:	6c25      	ldr	r5, [r4, #64]	; 0x40
 80a16da:	b93d      	cbnz	r5, 80a16ec <asctime+0x1c>
 80a16dc:	201a      	movs	r0, #26
 80a16de:	f7fe ff09 	bl	80a04f4 <malloc>
 80a16e2:	221a      	movs	r2, #26
 80a16e4:	6420      	str	r0, [r4, #64]	; 0x40
 80a16e6:	4629      	mov	r1, r5
 80a16e8:	f000 f93f 	bl	80a196a <memset>
 80a16ec:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80a16ee:	4630      	mov	r0, r6
 80a16f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a16f4:	f000 b802 	b.w	80a16fc <asctime_r>
 80a16f8:	20000080 	.word	0x20000080

080a16fc <asctime_r>:
 80a16fc:	b510      	push	{r4, lr}
 80a16fe:	460c      	mov	r4, r1
 80a1700:	6941      	ldr	r1, [r0, #20]
 80a1702:	b086      	sub	sp, #24
 80a1704:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 80a1708:	6903      	ldr	r3, [r0, #16]
 80a170a:	6982      	ldr	r2, [r0, #24]
 80a170c:	9104      	str	r1, [sp, #16]
 80a170e:	6801      	ldr	r1, [r0, #0]
 80a1710:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80a1714:	9103      	str	r1, [sp, #12]
 80a1716:	6841      	ldr	r1, [r0, #4]
 80a1718:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80a171c:	9102      	str	r1, [sp, #8]
 80a171e:	6881      	ldr	r1, [r0, #8]
 80a1720:	9101      	str	r1, [sp, #4]
 80a1722:	68c1      	ldr	r1, [r0, #12]
 80a1724:	4620      	mov	r0, r4
 80a1726:	9100      	str	r1, [sp, #0]
 80a1728:	4904      	ldr	r1, [pc, #16]	; (80a173c <asctime_r+0x40>)
 80a172a:	440b      	add	r3, r1
 80a172c:	4904      	ldr	r1, [pc, #16]	; (80a1740 <asctime_r+0x44>)
 80a172e:	440a      	add	r2, r1
 80a1730:	4904      	ldr	r1, [pc, #16]	; (80a1744 <asctime_r+0x48>)
 80a1732:	f7fe fef7 	bl	80a0524 <siprintf>
 80a1736:	4620      	mov	r0, r4
 80a1738:	b006      	add	sp, #24
 80a173a:	bd10      	pop	{r4, pc}
 80a173c:	080a2395 	.word	0x080a2395
 80a1740:	080a2380 	.word	0x080a2380
 80a1744:	080a23b9 	.word	0x080a23b9

080a1748 <__cxa_atexit>:
 80a1748:	b510      	push	{r4, lr}
 80a174a:	4c05      	ldr	r4, [pc, #20]	; (80a1760 <__cxa_atexit+0x18>)
 80a174c:	4613      	mov	r3, r2
 80a174e:	b12c      	cbz	r4, 80a175c <__cxa_atexit+0x14>
 80a1750:	460a      	mov	r2, r1
 80a1752:	4601      	mov	r1, r0
 80a1754:	2002      	movs	r0, #2
 80a1756:	f3af 8000 	nop.w
 80a175a:	bd10      	pop	{r4, pc}
 80a175c:	4620      	mov	r0, r4
 80a175e:	bd10      	pop	{r4, pc}
 80a1760:	00000000 	.word	0x00000000

080a1764 <localtime>:
 80a1764:	b538      	push	{r3, r4, r5, lr}
 80a1766:	4b07      	ldr	r3, [pc, #28]	; (80a1784 <localtime+0x20>)
 80a1768:	4605      	mov	r5, r0
 80a176a:	681c      	ldr	r4, [r3, #0]
 80a176c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80a176e:	b91b      	cbnz	r3, 80a1778 <localtime+0x14>
 80a1770:	2024      	movs	r0, #36	; 0x24
 80a1772:	f7fe febf 	bl	80a04f4 <malloc>
 80a1776:	63e0      	str	r0, [r4, #60]	; 0x3c
 80a1778:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80a177a:	4628      	mov	r0, r5
 80a177c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a1780:	f000 b802 	b.w	80a1788 <localtime_r>
 80a1784:	20000080 	.word	0x20000080

080a1788 <localtime_r>:
 80a1788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a178c:	460c      	mov	r4, r1
 80a178e:	4680      	mov	r8, r0
 80a1790:	f000 fc48 	bl	80a2024 <__gettzinfo>
 80a1794:	4621      	mov	r1, r4
 80a1796:	4607      	mov	r7, r0
 80a1798:	4640      	mov	r0, r8
 80a179a:	f000 fc47 	bl	80a202c <gmtime_r>
 80a179e:	6946      	ldr	r6, [r0, #20]
 80a17a0:	4604      	mov	r4, r0
 80a17a2:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 80a17a6:	07b3      	lsls	r3, r6, #30
 80a17a8:	d105      	bne.n	80a17b6 <localtime_r+0x2e>
 80a17aa:	2264      	movs	r2, #100	; 0x64
 80a17ac:	fb96 f3f2 	sdiv	r3, r6, r2
 80a17b0:	fb02 6313 	mls	r3, r2, r3, r6
 80a17b4:	b94b      	cbnz	r3, 80a17ca <localtime_r+0x42>
 80a17b6:	f44f 75c8 	mov.w	r5, #400	; 0x190
 80a17ba:	fb96 f3f5 	sdiv	r3, r6, r5
 80a17be:	fb05 6513 	mls	r5, r5, r3, r6
 80a17c2:	fab5 f385 	clz	r3, r5
 80a17c6:	095b      	lsrs	r3, r3, #5
 80a17c8:	e000      	b.n	80a17cc <localtime_r+0x44>
 80a17ca:	2301      	movs	r3, #1
 80a17cc:	4a5f      	ldr	r2, [pc, #380]	; (80a194c <localtime_r+0x1c4>)
 80a17ce:	2530      	movs	r5, #48	; 0x30
 80a17d0:	fb05 2503 	mla	r5, r5, r3, r2
 80a17d4:	f000 fa5a 	bl	80a1c8c <__tz_lock>
 80a17d8:	f000 fa5a 	bl	80a1c90 <_tzset_unlocked>
 80a17dc:	4b5c      	ldr	r3, [pc, #368]	; (80a1950 <localtime_r+0x1c8>)
 80a17de:	681b      	ldr	r3, [r3, #0]
 80a17e0:	b1f3      	cbz	r3, 80a1820 <localtime_r+0x98>
 80a17e2:	687b      	ldr	r3, [r7, #4]
 80a17e4:	429e      	cmp	r6, r3
 80a17e6:	d105      	bne.n	80a17f4 <localtime_r+0x6c>
 80a17e8:	6839      	ldr	r1, [r7, #0]
 80a17ea:	f8d8 3000 	ldr.w	r3, [r8]
 80a17ee:	69fa      	ldr	r2, [r7, #28]
 80a17f0:	b941      	cbnz	r1, 80a1804 <localtime_r+0x7c>
 80a17f2:	e00a      	b.n	80a180a <localtime_r+0x82>
 80a17f4:	4630      	mov	r0, r6
 80a17f6:	f000 f9a1 	bl	80a1b3c <__tzcalc_limits>
 80a17fa:	2800      	cmp	r0, #0
 80a17fc:	d1f4      	bne.n	80a17e8 <localtime_r+0x60>
 80a17fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80a1802:	e00d      	b.n	80a1820 <localtime_r+0x98>
 80a1804:	4293      	cmp	r3, r2
 80a1806:	db08      	blt.n	80a181a <localtime_r+0x92>
 80a1808:	e001      	b.n	80a180e <localtime_r+0x86>
 80a180a:	4293      	cmp	r3, r2
 80a180c:	da07      	bge.n	80a181e <localtime_r+0x96>
 80a180e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80a1810:	4293      	cmp	r3, r2
 80a1812:	bfac      	ite	ge
 80a1814:	2300      	movge	r3, #0
 80a1816:	2301      	movlt	r3, #1
 80a1818:	e002      	b.n	80a1820 <localtime_r+0x98>
 80a181a:	2300      	movs	r3, #0
 80a181c:	e000      	b.n	80a1820 <localtime_r+0x98>
 80a181e:	2301      	movs	r3, #1
 80a1820:	6223      	str	r3, [r4, #32]
 80a1822:	6a23      	ldr	r3, [r4, #32]
 80a1824:	203c      	movs	r0, #60	; 0x3c
 80a1826:	2b01      	cmp	r3, #1
 80a1828:	bf0c      	ite	eq
 80a182a:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
 80a182c:	6a39      	ldrne	r1, [r7, #32]
 80a182e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80a1832:	fb91 f6f3 	sdiv	r6, r1, r3
 80a1836:	fb03 1316 	mls	r3, r3, r6, r1
 80a183a:	fb93 f2f0 	sdiv	r2, r3, r0
 80a183e:	fb00 3012 	mls	r0, r0, r2, r3
 80a1842:	6861      	ldr	r1, [r4, #4]
 80a1844:	6823      	ldr	r3, [r4, #0]
 80a1846:	1a89      	subs	r1, r1, r2
 80a1848:	68a2      	ldr	r2, [r4, #8]
 80a184a:	1a1b      	subs	r3, r3, r0
 80a184c:	1b92      	subs	r2, r2, r6
 80a184e:	2b3b      	cmp	r3, #59	; 0x3b
 80a1850:	6023      	str	r3, [r4, #0]
 80a1852:	6061      	str	r1, [r4, #4]
 80a1854:	60a2      	str	r2, [r4, #8]
 80a1856:	dd03      	ble.n	80a1860 <localtime_r+0xd8>
 80a1858:	3101      	adds	r1, #1
 80a185a:	6061      	str	r1, [r4, #4]
 80a185c:	3b3c      	subs	r3, #60	; 0x3c
 80a185e:	e004      	b.n	80a186a <localtime_r+0xe2>
 80a1860:	2b00      	cmp	r3, #0
 80a1862:	da03      	bge.n	80a186c <localtime_r+0xe4>
 80a1864:	3901      	subs	r1, #1
 80a1866:	6061      	str	r1, [r4, #4]
 80a1868:	333c      	adds	r3, #60	; 0x3c
 80a186a:	6023      	str	r3, [r4, #0]
 80a186c:	6863      	ldr	r3, [r4, #4]
 80a186e:	2b3b      	cmp	r3, #59	; 0x3b
 80a1870:	dd03      	ble.n	80a187a <localtime_r+0xf2>
 80a1872:	3201      	adds	r2, #1
 80a1874:	60a2      	str	r2, [r4, #8]
 80a1876:	3b3c      	subs	r3, #60	; 0x3c
 80a1878:	e004      	b.n	80a1884 <localtime_r+0xfc>
 80a187a:	2b00      	cmp	r3, #0
 80a187c:	da03      	bge.n	80a1886 <localtime_r+0xfe>
 80a187e:	3a01      	subs	r2, #1
 80a1880:	60a2      	str	r2, [r4, #8]
 80a1882:	333c      	adds	r3, #60	; 0x3c
 80a1884:	6063      	str	r3, [r4, #4]
 80a1886:	68a3      	ldr	r3, [r4, #8]
 80a1888:	2b17      	cmp	r3, #23
 80a188a:	dd22      	ble.n	80a18d2 <localtime_r+0x14a>
 80a188c:	69e2      	ldr	r2, [r4, #28]
 80a188e:	3b18      	subs	r3, #24
 80a1890:	3201      	adds	r2, #1
 80a1892:	61e2      	str	r2, [r4, #28]
 80a1894:	69a2      	ldr	r2, [r4, #24]
 80a1896:	60a3      	str	r3, [r4, #8]
 80a1898:	3201      	adds	r2, #1
 80a189a:	2a06      	cmp	r2, #6
 80a189c:	bfc8      	it	gt
 80a189e:	2200      	movgt	r2, #0
 80a18a0:	61a2      	str	r2, [r4, #24]
 80a18a2:	68e2      	ldr	r2, [r4, #12]
 80a18a4:	6923      	ldr	r3, [r4, #16]
 80a18a6:	3201      	adds	r2, #1
 80a18a8:	60e2      	str	r2, [r4, #12]
 80a18aa:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 80a18ae:	428a      	cmp	r2, r1
 80a18b0:	dd46      	ble.n	80a1940 <localtime_r+0x1b8>
 80a18b2:	3301      	adds	r3, #1
 80a18b4:	2b0c      	cmp	r3, #12
 80a18b6:	bf08      	it	eq
 80a18b8:	6963      	ldreq	r3, [r4, #20]
 80a18ba:	eba2 0201 	sub.w	r2, r2, r1
 80a18be:	60e2      	str	r2, [r4, #12]
 80a18c0:	bf05      	ittet	eq
 80a18c2:	3301      	addeq	r3, #1
 80a18c4:	2200      	moveq	r2, #0
 80a18c6:	6123      	strne	r3, [r4, #16]
 80a18c8:	6122      	streq	r2, [r4, #16]
 80a18ca:	bf04      	itt	eq
 80a18cc:	6163      	streq	r3, [r4, #20]
 80a18ce:	61e2      	streq	r2, [r4, #28]
 80a18d0:	e036      	b.n	80a1940 <localtime_r+0x1b8>
 80a18d2:	2b00      	cmp	r3, #0
 80a18d4:	da34      	bge.n	80a1940 <localtime_r+0x1b8>
 80a18d6:	69e2      	ldr	r2, [r4, #28]
 80a18d8:	3318      	adds	r3, #24
 80a18da:	3a01      	subs	r2, #1
 80a18dc:	61e2      	str	r2, [r4, #28]
 80a18de:	69a2      	ldr	r2, [r4, #24]
 80a18e0:	60a3      	str	r3, [r4, #8]
 80a18e2:	3a01      	subs	r2, #1
 80a18e4:	bf48      	it	mi
 80a18e6:	2206      	movmi	r2, #6
 80a18e8:	61a2      	str	r2, [r4, #24]
 80a18ea:	68e2      	ldr	r2, [r4, #12]
 80a18ec:	3a01      	subs	r2, #1
 80a18ee:	60e2      	str	r2, [r4, #12]
 80a18f0:	bb32      	cbnz	r2, 80a1940 <localtime_r+0x1b8>
 80a18f2:	6923      	ldr	r3, [r4, #16]
 80a18f4:	3b01      	subs	r3, #1
 80a18f6:	d401      	bmi.n	80a18fc <localtime_r+0x174>
 80a18f8:	6123      	str	r3, [r4, #16]
 80a18fa:	e01d      	b.n	80a1938 <localtime_r+0x1b0>
 80a18fc:	230b      	movs	r3, #11
 80a18fe:	6123      	str	r3, [r4, #16]
 80a1900:	6963      	ldr	r3, [r4, #20]
 80a1902:	1e5a      	subs	r2, r3, #1
 80a1904:	f012 0f03 	tst.w	r2, #3
 80a1908:	6162      	str	r2, [r4, #20]
 80a190a:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 80a190e:	d105      	bne.n	80a191c <localtime_r+0x194>
 80a1910:	2164      	movs	r1, #100	; 0x64
 80a1912:	fb93 f2f1 	sdiv	r2, r3, r1
 80a1916:	fb01 3212 	mls	r2, r1, r2, r3
 80a191a:	b94a      	cbnz	r2, 80a1930 <localtime_r+0x1a8>
 80a191c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80a1920:	fb93 f2f1 	sdiv	r2, r3, r1
 80a1924:	fb01 3312 	mls	r3, r1, r2, r3
 80a1928:	fab3 f383 	clz	r3, r3
 80a192c:	095b      	lsrs	r3, r3, #5
 80a192e:	e000      	b.n	80a1932 <localtime_r+0x1aa>
 80a1930:	2301      	movs	r3, #1
 80a1932:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80a1936:	61e3      	str	r3, [r4, #28]
 80a1938:	6923      	ldr	r3, [r4, #16]
 80a193a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80a193e:	60e3      	str	r3, [r4, #12]
 80a1940:	f000 f9a5 	bl	80a1c8e <__tz_unlock>
 80a1944:	4620      	mov	r0, r4
 80a1946:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a194a:	bf00      	nop
 80a194c:	080a2540 	.word	0x080a2540
 80a1950:	20000714 	.word	0x20000714

080a1954 <memcpy>:
 80a1954:	b510      	push	{r4, lr}
 80a1956:	1e43      	subs	r3, r0, #1
 80a1958:	440a      	add	r2, r1
 80a195a:	4291      	cmp	r1, r2
 80a195c:	d004      	beq.n	80a1968 <memcpy+0x14>
 80a195e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a1962:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a1966:	e7f8      	b.n	80a195a <memcpy+0x6>
 80a1968:	bd10      	pop	{r4, pc}

080a196a <memset>:
 80a196a:	4603      	mov	r3, r0
 80a196c:	4402      	add	r2, r0
 80a196e:	4293      	cmp	r3, r2
 80a1970:	d002      	beq.n	80a1978 <memset+0xe>
 80a1972:	f803 1b01 	strb.w	r1, [r3], #1
 80a1976:	e7fa      	b.n	80a196e <memset+0x4>
 80a1978:	4770      	bx	lr
	...

080a197c <srand>:
 80a197c:	b538      	push	{r3, r4, r5, lr}
 80a197e:	4b12      	ldr	r3, [pc, #72]	; (80a19c8 <srand+0x4c>)
 80a1980:	4605      	mov	r5, r0
 80a1982:	681c      	ldr	r4, [r3, #0]
 80a1984:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a1986:	b9d3      	cbnz	r3, 80a19be <srand+0x42>
 80a1988:	2018      	movs	r0, #24
 80a198a:	f7fe fdb3 	bl	80a04f4 <malloc>
 80a198e:	f243 330e 	movw	r3, #13070	; 0x330e
 80a1992:	63a0      	str	r0, [r4, #56]	; 0x38
 80a1994:	8003      	strh	r3, [r0, #0]
 80a1996:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a199a:	8043      	strh	r3, [r0, #2]
 80a199c:	f241 2334 	movw	r3, #4660	; 0x1234
 80a19a0:	8083      	strh	r3, [r0, #4]
 80a19a2:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a19a6:	80c3      	strh	r3, [r0, #6]
 80a19a8:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a19ac:	8103      	strh	r3, [r0, #8]
 80a19ae:	2305      	movs	r3, #5
 80a19b0:	8143      	strh	r3, [r0, #10]
 80a19b2:	230b      	movs	r3, #11
 80a19b4:	8183      	strh	r3, [r0, #12]
 80a19b6:	2201      	movs	r2, #1
 80a19b8:	2300      	movs	r3, #0
 80a19ba:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a19be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a19c0:	2200      	movs	r2, #0
 80a19c2:	611d      	str	r5, [r3, #16]
 80a19c4:	615a      	str	r2, [r3, #20]
 80a19c6:	bd38      	pop	{r3, r4, r5, pc}
 80a19c8:	20000080 	.word	0x20000080

080a19cc <strcmp>:
 80a19cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a19d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a19d4:	2a01      	cmp	r2, #1
 80a19d6:	bf28      	it	cs
 80a19d8:	429a      	cmpcs	r2, r3
 80a19da:	d0f7      	beq.n	80a19cc <strcmp>
 80a19dc:	1ad0      	subs	r0, r2, r3
 80a19de:	4770      	bx	lr

080a19e0 <strcpy>:
 80a19e0:	4603      	mov	r3, r0
 80a19e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a19e6:	f803 2b01 	strb.w	r2, [r3], #1
 80a19ea:	2a00      	cmp	r2, #0
 80a19ec:	d1f9      	bne.n	80a19e2 <strcpy+0x2>
 80a19ee:	4770      	bx	lr

080a19f0 <strlen>:
 80a19f0:	4603      	mov	r3, r0
 80a19f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a19f6:	2a00      	cmp	r2, #0
 80a19f8:	d1fb      	bne.n	80a19f2 <strlen+0x2>
 80a19fa:	1a18      	subs	r0, r3, r0
 80a19fc:	3801      	subs	r0, #1
 80a19fe:	4770      	bx	lr

080a1a00 <strncmp>:
 80a1a00:	b530      	push	{r4, r5, lr}
 80a1a02:	b182      	cbz	r2, 80a1a26 <strncmp+0x26>
 80a1a04:	1e45      	subs	r5, r0, #1
 80a1a06:	3901      	subs	r1, #1
 80a1a08:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80a1a0c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80a1a10:	42a3      	cmp	r3, r4
 80a1a12:	d106      	bne.n	80a1a22 <strncmp+0x22>
 80a1a14:	43ec      	mvns	r4, r5
 80a1a16:	4414      	add	r4, r2
 80a1a18:	42e0      	cmn	r0, r4
 80a1a1a:	d001      	beq.n	80a1a20 <strncmp+0x20>
 80a1a1c:	2b00      	cmp	r3, #0
 80a1a1e:	d1f3      	bne.n	80a1a08 <strncmp+0x8>
 80a1a20:	461c      	mov	r4, r3
 80a1a22:	1b18      	subs	r0, r3, r4
 80a1a24:	bd30      	pop	{r4, r5, pc}
 80a1a26:	4610      	mov	r0, r2
 80a1a28:	bd30      	pop	{r4, r5, pc}
	...

080a1a2c <_strtoul_r>:
 80a1a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a1a30:	460e      	mov	r6, r1
 80a1a32:	4680      	mov	r8, r0
 80a1a34:	483b      	ldr	r0, [pc, #236]	; (80a1b24 <_strtoul_r+0xf8>)
 80a1a36:	f8d0 9000 	ldr.w	r9, [r0]
 80a1a3a:	4635      	mov	r5, r6
 80a1a3c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a1a40:	eb09 0004 	add.w	r0, r9, r4
 80a1a44:	7840      	ldrb	r0, [r0, #1]
 80a1a46:	f000 0008 	and.w	r0, r0, #8
 80a1a4a:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 80a1a4e:	b108      	cbz	r0, 80a1a54 <_strtoul_r+0x28>
 80a1a50:	462e      	mov	r6, r5
 80a1a52:	e7f2      	b.n	80a1a3a <_strtoul_r+0xe>
 80a1a54:	2c2d      	cmp	r4, #45	; 0x2d
 80a1a56:	d103      	bne.n	80a1a60 <_strtoul_r+0x34>
 80a1a58:	1cb5      	adds	r5, r6, #2
 80a1a5a:	7874      	ldrb	r4, [r6, #1]
 80a1a5c:	2701      	movs	r7, #1
 80a1a5e:	e003      	b.n	80a1a68 <_strtoul_r+0x3c>
 80a1a60:	2c2b      	cmp	r4, #43	; 0x2b
 80a1a62:	bf04      	itt	eq
 80a1a64:	7874      	ldrbeq	r4, [r6, #1]
 80a1a66:	1cb5      	addeq	r5, r6, #2
 80a1a68:	b113      	cbz	r3, 80a1a70 <_strtoul_r+0x44>
 80a1a6a:	2b10      	cmp	r3, #16
 80a1a6c:	d10a      	bne.n	80a1a84 <_strtoul_r+0x58>
 80a1a6e:	e053      	b.n	80a1b18 <_strtoul_r+0xec>
 80a1a70:	2c30      	cmp	r4, #48	; 0x30
 80a1a72:	d14f      	bne.n	80a1b14 <_strtoul_r+0xe8>
 80a1a74:	7828      	ldrb	r0, [r5, #0]
 80a1a76:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a1a7a:	2858      	cmp	r0, #88	; 0x58
 80a1a7c:	d145      	bne.n	80a1b0a <_strtoul_r+0xde>
 80a1a7e:	786c      	ldrb	r4, [r5, #1]
 80a1a80:	2310      	movs	r3, #16
 80a1a82:	3502      	adds	r5, #2
 80a1a84:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80a1a88:	fbbc fcf3 	udiv	ip, ip, r3
 80a1a8c:	fb03 fa0c 	mul.w	sl, r3, ip
 80a1a90:	2600      	movs	r6, #0
 80a1a92:	ea6f 0a0a 	mvn.w	sl, sl
 80a1a96:	4630      	mov	r0, r6
 80a1a98:	eb09 0e04 	add.w	lr, r9, r4
 80a1a9c:	f89e e001 	ldrb.w	lr, [lr, #1]
 80a1aa0:	f01e 0f04 	tst.w	lr, #4
 80a1aa4:	d001      	beq.n	80a1aaa <_strtoul_r+0x7e>
 80a1aa6:	3c30      	subs	r4, #48	; 0x30
 80a1aa8:	e00b      	b.n	80a1ac2 <_strtoul_r+0x96>
 80a1aaa:	f01e 0e03 	ands.w	lr, lr, #3
 80a1aae:	d01a      	beq.n	80a1ae6 <_strtoul_r+0xba>
 80a1ab0:	f1be 0f01 	cmp.w	lr, #1
 80a1ab4:	bf0c      	ite	eq
 80a1ab6:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80a1aba:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80a1abe:	ebce 0404 	rsb	r4, lr, r4
 80a1ac2:	42a3      	cmp	r3, r4
 80a1ac4:	dd0f      	ble.n	80a1ae6 <_strtoul_r+0xba>
 80a1ac6:	2e00      	cmp	r6, #0
 80a1ac8:	db08      	blt.n	80a1adc <_strtoul_r+0xb0>
 80a1aca:	4560      	cmp	r0, ip
 80a1acc:	d806      	bhi.n	80a1adc <_strtoul_r+0xb0>
 80a1ace:	d101      	bne.n	80a1ad4 <_strtoul_r+0xa8>
 80a1ad0:	4554      	cmp	r4, sl
 80a1ad2:	dc03      	bgt.n	80a1adc <_strtoul_r+0xb0>
 80a1ad4:	fb03 4000 	mla	r0, r3, r0, r4
 80a1ad8:	2601      	movs	r6, #1
 80a1ada:	e001      	b.n	80a1ae0 <_strtoul_r+0xb4>
 80a1adc:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80a1ae0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a1ae4:	e7d8      	b.n	80a1a98 <_strtoul_r+0x6c>
 80a1ae6:	2e00      	cmp	r6, #0
 80a1ae8:	da07      	bge.n	80a1afa <_strtoul_r+0xce>
 80a1aea:	2322      	movs	r3, #34	; 0x22
 80a1aec:	f8c8 3000 	str.w	r3, [r8]
 80a1af0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a1af4:	b92a      	cbnz	r2, 80a1b02 <_strtoul_r+0xd6>
 80a1af6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a1afa:	b107      	cbz	r7, 80a1afe <_strtoul_r+0xd2>
 80a1afc:	4240      	negs	r0, r0
 80a1afe:	b172      	cbz	r2, 80a1b1e <_strtoul_r+0xf2>
 80a1b00:	b106      	cbz	r6, 80a1b04 <_strtoul_r+0xd8>
 80a1b02:	1e69      	subs	r1, r5, #1
 80a1b04:	6011      	str	r1, [r2, #0]
 80a1b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a1b0a:	2430      	movs	r4, #48	; 0x30
 80a1b0c:	2b00      	cmp	r3, #0
 80a1b0e:	d1b9      	bne.n	80a1a84 <_strtoul_r+0x58>
 80a1b10:	2308      	movs	r3, #8
 80a1b12:	e7b7      	b.n	80a1a84 <_strtoul_r+0x58>
 80a1b14:	230a      	movs	r3, #10
 80a1b16:	e7b5      	b.n	80a1a84 <_strtoul_r+0x58>
 80a1b18:	2c30      	cmp	r4, #48	; 0x30
 80a1b1a:	d0ab      	beq.n	80a1a74 <_strtoul_r+0x48>
 80a1b1c:	e7b2      	b.n	80a1a84 <_strtoul_r+0x58>
 80a1b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a1b22:	bf00      	nop
 80a1b24:	2000001c 	.word	0x2000001c

080a1b28 <strtoul>:
 80a1b28:	4613      	mov	r3, r2
 80a1b2a:	460a      	mov	r2, r1
 80a1b2c:	4601      	mov	r1, r0
 80a1b2e:	4802      	ldr	r0, [pc, #8]	; (80a1b38 <strtoul+0x10>)
 80a1b30:	6800      	ldr	r0, [r0, #0]
 80a1b32:	f7ff bf7b 	b.w	80a1a2c <_strtoul_r>
 80a1b36:	bf00      	nop
 80a1b38:	20000080 	.word	0x20000080

080a1b3c <__tzcalc_limits>:
 80a1b3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1b40:	4604      	mov	r4, r0
 80a1b42:	f000 fa6f 	bl	80a2024 <__gettzinfo>
 80a1b46:	f240 73b1 	movw	r3, #1969	; 0x7b1
 80a1b4a:	429c      	cmp	r4, r3
 80a1b4c:	f340 8096 	ble.w	80a1c7c <__tzcalc_limits+0x140>
 80a1b50:	f240 156d 	movw	r5, #365	; 0x16d
 80a1b54:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 80a1b58:	18e3      	adds	r3, r4, r3
 80a1b5a:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
 80a1b5e:	109b      	asrs	r3, r3, #2
 80a1b60:	fb05 3502 	mla	r5, r5, r2, r3
 80a1b64:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
 80a1b68:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80a1b6c:	fb92 f3f3 	sdiv	r3, r2, r3
 80a1b70:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 80a1b74:	442b      	add	r3, r5
 80a1b76:	18a5      	adds	r5, r4, r2
 80a1b78:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a1b7c:	fb94 f7f2 	sdiv	r7, r4, r2
 80a1b80:	fb95 f5f2 	sdiv	r5, r5, r2
 80a1b84:	fb02 4717 	mls	r7, r2, r7, r4
 80a1b88:	441d      	add	r5, r3
 80a1b8a:	2364      	movs	r3, #100	; 0x64
 80a1b8c:	fb94 f6f3 	sdiv	r6, r4, r3
 80a1b90:	fab7 fe87 	clz	lr, r7
 80a1b94:	4601      	mov	r1, r0
 80a1b96:	fb03 4616 	mls	r6, r3, r6, r4
 80a1b9a:	f100 0338 	add.w	r3, r0, #56	; 0x38
 80a1b9e:	9301      	str	r3, [sp, #4]
 80a1ba0:	f004 0303 	and.w	r3, r4, #3
 80a1ba4:	6044      	str	r4, [r0, #4]
 80a1ba6:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80a1baa:	9300      	str	r3, [sp, #0]
 80a1bac:	f04f 0c07 	mov.w	ip, #7
 80a1bb0:	7a0b      	ldrb	r3, [r1, #8]
 80a1bb2:	2b4a      	cmp	r3, #74	; 0x4a
 80a1bb4:	d10e      	bne.n	80a1bd4 <__tzcalc_limits+0x98>
 80a1bb6:	694b      	ldr	r3, [r1, #20]
 80a1bb8:	9a00      	ldr	r2, [sp, #0]
 80a1bba:	18ec      	adds	r4, r5, r3
 80a1bbc:	b902      	cbnz	r2, 80a1bc0 <__tzcalc_limits+0x84>
 80a1bbe:	b906      	cbnz	r6, 80a1bc2 <__tzcalc_limits+0x86>
 80a1bc0:	b927      	cbnz	r7, 80a1bcc <__tzcalc_limits+0x90>
 80a1bc2:	2b3b      	cmp	r3, #59	; 0x3b
 80a1bc4:	bfd4      	ite	le
 80a1bc6:	2300      	movle	r3, #0
 80a1bc8:	2301      	movgt	r3, #1
 80a1bca:	e000      	b.n	80a1bce <__tzcalc_limits+0x92>
 80a1bcc:	2300      	movs	r3, #0
 80a1bce:	4423      	add	r3, r4
 80a1bd0:	3b01      	subs	r3, #1
 80a1bd2:	e03f      	b.n	80a1c54 <__tzcalc_limits+0x118>
 80a1bd4:	2b44      	cmp	r3, #68	; 0x44
 80a1bd6:	d102      	bne.n	80a1bde <__tzcalc_limits+0xa2>
 80a1bd8:	694b      	ldr	r3, [r1, #20]
 80a1bda:	442b      	add	r3, r5
 80a1bdc:	e03a      	b.n	80a1c54 <__tzcalc_limits+0x118>
 80a1bde:	9b00      	ldr	r3, [sp, #0]
 80a1be0:	b92b      	cbnz	r3, 80a1bee <__tzcalc_limits+0xb2>
 80a1be2:	2e00      	cmp	r6, #0
 80a1be4:	bf0c      	ite	eq
 80a1be6:	46f0      	moveq	r8, lr
 80a1be8:	f04f 0801 	movne.w	r8, #1
 80a1bec:	e000      	b.n	80a1bf0 <__tzcalc_limits+0xb4>
 80a1bee:	46f0      	mov	r8, lr
 80a1bf0:	46a9      	mov	r9, r5
 80a1bf2:	4b24      	ldr	r3, [pc, #144]	; (80a1c84 <__tzcalc_limits+0x148>)
 80a1bf4:	2230      	movs	r2, #48	; 0x30
 80a1bf6:	fb02 3808 	mla	r8, r2, r8, r3
 80a1bfa:	68cc      	ldr	r4, [r1, #12]
 80a1bfc:	f1a8 0a04 	sub.w	sl, r8, #4
 80a1c00:	2301      	movs	r3, #1
 80a1c02:	42a3      	cmp	r3, r4
 80a1c04:	da04      	bge.n	80a1c10 <__tzcalc_limits+0xd4>
 80a1c06:	f85a bf04 	ldr.w	fp, [sl, #4]!
 80a1c0a:	3301      	adds	r3, #1
 80a1c0c:	44d9      	add	r9, fp
 80a1c0e:	e7f8      	b.n	80a1c02 <__tzcalc_limits+0xc6>
 80a1c10:	f109 0304 	add.w	r3, r9, #4
 80a1c14:	fb93 fbfc 	sdiv	fp, r3, ip
 80a1c18:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
 80a1c1c:	ebca 0a03 	rsb	sl, sl, r3
 80a1c20:	694b      	ldr	r3, [r1, #20]
 80a1c22:	2c01      	cmp	r4, #1
 80a1c24:	bfb8      	it	lt
 80a1c26:	2401      	movlt	r4, #1
 80a1c28:	ebb3 0a0a 	subs.w	sl, r3, sl
 80a1c2c:	690b      	ldr	r3, [r1, #16]
 80a1c2e:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80a1c32:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80a1c36:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80a1c3a:	bf48      	it	mi
 80a1c3c:	f10a 0a07 	addmi.w	sl, sl, #7
 80a1c40:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1c44:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 80a1c48:	4453      	add	r3, sl
 80a1c4a:	42a3      	cmp	r3, r4
 80a1c4c:	db01      	blt.n	80a1c52 <__tzcalc_limits+0x116>
 80a1c4e:	3b07      	subs	r3, #7
 80a1c50:	e7fb      	b.n	80a1c4a <__tzcalc_limits+0x10e>
 80a1c52:	444b      	add	r3, r9
 80a1c54:	698c      	ldr	r4, [r1, #24]
 80a1c56:	4a0c      	ldr	r2, [pc, #48]	; (80a1c88 <__tzcalc_limits+0x14c>)
 80a1c58:	fb02 4303 	mla	r3, r2, r3, r4
 80a1c5c:	6a0c      	ldr	r4, [r1, #32]
 80a1c5e:	4423      	add	r3, r4
 80a1c60:	f841 3f1c 	str.w	r3, [r1, #28]!
 80a1c64:	9b01      	ldr	r3, [sp, #4]
 80a1c66:	4299      	cmp	r1, r3
 80a1c68:	d1a2      	bne.n	80a1bb0 <__tzcalc_limits+0x74>
 80a1c6a:	69c3      	ldr	r3, [r0, #28]
 80a1c6c:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80a1c6e:	4293      	cmp	r3, r2
 80a1c70:	bfac      	ite	ge
 80a1c72:	2300      	movge	r3, #0
 80a1c74:	2301      	movlt	r3, #1
 80a1c76:	6003      	str	r3, [r0, #0]
 80a1c78:	2001      	movs	r0, #1
 80a1c7a:	e000      	b.n	80a1c7e <__tzcalc_limits+0x142>
 80a1c7c:	2000      	movs	r0, #0
 80a1c7e:	b003      	add	sp, #12
 80a1c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a1c84:	080a2540 	.word	0x080a2540
 80a1c88:	00015180 	.word	0x00015180

080a1c8c <__tz_lock>:
 80a1c8c:	4770      	bx	lr

080a1c8e <__tz_unlock>:
 80a1c8e:	4770      	bx	lr

080a1c90 <_tzset_unlocked>:
 80a1c90:	4b01      	ldr	r3, [pc, #4]	; (80a1c98 <_tzset_unlocked+0x8>)
 80a1c92:	6818      	ldr	r0, [r3, #0]
 80a1c94:	f000 b802 	b.w	80a1c9c <_tzset_unlocked_r>
 80a1c98:	20000080 	.word	0x20000080

080a1c9c <_tzset_unlocked_r>:
 80a1c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1ca0:	b08d      	sub	sp, #52	; 0x34
 80a1ca2:	4607      	mov	r7, r0
 80a1ca4:	f000 f9be 	bl	80a2024 <__gettzinfo>
 80a1ca8:	49b0      	ldr	r1, [pc, #704]	; (80a1f6c <_tzset_unlocked_r+0x2d0>)
 80a1caa:	4604      	mov	r4, r0
 80a1cac:	4638      	mov	r0, r7
 80a1cae:	f000 f9b1 	bl	80a2014 <_getenv_r>
 80a1cb2:	4eaf      	ldr	r6, [pc, #700]	; (80a1f70 <_tzset_unlocked_r+0x2d4>)
 80a1cb4:	4605      	mov	r5, r0
 80a1cb6:	b960      	cbnz	r0, 80a1cd2 <_tzset_unlocked_r+0x36>
 80a1cb8:	4bae      	ldr	r3, [pc, #696]	; (80a1f74 <_tzset_unlocked_r+0x2d8>)
 80a1cba:	4aaf      	ldr	r2, [pc, #700]	; (80a1f78 <_tzset_unlocked_r+0x2dc>)
 80a1cbc:	6018      	str	r0, [r3, #0]
 80a1cbe:	4baf      	ldr	r3, [pc, #700]	; (80a1f7c <_tzset_unlocked_r+0x2e0>)
 80a1cc0:	6018      	str	r0, [r3, #0]
 80a1cc2:	4baf      	ldr	r3, [pc, #700]	; (80a1f80 <_tzset_unlocked_r+0x2e4>)
 80a1cc4:	6830      	ldr	r0, [r6, #0]
 80a1cc6:	601a      	str	r2, [r3, #0]
 80a1cc8:	605a      	str	r2, [r3, #4]
 80a1cca:	f7fe fc1b 	bl	80a0504 <free>
 80a1cce:	6035      	str	r5, [r6, #0]
 80a1cd0:	e148      	b.n	80a1f64 <_tzset_unlocked_r+0x2c8>
 80a1cd2:	6831      	ldr	r1, [r6, #0]
 80a1cd4:	b979      	cbnz	r1, 80a1cf6 <_tzset_unlocked_r+0x5a>
 80a1cd6:	6830      	ldr	r0, [r6, #0]
 80a1cd8:	f7fe fc14 	bl	80a0504 <free>
 80a1cdc:	4628      	mov	r0, r5
 80a1cde:	f7ff fe87 	bl	80a19f0 <strlen>
 80a1ce2:	1c41      	adds	r1, r0, #1
 80a1ce4:	4638      	mov	r0, r7
 80a1ce6:	f7fe fc35 	bl	80a0554 <_malloc_r>
 80a1cea:	6030      	str	r0, [r6, #0]
 80a1cec:	b148      	cbz	r0, 80a1d02 <_tzset_unlocked_r+0x66>
 80a1cee:	4629      	mov	r1, r5
 80a1cf0:	f7ff fe76 	bl	80a19e0 <strcpy>
 80a1cf4:	e005      	b.n	80a1d02 <_tzset_unlocked_r+0x66>
 80a1cf6:	f7ff fe69 	bl	80a19cc <strcmp>
 80a1cfa:	2800      	cmp	r0, #0
 80a1cfc:	f000 8132 	beq.w	80a1f64 <_tzset_unlocked_r+0x2c8>
 80a1d00:	e7e9      	b.n	80a1cd6 <_tzset_unlocked_r+0x3a>
 80a1d02:	782b      	ldrb	r3, [r5, #0]
 80a1d04:	ae0a      	add	r6, sp, #40	; 0x28
 80a1d06:	2b3a      	cmp	r3, #58	; 0x3a
 80a1d08:	bf08      	it	eq
 80a1d0a:	3501      	addeq	r5, #1
 80a1d0c:	4633      	mov	r3, r6
 80a1d0e:	4a9d      	ldr	r2, [pc, #628]	; (80a1f84 <_tzset_unlocked_r+0x2e8>)
 80a1d10:	499d      	ldr	r1, [pc, #628]	; (80a1f88 <_tzset_unlocked_r+0x2ec>)
 80a1d12:	4628      	mov	r0, r5
 80a1d14:	f7fe fc0e 	bl	80a0534 <siscanf>
 80a1d18:	2800      	cmp	r0, #0
 80a1d1a:	f340 8123 	ble.w	80a1f64 <_tzset_unlocked_r+0x2c8>
 80a1d1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a1d20:	18ef      	adds	r7, r5, r3
 80a1d22:	5ceb      	ldrb	r3, [r5, r3]
 80a1d24:	2b2d      	cmp	r3, #45	; 0x2d
 80a1d26:	d103      	bne.n	80a1d30 <_tzset_unlocked_r+0x94>
 80a1d28:	3701      	adds	r7, #1
 80a1d2a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80a1d2e:	e003      	b.n	80a1d38 <_tzset_unlocked_r+0x9c>
 80a1d30:	2b2b      	cmp	r3, #43	; 0x2b
 80a1d32:	bf08      	it	eq
 80a1d34:	3701      	addeq	r7, #1
 80a1d36:	2501      	movs	r5, #1
 80a1d38:	f10d 0a20 	add.w	sl, sp, #32
 80a1d3c:	f10d 0b1e 	add.w	fp, sp, #30
 80a1d40:	f04f 0800 	mov.w	r8, #0
 80a1d44:	9603      	str	r6, [sp, #12]
 80a1d46:	f8cd a008 	str.w	sl, [sp, #8]
 80a1d4a:	9601      	str	r6, [sp, #4]
 80a1d4c:	f8cd b000 	str.w	fp, [sp]
 80a1d50:	4633      	mov	r3, r6
 80a1d52:	aa07      	add	r2, sp, #28
 80a1d54:	498d      	ldr	r1, [pc, #564]	; (80a1f8c <_tzset_unlocked_r+0x2f0>)
 80a1d56:	4638      	mov	r0, r7
 80a1d58:	f8ad 801e 	strh.w	r8, [sp, #30]
 80a1d5c:	f8ad 8020 	strh.w	r8, [sp, #32]
 80a1d60:	f7fe fbe8 	bl	80a0534 <siscanf>
 80a1d64:	4540      	cmp	r0, r8
 80a1d66:	f340 80fd 	ble.w	80a1f64 <_tzset_unlocked_r+0x2c8>
 80a1d6a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80a1d6e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80a1d72:	213c      	movs	r1, #60	; 0x3c
 80a1d74:	fb01 3302 	mla	r3, r1, r2, r3
 80a1d78:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80a1d7c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a1d80:	fb01 3302 	mla	r3, r1, r2, r3
 80a1d84:	435d      	muls	r5, r3
 80a1d86:	4b7f      	ldr	r3, [pc, #508]	; (80a1f84 <_tzset_unlocked_r+0x2e8>)
 80a1d88:	6225      	str	r5, [r4, #32]
 80a1d8a:	4d7d      	ldr	r5, [pc, #500]	; (80a1f80 <_tzset_unlocked_r+0x2e4>)
 80a1d8c:	f8df 9208 	ldr.w	r9, [pc, #520]	; 80a1f98 <_tzset_unlocked_r+0x2fc>
 80a1d90:	602b      	str	r3, [r5, #0]
 80a1d92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a1d94:	464a      	mov	r2, r9
 80a1d96:	441f      	add	r7, r3
 80a1d98:	497b      	ldr	r1, [pc, #492]	; (80a1f88 <_tzset_unlocked_r+0x2ec>)
 80a1d9a:	4633      	mov	r3, r6
 80a1d9c:	4638      	mov	r0, r7
 80a1d9e:	f7fe fbc9 	bl	80a0534 <siscanf>
 80a1da2:	4540      	cmp	r0, r8
 80a1da4:	dc08      	bgt.n	80a1db8 <_tzset_unlocked_r+0x11c>
 80a1da6:	682b      	ldr	r3, [r5, #0]
 80a1da8:	6a22      	ldr	r2, [r4, #32]
 80a1daa:	606b      	str	r3, [r5, #4]
 80a1dac:	4b71      	ldr	r3, [pc, #452]	; (80a1f74 <_tzset_unlocked_r+0x2d8>)
 80a1dae:	601a      	str	r2, [r3, #0]
 80a1db0:	4b72      	ldr	r3, [pc, #456]	; (80a1f7c <_tzset_unlocked_r+0x2e0>)
 80a1db2:	f8c3 8000 	str.w	r8, [r3]
 80a1db6:	e0d5      	b.n	80a1f64 <_tzset_unlocked_r+0x2c8>
 80a1db8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a1dba:	f8c5 9004 	str.w	r9, [r5, #4]
 80a1dbe:	18fd      	adds	r5, r7, r3
 80a1dc0:	5cfb      	ldrb	r3, [r7, r3]
 80a1dc2:	2b2d      	cmp	r3, #45	; 0x2d
 80a1dc4:	d103      	bne.n	80a1dce <_tzset_unlocked_r+0x132>
 80a1dc6:	3501      	adds	r5, #1
 80a1dc8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80a1dcc:	e003      	b.n	80a1dd6 <_tzset_unlocked_r+0x13a>
 80a1dce:	2b2b      	cmp	r3, #43	; 0x2b
 80a1dd0:	bf08      	it	eq
 80a1dd2:	3501      	addeq	r5, #1
 80a1dd4:	2701      	movs	r7, #1
 80a1dd6:	2300      	movs	r3, #0
 80a1dd8:	f8ad 301c 	strh.w	r3, [sp, #28]
 80a1ddc:	f8ad 301e 	strh.w	r3, [sp, #30]
 80a1de0:	f8ad 3020 	strh.w	r3, [sp, #32]
 80a1de4:	930a      	str	r3, [sp, #40]	; 0x28
 80a1de6:	9603      	str	r6, [sp, #12]
 80a1de8:	f8cd a008 	str.w	sl, [sp, #8]
 80a1dec:	9601      	str	r6, [sp, #4]
 80a1dee:	f8cd b000 	str.w	fp, [sp]
 80a1df2:	4633      	mov	r3, r6
 80a1df4:	aa07      	add	r2, sp, #28
 80a1df6:	4965      	ldr	r1, [pc, #404]	; (80a1f8c <_tzset_unlocked_r+0x2f0>)
 80a1df8:	4628      	mov	r0, r5
 80a1dfa:	f7fe fb9b 	bl	80a0534 <siscanf>
 80a1dfe:	2800      	cmp	r0, #0
 80a1e00:	dc04      	bgt.n	80a1e0c <_tzset_unlocked_r+0x170>
 80a1e02:	6a23      	ldr	r3, [r4, #32]
 80a1e04:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80a1e08:	63e3      	str	r3, [r4, #60]	; 0x3c
 80a1e0a:	e00e      	b.n	80a1e2a <_tzset_unlocked_r+0x18e>
 80a1e0c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80a1e10:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80a1e14:	213c      	movs	r1, #60	; 0x3c
 80a1e16:	fb01 3302 	mla	r3, r1, r2, r3
 80a1e1a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80a1e1e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a1e22:	fb01 3302 	mla	r3, r1, r2, r3
 80a1e26:	435f      	muls	r7, r3
 80a1e28:	63e7      	str	r7, [r4, #60]	; 0x3c
 80a1e2a:	4627      	mov	r7, r4
 80a1e2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a1e2e:	f04f 0900 	mov.w	r9, #0
 80a1e32:	441d      	add	r5, r3
 80a1e34:	782b      	ldrb	r3, [r5, #0]
 80a1e36:	2b2c      	cmp	r3, #44	; 0x2c
 80a1e38:	bf08      	it	eq
 80a1e3a:	3501      	addeq	r5, #1
 80a1e3c:	f895 8000 	ldrb.w	r8, [r5]
 80a1e40:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 80a1e44:	d126      	bne.n	80a1e94 <_tzset_unlocked_r+0x1f8>
 80a1e46:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 80a1e4a:	9302      	str	r3, [sp, #8]
 80a1e4c:	ab09      	add	r3, sp, #36	; 0x24
 80a1e4e:	9300      	str	r3, [sp, #0]
 80a1e50:	9603      	str	r6, [sp, #12]
 80a1e52:	9601      	str	r6, [sp, #4]
 80a1e54:	4633      	mov	r3, r6
 80a1e56:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 80a1e5a:	494d      	ldr	r1, [pc, #308]	; (80a1f90 <_tzset_unlocked_r+0x2f4>)
 80a1e5c:	4628      	mov	r0, r5
 80a1e5e:	f7fe fb69 	bl	80a0534 <siscanf>
 80a1e62:	2803      	cmp	r0, #3
 80a1e64:	d17e      	bne.n	80a1f64 <_tzset_unlocked_r+0x2c8>
 80a1e66:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80a1e6a:	1e4b      	subs	r3, r1, #1
 80a1e6c:	2b0b      	cmp	r3, #11
 80a1e6e:	d879      	bhi.n	80a1f64 <_tzset_unlocked_r+0x2c8>
 80a1e70:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80a1e74:	1e53      	subs	r3, r2, #1
 80a1e76:	2b04      	cmp	r3, #4
 80a1e78:	d874      	bhi.n	80a1f64 <_tzset_unlocked_r+0x2c8>
 80a1e7a:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80a1e7e:	2b06      	cmp	r3, #6
 80a1e80:	d870      	bhi.n	80a1f64 <_tzset_unlocked_r+0x2c8>
 80a1e82:	f887 8008 	strb.w	r8, [r7, #8]
 80a1e86:	60f9      	str	r1, [r7, #12]
 80a1e88:	613a      	str	r2, [r7, #16]
 80a1e8a:	617b      	str	r3, [r7, #20]
 80a1e8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a1e8e:	eb05 0803 	add.w	r8, r5, r3
 80a1e92:	e02a      	b.n	80a1eea <_tzset_unlocked_r+0x24e>
 80a1e94:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 80a1e98:	bf06      	itte	eq
 80a1e9a:	4643      	moveq	r3, r8
 80a1e9c:	3501      	addeq	r5, #1
 80a1e9e:	2344      	movne	r3, #68	; 0x44
 80a1ea0:	220a      	movs	r2, #10
 80a1ea2:	a90b      	add	r1, sp, #44	; 0x2c
 80a1ea4:	4628      	mov	r0, r5
 80a1ea6:	9305      	str	r3, [sp, #20]
 80a1ea8:	f7ff fe3e 	bl	80a1b28 <strtoul>
 80a1eac:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80a1eb0:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 80a1eb4:	4545      	cmp	r5, r8
 80a1eb6:	9b05      	ldr	r3, [sp, #20]
 80a1eb8:	d114      	bne.n	80a1ee4 <_tzset_unlocked_r+0x248>
 80a1eba:	234d      	movs	r3, #77	; 0x4d
 80a1ebc:	f1b9 0f00 	cmp.w	r9, #0
 80a1ec0:	d107      	bne.n	80a1ed2 <_tzset_unlocked_r+0x236>
 80a1ec2:	7223      	strb	r3, [r4, #8]
 80a1ec4:	2303      	movs	r3, #3
 80a1ec6:	60e3      	str	r3, [r4, #12]
 80a1ec8:	2302      	movs	r3, #2
 80a1eca:	6123      	str	r3, [r4, #16]
 80a1ecc:	f8c4 9014 	str.w	r9, [r4, #20]
 80a1ed0:	e00b      	b.n	80a1eea <_tzset_unlocked_r+0x24e>
 80a1ed2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80a1ed6:	230b      	movs	r3, #11
 80a1ed8:	62a3      	str	r3, [r4, #40]	; 0x28
 80a1eda:	2301      	movs	r3, #1
 80a1edc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80a1ede:	2300      	movs	r3, #0
 80a1ee0:	6323      	str	r3, [r4, #48]	; 0x30
 80a1ee2:	e002      	b.n	80a1eea <_tzset_unlocked_r+0x24e>
 80a1ee4:	b280      	uxth	r0, r0
 80a1ee6:	723b      	strb	r3, [r7, #8]
 80a1ee8:	6178      	str	r0, [r7, #20]
 80a1eea:	2302      	movs	r3, #2
 80a1eec:	f8ad 301c 	strh.w	r3, [sp, #28]
 80a1ef0:	2300      	movs	r3, #0
 80a1ef2:	f8ad 301e 	strh.w	r3, [sp, #30]
 80a1ef6:	f8ad 3020 	strh.w	r3, [sp, #32]
 80a1efa:	930a      	str	r3, [sp, #40]	; 0x28
 80a1efc:	f898 3000 	ldrb.w	r3, [r8]
 80a1f00:	2b2f      	cmp	r3, #47	; 0x2f
 80a1f02:	d10b      	bne.n	80a1f1c <_tzset_unlocked_r+0x280>
 80a1f04:	9603      	str	r6, [sp, #12]
 80a1f06:	f8cd a008 	str.w	sl, [sp, #8]
 80a1f0a:	9601      	str	r6, [sp, #4]
 80a1f0c:	f8cd b000 	str.w	fp, [sp]
 80a1f10:	4633      	mov	r3, r6
 80a1f12:	aa07      	add	r2, sp, #28
 80a1f14:	491f      	ldr	r1, [pc, #124]	; (80a1f94 <_tzset_unlocked_r+0x2f8>)
 80a1f16:	4640      	mov	r0, r8
 80a1f18:	f7fe fb0c 	bl	80a0534 <siscanf>
 80a1f1c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80a1f20:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80a1f24:	213c      	movs	r1, #60	; 0x3c
 80a1f26:	fb01 3302 	mla	r3, r1, r2, r3
 80a1f2a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80a1f2e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a1f32:	fb01 3302 	mla	r3, r1, r2, r3
 80a1f36:	61bb      	str	r3, [r7, #24]
 80a1f38:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80a1f3a:	f109 0901 	add.w	r9, r9, #1
 80a1f3e:	f1b9 0f02 	cmp.w	r9, #2
 80a1f42:	4445      	add	r5, r8
 80a1f44:	f107 071c 	add.w	r7, r7, #28
 80a1f48:	f47f af74 	bne.w	80a1e34 <_tzset_unlocked_r+0x198>
 80a1f4c:	6860      	ldr	r0, [r4, #4]
 80a1f4e:	f7ff fdf5 	bl	80a1b3c <__tzcalc_limits>
 80a1f52:	6a22      	ldr	r2, [r4, #32]
 80a1f54:	4b07      	ldr	r3, [pc, #28]	; (80a1f74 <_tzset_unlocked_r+0x2d8>)
 80a1f56:	601a      	str	r2, [r3, #0]
 80a1f58:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80a1f5a:	1a9b      	subs	r3, r3, r2
 80a1f5c:	4a07      	ldr	r2, [pc, #28]	; (80a1f7c <_tzset_unlocked_r+0x2e0>)
 80a1f5e:	bf18      	it	ne
 80a1f60:	2301      	movne	r3, #1
 80a1f62:	6013      	str	r3, [r2, #0]
 80a1f64:	b00d      	add	sp, #52	; 0x34
 80a1f66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a1f6a:	bf00      	nop
 80a1f6c:	080a25a0 	.word	0x080a25a0
 80a1f70:	20000710 	.word	0x20000710
 80a1f74:	20000718 	.word	0x20000718
 80a1f78:	080a25a3 	.word	0x080a25a3
 80a1f7c:	20000714 	.word	0x20000714
 80a1f80:	20000084 	.word	0x20000084
 80a1f84:	20000703 	.word	0x20000703
 80a1f88:	080a25a7 	.word	0x080a25a7
 80a1f8c:	080a25ca 	.word	0x080a25ca
 80a1f90:	080a25b6 	.word	0x080a25b6
 80a1f94:	080a25c9 	.word	0x080a25c9
 80a1f98:	200006f8 	.word	0x200006f8

080a1f9c <_findenv_r>:
 80a1f9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1fa0:	4607      	mov	r7, r0
 80a1fa2:	468b      	mov	fp, r1
 80a1fa4:	4690      	mov	r8, r2
 80a1fa6:	f000 f8d7 	bl	80a2158 <__env_lock>
 80a1faa:	4b19      	ldr	r3, [pc, #100]	; (80a2010 <_findenv_r+0x74>)
 80a1fac:	681d      	ldr	r5, [r3, #0]
 80a1fae:	469a      	mov	sl, r3
 80a1fb0:	b13d      	cbz	r5, 80a1fc2 <_findenv_r+0x26>
 80a1fb2:	465c      	mov	r4, fp
 80a1fb4:	4623      	mov	r3, r4
 80a1fb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a1fba:	b142      	cbz	r2, 80a1fce <_findenv_r+0x32>
 80a1fbc:	2a3d      	cmp	r2, #61	; 0x3d
 80a1fbe:	461c      	mov	r4, r3
 80a1fc0:	d1f8      	bne.n	80a1fb4 <_findenv_r+0x18>
 80a1fc2:	4638      	mov	r0, r7
 80a1fc4:	f000 f8c9 	bl	80a215a <__env_unlock>
 80a1fc8:	2000      	movs	r0, #0
 80a1fca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a1fce:	ebcb 0404 	rsb	r4, fp, r4
 80a1fd2:	46a9      	mov	r9, r5
 80a1fd4:	f859 0b04 	ldr.w	r0, [r9], #4
 80a1fd8:	2800      	cmp	r0, #0
 80a1fda:	d0f2      	beq.n	80a1fc2 <_findenv_r+0x26>
 80a1fdc:	4622      	mov	r2, r4
 80a1fde:	4659      	mov	r1, fp
 80a1fe0:	f7ff fd0e 	bl	80a1a00 <strncmp>
 80a1fe4:	b988      	cbnz	r0, 80a200a <_findenv_r+0x6e>
 80a1fe6:	f859 3c04 	ldr.w	r3, [r9, #-4]
 80a1fea:	191e      	adds	r6, r3, r4
 80a1fec:	5d1b      	ldrb	r3, [r3, r4]
 80a1fee:	2b3d      	cmp	r3, #61	; 0x3d
 80a1ff0:	d10b      	bne.n	80a200a <_findenv_r+0x6e>
 80a1ff2:	f8da 3000 	ldr.w	r3, [sl]
 80a1ff6:	4638      	mov	r0, r7
 80a1ff8:	1aed      	subs	r5, r5, r3
 80a1ffa:	10ad      	asrs	r5, r5, #2
 80a1ffc:	f8c8 5000 	str.w	r5, [r8]
 80a2000:	f000 f8ab 	bl	80a215a <__env_unlock>
 80a2004:	1c70      	adds	r0, r6, #1
 80a2006:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a200a:	464d      	mov	r5, r9
 80a200c:	e7e1      	b.n	80a1fd2 <_findenv_r+0x36>
 80a200e:	bf00      	nop
 80a2010:	200000cc 	.word	0x200000cc

080a2014 <_getenv_r>:
 80a2014:	b507      	push	{r0, r1, r2, lr}
 80a2016:	aa01      	add	r2, sp, #4
 80a2018:	f7ff ffc0 	bl	80a1f9c <_findenv_r>
 80a201c:	b003      	add	sp, #12
 80a201e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a2024 <__gettzinfo>:
 80a2024:	4800      	ldr	r0, [pc, #0]	; (80a2028 <__gettzinfo+0x4>)
 80a2026:	4770      	bx	lr
 80a2028:	2000008c 	.word	0x2000008c

080a202c <gmtime_r>:
 80a202c:	6802      	ldr	r2, [r0, #0]
 80a202e:	4b46      	ldr	r3, [pc, #280]	; (80a2148 <gmtime_r+0x11c>)
 80a2030:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2032:	fb92 f4f3 	sdiv	r4, r2, r3
 80a2036:	fb03 2214 	mls	r2, r3, r4, r2
 80a203a:	2a00      	cmp	r2, #0
 80a203c:	bfbc      	itt	lt
 80a203e:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 80a2042:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 80a2046:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 80a204a:	fb92 f3f0 	sdiv	r3, r2, r0
 80a204e:	fb00 2213 	mls	r2, r0, r3, r2
 80a2052:	f04f 003c 	mov.w	r0, #60	; 0x3c
 80a2056:	608b      	str	r3, [r1, #8]
 80a2058:	fb92 f3f0 	sdiv	r3, r2, r0
 80a205c:	fb00 2213 	mls	r2, r0, r3, r2
 80a2060:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
 80a2064:	bfac      	ite	ge
 80a2066:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
 80a206a:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
 80a206e:	604b      	str	r3, [r1, #4]
 80a2070:	600a      	str	r2, [r1, #0]
 80a2072:	2307      	movs	r3, #7
 80a2074:	1ce2      	adds	r2, r4, #3
 80a2076:	fb92 f3f3 	sdiv	r3, r2, r3
 80a207a:	4d34      	ldr	r5, [pc, #208]	; (80a214c <gmtime_r+0x120>)
 80a207c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a2080:	fb94 f5f5 	sdiv	r5, r4, r5
 80a2084:	1ad3      	subs	r3, r2, r3
 80a2086:	f648 62ac 	movw	r2, #36524	; 0x8eac
 80a208a:	f240 57b4 	movw	r7, #1460	; 0x5b4
 80a208e:	618b      	str	r3, [r1, #24]
 80a2090:	4b2f      	ldr	r3, [pc, #188]	; (80a2150 <gmtime_r+0x124>)
 80a2092:	4830      	ldr	r0, [pc, #192]	; (80a2154 <gmtime_r+0x128>)
 80a2094:	fb03 4405 	mla	r4, r3, r5, r4
 80a2098:	fbb4 f2f2 	udiv	r2, r4, r2
 80a209c:	fbb4 f3f7 	udiv	r3, r4, r7
 80a20a0:	fbb4 f0f0 	udiv	r0, r4, r0
 80a20a4:	4422      	add	r2, r4
 80a20a6:	1ad2      	subs	r2, r2, r3
 80a20a8:	f648 6694 	movw	r6, #36500	; 0x8e94
 80a20ac:	1a13      	subs	r3, r2, r0
 80a20ae:	f240 126d 	movw	r2, #365	; 0x16d
 80a20b2:	fbb3 f6f6 	udiv	r6, r3, r6
 80a20b6:	fbb3 f0f2 	udiv	r0, r3, r2
 80a20ba:	fbb3 f3f7 	udiv	r3, r3, r7
 80a20be:	4434      	add	r4, r6
 80a20c0:	1ae3      	subs	r3, r4, r3
 80a20c2:	fb02 3310 	mls	r3, r2, r0, r3
 80a20c6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80a20ca:	2499      	movs	r4, #153	; 0x99
 80a20cc:	3202      	adds	r2, #2
 80a20ce:	fbb2 f2f4 	udiv	r2, r2, r4
 80a20d2:	4354      	muls	r4, r2
 80a20d4:	1ca6      	adds	r6, r4, #2
 80a20d6:	2405      	movs	r4, #5
 80a20d8:	fbb6 f4f4 	udiv	r4, r6, r4
 80a20dc:	2a0a      	cmp	r2, #10
 80a20de:	bf34      	ite	cc
 80a20e0:	2602      	movcc	r6, #2
 80a20e2:	f06f 0609 	mvncs.w	r6, #9
 80a20e6:	4416      	add	r6, r2
 80a20e8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a20ec:	fb02 0505 	mla	r5, r2, r5, r0
 80a20f0:	1c5f      	adds	r7, r3, #1
 80a20f2:	2e01      	cmp	r6, #1
 80a20f4:	bf98      	it	ls
 80a20f6:	3501      	addls	r5, #1
 80a20f8:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80a20fc:	eba7 0704 	sub.w	r7, r7, r4
 80a2100:	d302      	bcc.n	80a2108 <gmtime_r+0xdc>
 80a2102:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
 80a2106:	e014      	b.n	80a2132 <gmtime_r+0x106>
 80a2108:	0782      	lsls	r2, r0, #30
 80a210a:	d105      	bne.n	80a2118 <gmtime_r+0xec>
 80a210c:	2464      	movs	r4, #100	; 0x64
 80a210e:	fbb0 f2f4 	udiv	r2, r0, r4
 80a2112:	fb04 0212 	mls	r2, r4, r2, r0
 80a2116:	b94a      	cbnz	r2, 80a212c <gmtime_r+0x100>
 80a2118:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a211c:	fbb0 f4f2 	udiv	r4, r0, r2
 80a2120:	fb02 0014 	mls	r0, r2, r4, r0
 80a2124:	fab0 f280 	clz	r2, r0
 80a2128:	0952      	lsrs	r2, r2, #5
 80a212a:	e000      	b.n	80a212e <gmtime_r+0x102>
 80a212c:	2201      	movs	r2, #1
 80a212e:	333b      	adds	r3, #59	; 0x3b
 80a2130:	441a      	add	r2, r3
 80a2132:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 80a2136:	2300      	movs	r3, #0
 80a2138:	61ca      	str	r2, [r1, #28]
 80a213a:	614d      	str	r5, [r1, #20]
 80a213c:	610e      	str	r6, [r1, #16]
 80a213e:	60cf      	str	r7, [r1, #12]
 80a2140:	620b      	str	r3, [r1, #32]
 80a2142:	4608      	mov	r0, r1
 80a2144:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a2146:	bf00      	nop
 80a2148:	00015180 	.word	0x00015180
 80a214c:	00023ab1 	.word	0x00023ab1
 80a2150:	fffdc54f 	.word	0xfffdc54f
 80a2154:	00023ab0 	.word	0x00023ab0

080a2158 <__env_lock>:
 80a2158:	4770      	bx	lr

080a215a <__env_unlock>:
 80a215a:	4770      	bx	lr

080a215c <dynalib_user>:
 80a215c:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a216c:	0000 0000 7254 6575 4600 6c61 6573 2500     ....True.False.%
 80a217c:	2073 202d 5344 3a54 2520 0073               s - DST: %s.

080a2188 <_ZTV9IPAddress>:
	...
 80a2190:	0587 080a 0577 080a 0579 080a 0066 6e6c     ....w...y...f.ln
 80a21a0:	6600 006e 6f63 6564 6400 7465 6961 006c     .fn.code.detail.
 80a21b0:	0a0d 2500 3130 7530 0020 205d 2500 0064     ...%010u .] .%d.
 80a21c0:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
 80a21d0:	203d 2500 0069 6564 6174 6c69 2073 203d     = .%i.details = 
 80a21e0:	6200 7561 0064 6553 6972 6c61 5500 4253     .baud.Serial.USB
 80a21f0:	6553 6972 6c61 0031 7974 6570 7000 7261     Serial1.type.par
 80a2200:	6d61 6300 646d 6900 0064 6e68 0064 7473     am.cmd.id.hnd.st
 80a2210:	6d72 6600 6c69 0074 766c 006c 6461 4864     rm.filt.lvl.addH
 80a2220:	6e61 6c64 7265 7200 6d65 766f 4865 6e61     andler.removeHan
 80a2230:	6c64 7265 6500 756e 486d 6e61 6c64 7265     dler.enumHandler
 80a2240:	0073 534a 4e4f 7453 6572 6d61 6f4c 4867     s.JSONStreamLogH
 80a2250:	6e61 6c64 7265 6100 7070 6e00 6e6f 0065     andler.app.none.
 80a2260:	7274 6361 0065 6e69 6f66 7700 7261 006e     trace.info.warn.
 80a2270:	7265 6f72 0072 6170 696e 0063 6c61 006c     error.panic.all.

080a2280 <_ZTVN5spark12NetworkClassE>:
	...
 80a2288:	064d 080a 0657 080a 0661 080a 066b 080a     M...W...a...k...
 80a2298:	0675 080a 0681 080a 068d 080a 0699 080a     u...............
 80a22a8:	06a1 080a 06ab 080a 06b5 080a               ............

080a22b4 <_ZTV8SPIClass>:
	...
 80a22bc:	0819 080a 081b 080a 2b25 3330 3a64 3025     ........%+03d:%0
 80a22cc:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
 80a22dc:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

080a22ec <_ZTV11USARTSerial>:
	...
 80a22f4:	0b4d 080a 0b9d 080a 0bab 080a 0719 080a     M...............
 80a2304:	0b61 080a 0b83 080a 0b6f 080a 0b97 080a     a.......o.......
 80a2314:	0b4f 080a 0b53 080a                         O...S...

080a231c <_ZTV9USBSerial>:
	...
 80a2324:	0c4d 080a 0c9d 080a 0cab 080a 0719 080a     M...............
 80a2334:	0c89 080a 0c4f 080a 0c65 080a 0c97 080a     ....O...e.......
 80a2344:	0c7b 080a 0c49 080a                         {...I...

080a234c <_ZTVN5spark9WiFiClassE>:
	...
 80a2354:	0e8f 080a 0e85 080a 0e7b 080a 0ded 080a     ........{.......
 80a2364:	0e6f 080a 0e63 080a 0e57 080a 0e4f 080a     o...c...W...O...
 80a2374:	0e45 080a 0e3b 080a 0df7 080a               E...;.......

080a2380 <day_name.4723>:
 80a2380:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
 80a2390:	6972 6153 4a74                                   riSat

080a2395 <mon_name.4724>:
 80a2395:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
 80a23a5:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
 80a23b5:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
 80a23c5:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
 80a23d5:	6425 000a                                   %d..

080a23d9 <_ctype_>:
 80a23d9:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 80a23e9:	2020 2020 2020 2020 2020 2020 2020 2020                     
 80a23f9:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 80a2409:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 80a2419:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 80a2429:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 80a2439:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 80a2449:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 80a2459:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

080a24dc <__sf_fake_stdin>:
	...

080a24fc <__sf_fake_stdout>:
	...

080a251c <__sf_fake_stderr>:
	...
 80a253c:	0043 0000                                   C...

080a2540 <__month_lengths>:
 80a2540:	001f 0000 001c 0000 001f 0000 001e 0000     ................
 80a2550:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80a2560:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80a2570:	001f 0000 001d 0000 001f 0000 001e 0000     ................
 80a2580:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80a2590:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80a25a0:	5a54 4700 544d 2500 3031 5e5b 2d30 2c39     TZ.GMT.%10[^0-9,
 80a25b0:	2d2b 255d 006e 254d 7568 6e25 252e 7568     +-]%n.M%hu%n.%hu
 80a25c0:	6e25 252e 7568 6e25 2f00 6825 2575 3a6e     %n.%hu%n./%hu%n:
 80a25d0:	6825 2575 3a6e 6825 2575 006e               %hu%n:%hu%n.

080a25dc <link_const_variable_data_end>:
 80a25dc:	080a0239 	.word	0x080a0239
 80a25e0:	080a063d 	.word	0x080a063d
 80a25e4:	080a0705 	.word	0x080a0705
 80a25e8:	080a07fd 	.word	0x080a07fd
 80a25ec:	080a0905 	.word	0x080a0905
 80a25f0:	080a0b39 	.word	0x080a0b39
 80a25f4:	080a0e99 	.word	0x080a0e99
 80a25f8:	080a0fe5 	.word	0x080a0fe5
 80a25fc:	080a1015 	.word	0x080a1015
 80a2600:	080a1069 	.word	0x080a1069
 80a2604:	080a112d 	.word	0x080a112d
 80a2608:	080a11b1 	.word	0x080a11b1
 80a260c:	080a1235 	.word	0x080a1235
