
/Users/chipmc/Documents/Maker/Particle/Projects/Daylight-Savings-Time/target/1.3.1/electron/Daylight-Savings-Time.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  08080018  08080018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002de4  0808001c  0808001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  08082e00  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000000c4  20000000  08082e04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000067c  200000c4  200000c4  000300c4  2**2
                  ALLOC
  6 .module_info_suffix 00000028  08082ec8  08082ec8  00022ec8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  08082ef0  08082ef0  00022ef0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0008c2c4  00000000  00000000  00022ef4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000ce00  00000000  00000000  000af1b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001166f  00000000  00000000  000bbfb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001af0  00000000  00000000  000cd627  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002c00  00000000  00000000  000cf117  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000210b5  00000000  00000000  000d1d17  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001d59c  00000000  00000000  000f2dcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a373d  00000000  00000000  00110368  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000b1d0  00000000  00000000  001b3aa8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0808001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 808001c:	4809      	ldr	r0, [pc, #36]	; (8080044 <link_dynalib_end+0x28>)
 808001e:	490a      	ldr	r1, [pc, #40]	; (8080048 <link_dynalib_end+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 8080020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080022:	4288      	cmp	r0, r1
 8080024:	d005      	beq.n	8080032 <module_user_pre_init+0x16>
 8080026:	4a09      	ldr	r2, [pc, #36]	; (808004c <link_dynalib_end+0x30>)
 8080028:	4282      	cmp	r2, r0
 808002a:	d002      	beq.n	8080032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 808002c:	1a12      	subs	r2, r2, r0
 808002e:	f001 fff7 	bl	8082020 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080032:	4807      	ldr	r0, [pc, #28]	; (8080050 <link_dynalib_end+0x34>)
 8080034:	4a07      	ldr	r2, [pc, #28]	; (8080054 <link_dynalib_end+0x38>)
 8080036:	2100      	movs	r1, #0
 8080038:	1a12      	subs	r2, r2, r0
 808003a:	f001 fffc 	bl	8082036 <memset>
    return &link_heap_start;
}
 808003e:	4806      	ldr	r0, [pc, #24]	; (8080058 <link_dynalib_end+0x3c>)
 8080040:	bd08      	pop	{r3, pc}
 8080042:	bf00      	nop
 8080044:	20000000 	.word	0x20000000
 8080048:	08082e04 	.word	0x08082e04
 808004c:	200000c4 	.word	0x200000c4
 8080050:	200000c4 	.word	0x200000c4
 8080054:	20000740 	.word	0x20000740
 8080058:	20000740 	.word	0x20000740

0808005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 808005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 808005e:	f001 faed 	bl	808163c <module_user_init_hook>
 8080062:	4b07      	ldr	r3, [pc, #28]	; (8080080 <module_user_init+0x24>)
 8080064:	4c07      	ldr	r4, [pc, #28]	; (8080084 <module_user_init+0x28>)
 8080066:	461e      	mov	r6, r3
 8080068:	1ae4      	subs	r4, r4, r3
 808006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 808006c:	2500      	movs	r5, #0
 808006e:	42a5      	cmp	r5, r4
 8080070:	d004      	beq.n	808007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 8080072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8080076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080078:	3501      	adds	r5, #1
 808007a:	e7f8      	b.n	808006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 808007c:	bd70      	pop	{r4, r5, r6, pc}
 808007e:	bf00      	nop
 8080080:	08082dc4 	.word	0x08082dc4
 8080084:	08082df8 	.word	0x08082df8

08080088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 8080088:	f000 b836 	b.w	80800f8 <setup>

0808008c <module_user_loop>:
}

void module_user_loop() {
 808008c:	b508      	push	{r3, lr}
    loop();
 808008e:	f000 f8cd 	bl	808022c <loop>
    _post_loop();
}
 8080092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 8080096:	f001 ba93 	b.w	80815c0 <_post_loop>

0808009a <_Znwj>:
 808009a:	f000 ba9d 	b.w	80805d8 <malloc>

0808009e <_ZdlPv>:
 808009e:	f000 baa3 	b.w	80805e8 <free>

080800a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80800a2:	7800      	ldrb	r0, [r0, #0]
 80800a4:	fab0 f080 	clz	r0, r0
 80800a8:	0940      	lsrs	r0, r0, #5
 80800aa:	4770      	bx	lr

080800ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800ac:	2301      	movs	r3, #1
 80800ae:	7003      	strb	r3, [r0, #0]
 80800b0:	4770      	bx	lr

080800b2 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.4.constprop.6>:
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
 80800b2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80800b4:	4605      	mov	r5, r0
 80800b6:	f89d 4018 	ldrb.w	r4, [sp, #24]
 80800ba:	4323      	orrs	r3, r4
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80800bc:	f88d 3000 	strb.w	r3, [sp]
 80800c0:	233c      	movs	r3, #60	; 0x3c
 80800c2:	f000 fcb1 	bl	8080a28 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }
 80800c6:	4628      	mov	r0, r5
 80800c8:	b003      	add	sp, #12
 80800ca:	bd30      	pop	{r4, r5, pc}

080800cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80800cc:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80800ce:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80800d0:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 80800d2:	b17c      	cbz	r4, 80800f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80800d4:	6863      	ldr	r3, [r4, #4]
 80800d6:	3b01      	subs	r3, #1
 80800d8:	6063      	str	r3, [r4, #4]
 80800da:	b95b      	cbnz	r3, 80800f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 80800dc:	6823      	ldr	r3, [r4, #0]
 80800de:	4620      	mov	r0, r4
 80800e0:	689b      	ldr	r3, [r3, #8]
 80800e2:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80800e4:	68a3      	ldr	r3, [r4, #8]
 80800e6:	3b01      	subs	r3, #1
 80800e8:	60a3      	str	r3, [r4, #8]
 80800ea:	b91b      	cbnz	r3, 80800f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80800ec:	6823      	ldr	r3, [r4, #0]
 80800ee:	4620      	mov	r0, r4
 80800f0:	68db      	ldr	r3, [r3, #12]
 80800f2:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 80800f4:	4628      	mov	r0, r5
 80800f6:	bd38      	pop	{r3, r4, r5, pc}

080800f8 <setup>:
const int numberOfTestPoints = 10;
const unsigned long testTimesAndDates[numberOfTestPoints] = {1547532000,1551592800,1552629600,1560578400,1571119200,1572588000,1572667200,1572674400,1572696000,1576389600 };
char data[128];     // Where we will store the output to Publish


void setup() {
 80800f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  // Put initialization like pinMode and begin functions here.

  Time.zone(Timezone);
 80800fa:	4b0c      	ldr	r3, [pc, #48]	; (808012c <setup+0x34>)
 80800fc:	6818      	ldr	r0, [r3, #0]
 80800fe:	f001 f811 	bl	8081124 <_ZN9TimeClass4zoneEf>
  Time.setDSTOffset(DSToffsetValue);
 8080102:	4b0b      	ldr	r3, [pc, #44]	; (8080130 <setup+0x38>)
 8080104:	6818      	ldr	r0, [r3, #0]
 8080106:	f001 f829 	bl	808115c <_ZN9TimeClass12setDSTOffsetEf>
 808010a:	4b0a      	ldr	r3, [pc, #40]	; (8080134 <setup+0x3c>)


  Particle.publish("Startup","Finished",PRIVATE);
 808010c:	2200      	movs	r2, #0
        val_(0) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 808010e:	781b      	ldrb	r3, [r3, #0]
 8080110:	4909      	ldr	r1, [pc, #36]	; (8080138 <setup+0x40>)
 8080112:	f88d 2000 	strb.w	r2, [sp]
 8080116:	a802      	add	r0, sp, #8
 8080118:	4a08      	ldr	r2, [pc, #32]	; (808013c <setup+0x44>)
 808011a:	f7ff ffca 	bl	80800b2 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.4.constprop.6>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 808011e:	a803      	add	r0, sp, #12
 8080120:	f7ff ffd4 	bl	80800cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

}
 8080124:	b005      	add	sp, #20
 8080126:	f85d fb04 	ldr.w	pc, [sp], #4
 808012a:	bf00      	nop
 808012c:	20000000 	.word	0x20000000
 8080130:	20000004 	.word	0x20000004
 8080134:	200000cc 	.word	0x200000cc
 8080138:	080828a1 	.word	0x080828a1
 808013c:	08082898 	.word	0x08082898

08080140 <_Z8isDSTusav>:
  delay(1000);

}


bool isDSTusa() { 
 8080140:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  // United States of America Summer Timer calculation (2am Local Time - 2nd Sunday in March/ 1st Sunday in November)
  // Adapted from @ScruffR's code posted here https://community.particle.io/t/daylight-savings-problem/38424/4
  // The code works in from months, days and hours in succession toward the two transitions
  int dayOfMonth = Time.day();
 8080142:	f001 f891 	bl	8081268 <_ZN9TimeClass3dayEv>
 8080146:	4606      	mov	r6, r0
  int month = Time.month();
 8080148:	f001 f89f 	bl	808128a <_ZN9TimeClass5monthEv>
 808014c:	4604      	mov	r4, r0
  int dayOfWeek = Time.weekday() - 1; // make Sunday 0 .. Saturday 6
 808014e:	f001 f895 	bl	808127c <_ZN9TimeClass7weekdayEv>

  // By Month - inside or outside the DST window
  if (month >= 4 && month <= 10)  
 8080152:	1f23      	subs	r3, r4, #4
 8080154:	2b06      	cmp	r3, #6
 8080156:	4d2c      	ldr	r5, [pc, #176]	; (8080208 <_Z8isDSTusav+0xc8>)
 8080158:	d805      	bhi.n	8080166 <_Z8isDSTusav+0x26>
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 808015a:	2200      	movs	r2, #0
  { // April to October definetly DST
    Particle.publish("isDSTusa","True - by month",PRIVATE);
 808015c:	f88d 2000 	strb.w	r2, [sp]
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 8080160:	782b      	ldrb	r3, [r5, #0]
 8080162:	4a2a      	ldr	r2, [pc, #168]	; (808020c <_Z8isDSTusav+0xcc>)
 8080164:	e03c      	b.n	80801e0 <_Z8isDSTusav+0xa0>
    return true;
  }
  else if (month < 3 || month > 11)
 8080166:	1ee3      	subs	r3, r4, #3
 8080168:	2b08      	cmp	r3, #8
 808016a:	d905      	bls.n	8080178 <_Z8isDSTusav+0x38>
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 808016c:	2400      	movs	r4, #0
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 808016e:	782b      	ldrb	r3, [r5, #0]
  { // before March or after October is definetly standard time
    Particle.publish("isDSTusa","False - by month",PRIVATE);
 8080170:	f88d 4000 	strb.w	r4, [sp]
 8080174:	4a26      	ldr	r2, [pc, #152]	; (8080210 <_Z8isDSTusav+0xd0>)
 8080176:	e03d      	b.n	80801f4 <_Z8isDSTusav+0xb4>
    return false;
  }

  // So, only March and November are left - time to look at days
  // November first
  boolean firstSundayOrAfter = (dayOfMonth - dayOfWeek > 0);
 8080178:	3801      	subs	r0, #1
 808017a:	1a30      	subs	r0, r6, r0
  if (!firstSundayOrAfter)
 808017c:	2800      	cmp	r0, #0
 808017e:	dc0d      	bgt.n	808019c <_Z8isDSTusav+0x5c>
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 8080180:	2200      	movs	r2, #0
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 8080182:	782b      	ldrb	r3, [r5, #0]
  { // before switching Sunday
    Particle.publish("isDSTusa","November - by day",PRIVATE);
 8080184:	f88d 2000 	strb.w	r2, [sp]
 8080188:	4922      	ldr	r1, [pc, #136]	; (8080214 <_Z8isDSTusav+0xd4>)
 808018a:	4a23      	ldr	r2, [pc, #140]	; (8080218 <_Z8isDSTusav+0xd8>)
 808018c:	a802      	add	r0, sp, #8
 808018e:	f7ff ff90 	bl	80800b2 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.4.constprop.6>
 8080192:	a803      	add	r0, sp, #12
 8080194:	f7ff ff9a 	bl	80800cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return (month == 11); // November DST will be true, March not
 8080198:	2c0b      	cmp	r4, #11
 808019a:	e00e      	b.n	80801ba <_Z8isDSTusav+0x7a>
  }

  // Now March
  boolean secondSundayOrAfter = (dayOfMonth - dayOfWeek > 8);
  if (secondSundayOrAfter)
 808019c:	2808      	cmp	r0, #8
 808019e:	dd10      	ble.n	80801c2 <_Z8isDSTusav+0x82>
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 80801a0:	2200      	movs	r2, #0
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 80801a2:	782b      	ldrb	r3, [r5, #0]
  { // AFTER the switching Sunday
    Particle.publish("isDSTusa","March - by day",PRIVATE);
 80801a4:	f88d 2000 	strb.w	r2, [sp]
 80801a8:	491a      	ldr	r1, [pc, #104]	; (8080214 <_Z8isDSTusav+0xd4>)
 80801aa:	4a1c      	ldr	r2, [pc, #112]	; (808021c <_Z8isDSTusav+0xdc>)
 80801ac:	a802      	add	r0, sp, #8
 80801ae:	f7ff ff80 	bl	80800b2 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.4.constprop.6>
 80801b2:	a803      	add	r0, sp, #12
 80801b4:	f7ff ff8a 	bl	80800cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return (month == 3); // for March DST is true, for October not
 80801b8:	2c03      	cmp	r4, #3
 80801ba:	bf14      	ite	ne
 80801bc:	2000      	movne	r0, #0
 80801be:	2001      	moveq	r0, #1
 80801c0:	e020      	b.n	8080204 <_Z8isDSTusav+0xc4>
  }

  int secSinceMidnightLocal = Time.now() % 86400;
 80801c2:	f001 f84a 	bl	808125a <_ZN9TimeClass3nowEv>
  boolean dayStartedAs = (month == 10); // DST in October, in March not
  // on switching Sunday we need to consider the time
  if (secSinceMidnightLocal >= 2*3600)
 80801c6:	4b16      	ldr	r3, [pc, #88]	; (8080220 <_Z8isDSTusav+0xe0>)
 80801c8:	2400      	movs	r4, #0
 80801ca:	fb90 f2f3 	sdiv	r2, r0, r3
 80801ce:	fb02 0013 	mls	r0, r2, r3, r0
 80801d2:	f5b0 5fe1 	cmp.w	r0, #7200	; 0x1c20
 80801d6:	782b      	ldrb	r3, [r5, #0]
  { //  In the US, Daylight Time is based on local time 
    Particle.publish("isDSTusa","After 2am - by hour",PRIVATE);
 80801d8:	f88d 4000 	strb.w	r4, [sp]
  }

  int secSinceMidnightLocal = Time.now() % 86400;
  boolean dayStartedAs = (month == 10); // DST in October, in March not
  // on switching Sunday we need to consider the time
  if (secSinceMidnightLocal >= 2*3600)
 80801dc:	db09      	blt.n	80801f2 <_Z8isDSTusav+0xb2>
  { //  In the US, Daylight Time is based on local time 
    Particle.publish("isDSTusa","After 2am - by hour",PRIVATE);
 80801de:	4a11      	ldr	r2, [pc, #68]	; (8080224 <_Z8isDSTusav+0xe4>)
 80801e0:	490c      	ldr	r1, [pc, #48]	; (8080214 <_Z8isDSTusav+0xd4>)
 80801e2:	a802      	add	r0, sp, #8
 80801e4:	f7ff ff65 	bl	80800b2 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.4.constprop.6>
 80801e8:	a803      	add	r0, sp, #12
 80801ea:	f7ff ff6f 	bl	80800cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return !dayStartedAs;
 80801ee:	2001      	movs	r0, #1
 80801f0:	e008      	b.n	8080204 <_Z8isDSTusav+0xc4>
  }
  Particle.publish("isDSTusa","Before 2am - by hour",PRIVATE);
 80801f2:	4a0d      	ldr	r2, [pc, #52]	; (8080228 <_Z8isDSTusav+0xe8>)
 80801f4:	4907      	ldr	r1, [pc, #28]	; (8080214 <_Z8isDSTusav+0xd4>)
 80801f6:	a802      	add	r0, sp, #8
 80801f8:	f7ff ff5b 	bl	80800b2 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.4.constprop.6>
 80801fc:	a803      	add	r0, sp, #12
 80801fe:	f7ff ff65 	bl	80800cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  return dayStartedAs;
 8080202:	4620      	mov	r0, r4
}
 8080204:	b004      	add	sp, #16
 8080206:	bd70      	pop	{r4, r5, r6, pc}
 8080208:	200000cc 	.word	0x200000cc
 808020c:	080828a9 	.word	0x080828a9
 8080210:	080828c2 	.word	0x080828c2
 8080214:	080828b9 	.word	0x080828b9
 8080218:	080828d3 	.word	0x080828d3
 808021c:	080828e5 	.word	0x080828e5
 8080220:	00015180 	.word	0x00015180
 8080224:	080828f4 	.word	0x080828f4
 8080228:	08082908 	.word	0x08082908

0808022c <loop>:
  Particle.publish("Startup","Finished",PRIVATE);

}


void loop() {
 808022c:	b530      	push	{r4, r5, lr}
  static unsigned int i=0;
  if (i >= numberOfTestPoints) i=0; 
 808022e:	4c24      	ldr	r4, [pc, #144]	; (80802c0 <loop+0x94>)
  Particle.publish("Startup","Finished",PRIVATE);

}


void loop() {
 8080230:	b087      	sub	sp, #28
  static unsigned int i=0;
  if (i >= numberOfTestPoints) i=0; 
 8080232:	6823      	ldr	r3, [r4, #0]
 8080234:	2b09      	cmp	r3, #9
 8080236:	bf84      	itt	hi
 8080238:	2300      	movhi	r3, #0
 808023a:	6023      	strhi	r3, [r4, #0]
  Time.setTime(testTimesAndDates[i]);                 // Note this is UTC time not local.  
 808023c:	6822      	ldr	r2, [r4, #0]
 808023e:	4b21      	ldr	r3, [pc, #132]	; (80802c4 <loop+0x98>)
 8080240:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8080244:	f000 ffbc 	bl	80811c0 <_ZN9TimeClass7setTimeEl>
  // Now, we will see if the Timezone calculations are correct
  isDSTusa() ? Time.beginDST() : Time.endDST();
 8080248:	f7ff ff7a 	bl	8080140 <_Z8isDSTusav>
 808024c:	b110      	cbz	r0, 8080254 <loop+0x28>
 808024e:	f000 ff9f 	bl	8081190 <_ZN9TimeClass8beginDSTEv>
 8080252:	e001      	b.n	8080258 <loop+0x2c>
 8080254:	f000 ffa6 	bl	80811a4 <_ZN9TimeClass6endDSTEv>
  delay(1000);
 8080258:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 808025c:	f000 f9fc 	bl	8080658 <delay>
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
 8080260:	f000 fffb 	bl	808125a <_ZN9TimeClass3nowEv>
 8080264:	4601      	mov	r1, r0
 8080266:	a802      	add	r0, sp, #8
 8080268:	f000 ffb4 	bl	80811d4 <_ZN9TimeClass7timeStrEl>
 808026c:	9d02      	ldr	r5, [sp, #8]
  snprintf(data, sizeof(data),"The time is %s and the TimeZone is %s", (const char*)Time.timeStr(), Time.isDST() ? "True" : "False");
 808026e:	f000 ff9f 	bl	80811b0 <_ZN9TimeClass5isDSTEv>
 8080272:	4b15      	ldr	r3, [pc, #84]	; (80802c8 <loop+0x9c>)
 8080274:	4a15      	ldr	r2, [pc, #84]	; (80802cc <loop+0xa0>)
 8080276:	2180      	movs	r1, #128	; 0x80
 8080278:	2800      	cmp	r0, #0
 808027a:	bf14      	ite	ne
 808027c:	4610      	movne	r0, r2
 808027e:	4618      	moveq	r0, r3
 8080280:	462b      	mov	r3, r5
 8080282:	9000      	str	r0, [sp, #0]
 8080284:	4a12      	ldr	r2, [pc, #72]	; (80802d0 <loop+0xa4>)
 8080286:	4813      	ldr	r0, [pc, #76]	; (80802d4 <loop+0xa8>)
 8080288:	f000 f9ce 	bl	8080628 <snprintf>
 808028c:	a802      	add	r0, sp, #8
 808028e:	f000 fe8f 	bl	8080fb0 <_ZN6StringD1Ev>
 8080292:	4b11      	ldr	r3, [pc, #68]	; (80802d8 <loop+0xac>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 8080294:	2200      	movs	r2, #0
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 8080296:	781b      	ldrb	r3, [r3, #0]
  Particle.publish("Test",data,PRIVATE);
 8080298:	4910      	ldr	r1, [pc, #64]	; (80802dc <loop+0xb0>)
 808029a:	f88d 2000 	strb.w	r2, [sp]
 808029e:	a802      	add	r0, sp, #8
 80802a0:	4a0c      	ldr	r2, [pc, #48]	; (80802d4 <loop+0xa8>)
 80802a2:	f7ff ff06 	bl	80800b2 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.4.constprop.6>
 80802a6:	a803      	add	r0, sp, #12
 80802a8:	f7ff ff10 	bl	80800cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  i++;
 80802ac:	6823      	ldr	r3, [r4, #0]
  delay(1000);
 80802ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  // Now, we will see if the Timezone calculations are correct
  isDSTusa() ? Time.beginDST() : Time.endDST();
  delay(1000);
  snprintf(data, sizeof(data),"The time is %s and the TimeZone is %s", (const char*)Time.timeStr(), Time.isDST() ? "True" : "False");
  Particle.publish("Test",data,PRIVATE);
  i++;
 80802b2:	3301      	adds	r3, #1
 80802b4:	6023      	str	r3, [r4, #0]
  delay(1000);
 80802b6:	f000 f9cf 	bl	8080658 <delay>

}
 80802ba:	b007      	add	sp, #28
 80802bc:	bd30      	pop	{r4, r5, pc}
 80802be:	bf00      	nop
 80802c0:	200000c8 	.word	0x200000c8
 80802c4:	08082870 	.word	0x08082870
 80802c8:	08082922 	.word	0x08082922
 80802cc:	0808291d 	.word	0x0808291d
 80802d0:	08082928 	.word	0x08082928
 80802d4:	200000cd 	.word	0x200000cd
 80802d8:	200000cc 	.word	0x200000cc
 80802dc:	0808294e 	.word	0x0808294e

080802e0 <_GLOBAL__sub_I_Timezone>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80802e0:	4b02      	ldr	r3, [pc, #8]	; (80802ec <_GLOBAL__sub_I_Timezone+0xc>)
 80802e2:	2201      	movs	r2, #1
 80802e4:	701a      	strb	r2, [r3, #0]
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80802e6:	f000 b83b 	b.w	8080360 <HAL_Pin_Map>
 80802ea:	bf00      	nop
 80802ec:	200000cc 	.word	0x200000cc

080802f0 <inet_gethostbyname>:
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
DYNALIB_FN(11, hal_cellular, cellular_credentials_get, CellularCredentials*(void*))
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80802f0:	b508      	push	{r3, lr}
 80802f2:	4b02      	ldr	r3, [pc, #8]	; (80802fc <inet_gethostbyname+0xc>)
 80802f4:	681b      	ldr	r3, [r3, #0]
 80802f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80802f8:	9301      	str	r3, [sp, #4]
 80802fa:	bd08      	pop	{r3, pc}
 80802fc:	08060020 	.word	0x08060020

08080300 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 8080300:	b508      	push	{r3, lr}
 8080302:	4b02      	ldr	r3, [pc, #8]	; (808030c <os_mutex_create+0xc>)
 8080304:	681b      	ldr	r3, [r3, #0]
 8080306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8080308:	9301      	str	r3, [sp, #4]
 808030a:	bd08      	pop	{r3, pc}
 808030c:	080401d0 	.word	0x080401d0

08080310 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 8080310:	b508      	push	{r3, lr}
 8080312:	4b02      	ldr	r3, [pc, #8]	; (808031c <HAL_RNG_GetRandomNumber+0xc>)
 8080314:	681b      	ldr	r3, [r3, #0]
 8080316:	685b      	ldr	r3, [r3, #4]
 8080318:	9301      	str	r3, [sp, #4]
 808031a:	bd08      	pop	{r3, pc}
 808031c:	0804019c 	.word	0x0804019c

08080320 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 8080320:	b508      	push	{r3, lr}
 8080322:	4b02      	ldr	r3, [pc, #8]	; (808032c <HAL_Timer_Get_Milli_Seconds+0xc>)
 8080324:	681b      	ldr	r3, [r3, #0]
 8080326:	695b      	ldr	r3, [r3, #20]
 8080328:	9301      	str	r3, [sp, #4]
 808032a:	bd08      	pop	{r3, pc}
 808032c:	0804019c 	.word	0x0804019c

08080330 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
 8080330:	b508      	push	{r3, lr}
 8080332:	4b02      	ldr	r3, [pc, #8]	; (808033c <HAL_RTC_Get_UnixTime+0xc>)
 8080334:	681b      	ldr	r3, [r3, #0]
 8080336:	69db      	ldr	r3, [r3, #28]
 8080338:	9301      	str	r3, [sp, #4]
 808033a:	bd08      	pop	{r3, pc}
 808033c:	0804019c 	.word	0x0804019c

08080340 <HAL_RTC_Set_UnixTime>:
DYNALIB_FN(BASE_IDX + 6, hal, HAL_RTC_Set_UnixTime, void(time_t))
 8080340:	b508      	push	{r3, lr}
 8080342:	4b02      	ldr	r3, [pc, #8]	; (808034c <HAL_RTC_Set_UnixTime+0xc>)
 8080344:	681b      	ldr	r3, [r3, #0]
 8080346:	6a1b      	ldr	r3, [r3, #32]
 8080348:	9301      	str	r3, [sp, #4]
 808034a:	bd08      	pop	{r3, pc}
 808034c:	0804019c 	.word	0x0804019c

08080350 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
 8080350:	b508      	push	{r3, lr}
 8080352:	4b02      	ldr	r3, [pc, #8]	; (808035c <HAL_RTC_Time_Is_Valid+0xc>)
 8080354:	681b      	ldr	r3, [r3, #0]
 8080356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8080358:	9301      	str	r3, [sp, #4]
 808035a:	bd08      	pop	{r3, pc}
 808035c:	0804019c 	.word	0x0804019c

08080360 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 8080360:	b508      	push	{r3, lr}
 8080362:	4b02      	ldr	r3, [pc, #8]	; (808036c <HAL_Pin_Map+0xc>)
 8080364:	681b      	ldr	r3, [r3, #0]
 8080366:	681b      	ldr	r3, [r3, #0]
 8080368:	9301      	str	r3, [sp, #4]
 808036a:	bd08      	pop	{r3, pc}
 808036c:	080401b0 	.word	0x080401b0

08080370 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 8080370:	b508      	push	{r3, lr}
 8080372:	4b02      	ldr	r3, [pc, #8]	; (808037c <HAL_SPI_Init+0xc>)
 8080374:	681b      	ldr	r3, [r3, #0]
 8080376:	69db      	ldr	r3, [r3, #28]
 8080378:	9301      	str	r3, [sp, #4]
 808037a:	bd08      	pop	{r3, pc}
 808037c:	080401b4 	.word	0x080401b4

08080380 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 8080380:	b508      	push	{r3, lr}
 8080382:	4b02      	ldr	r3, [pc, #8]	; (808038c <HAL_USART_Init+0xc>)
 8080384:	681b      	ldr	r3, [r3, #0]
 8080386:	699b      	ldr	r3, [r3, #24]
 8080388:	9301      	str	r3, [sp, #4]
 808038a:	bd08      	pop	{r3, pc}
 808038c:	080401c4 	.word	0x080401c4

08080390 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 8080390:	b508      	push	{r3, lr}
 8080392:	4b02      	ldr	r3, [pc, #8]	; (808039c <HAL_USART_Write_Data+0xc>)
 8080394:	681b      	ldr	r3, [r3, #0]
 8080396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8080398:	9301      	str	r3, [sp, #4]
 808039a:	bd08      	pop	{r3, pc}
 808039c:	080401c4 	.word	0x080401c4

080803a0 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80803a0:	b508      	push	{r3, lr}
 80803a2:	4b02      	ldr	r3, [pc, #8]	; (80803ac <HAL_USART_Available_Data+0xc>)
 80803a4:	681b      	ldr	r3, [r3, #0]
 80803a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80803a8:	9301      	str	r3, [sp, #4]
 80803aa:	bd08      	pop	{r3, pc}
 80803ac:	080401c4 	.word	0x080401c4

080803b0 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80803b0:	b508      	push	{r3, lr}
 80803b2:	4b02      	ldr	r3, [pc, #8]	; (80803bc <HAL_USART_Read_Data+0xc>)
 80803b4:	681b      	ldr	r3, [r3, #0]
 80803b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80803b8:	9301      	str	r3, [sp, #4]
 80803ba:	bd08      	pop	{r3, pc}
 80803bc:	080401c4 	.word	0x080401c4

080803c0 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80803c0:	b508      	push	{r3, lr}
 80803c2:	4b02      	ldr	r3, [pc, #8]	; (80803cc <HAL_USART_Peek_Data+0xc>)
 80803c4:	681b      	ldr	r3, [r3, #0]
 80803c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80803c8:	9301      	str	r3, [sp, #4]
 80803ca:	bd08      	pop	{r3, pc}
 80803cc:	080401c4 	.word	0x080401c4

080803d0 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80803d0:	b508      	push	{r3, lr}
 80803d2:	4b02      	ldr	r3, [pc, #8]	; (80803dc <HAL_USART_Flush_Data+0xc>)
 80803d4:	681b      	ldr	r3, [r3, #0]
 80803d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80803d8:	9301      	str	r3, [sp, #4]
 80803da:	bd08      	pop	{r3, pc}
 80803dc:	080401c4 	.word	0x080401c4

080803e0 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80803e0:	b508      	push	{r3, lr}
 80803e2:	4b02      	ldr	r3, [pc, #8]	; (80803ec <HAL_USART_Available_Data_For_Write+0xc>)
 80803e4:	681b      	ldr	r3, [r3, #0]
 80803e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80803e8:	9301      	str	r3, [sp, #4]
 80803ea:	bd08      	pop	{r3, pc}
 80803ec:	080401c4 	.word	0x080401c4

080803f0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80803f0:	b508      	push	{r3, lr}
 80803f2:	4b02      	ldr	r3, [pc, #8]	; (80803fc <HAL_USB_USART_Init+0xc>)
 80803f4:	681b      	ldr	r3, [r3, #0]
 80803f6:	681b      	ldr	r3, [r3, #0]
 80803f8:	9301      	str	r3, [sp, #4]
 80803fa:	bd08      	pop	{r3, pc}
 80803fc:	0806001c 	.word	0x0806001c

08080400 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 8080400:	b508      	push	{r3, lr}
 8080402:	4b02      	ldr	r3, [pc, #8]	; (808040c <HAL_USB_USART_Available_Data+0xc>)
 8080404:	681b      	ldr	r3, [r3, #0]
 8080406:	691b      	ldr	r3, [r3, #16]
 8080408:	9301      	str	r3, [sp, #4]
 808040a:	bd08      	pop	{r3, pc}
 808040c:	0806001c 	.word	0x0806001c

08080410 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 8080410:	b508      	push	{r3, lr}
 8080412:	4b02      	ldr	r3, [pc, #8]	; (808041c <HAL_USB_USART_Available_Data_For_Write+0xc>)
 8080414:	681b      	ldr	r3, [r3, #0]
 8080416:	695b      	ldr	r3, [r3, #20]
 8080418:	9301      	str	r3, [sp, #4]
 808041a:	bd08      	pop	{r3, pc}
 808041c:	0806001c 	.word	0x0806001c

08080420 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8080420:	b508      	push	{r3, lr}
 8080422:	4b02      	ldr	r3, [pc, #8]	; (808042c <HAL_USB_USART_Receive_Data+0xc>)
 8080424:	681b      	ldr	r3, [r3, #0]
 8080426:	699b      	ldr	r3, [r3, #24]
 8080428:	9301      	str	r3, [sp, #4]
 808042a:	bd08      	pop	{r3, pc}
 808042c:	0806001c 	.word	0x0806001c

08080430 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8080430:	b508      	push	{r3, lr}
 8080432:	4b02      	ldr	r3, [pc, #8]	; (808043c <HAL_USB_USART_Send_Data+0xc>)
 8080434:	681b      	ldr	r3, [r3, #0]
 8080436:	69db      	ldr	r3, [r3, #28]
 8080438:	9301      	str	r3, [sp, #4]
 808043a:	bd08      	pop	{r3, pc}
 808043c:	0806001c 	.word	0x0806001c

08080440 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 8080440:	b508      	push	{r3, lr}
 8080442:	4b02      	ldr	r3, [pc, #8]	; (808044c <HAL_USB_USART_Flush_Data+0xc>)
 8080444:	681b      	ldr	r3, [r3, #0]
 8080446:	6a1b      	ldr	r3, [r3, #32]
 8080448:	9301      	str	r3, [sp, #4]
 808044a:	bd08      	pop	{r3, pc}
 808044c:	0806001c 	.word	0x0806001c

08080450 <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 8080450:	b508      	push	{r3, lr}
 8080452:	4b02      	ldr	r3, [pc, #8]	; (808045c <system_mode+0xc>)
 8080454:	681b      	ldr	r3, [r3, #0]
 8080456:	681b      	ldr	r3, [r3, #0]
 8080458:	9301      	str	r3, [sp, #4]
 808045a:	bd08      	pop	{r3, pc}
 808045c:	080401a4 	.word	0x080401a4

08080460 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 8080460:	b508      	push	{r3, lr}
 8080462:	4b02      	ldr	r3, [pc, #8]	; (808046c <set_system_mode+0xc>)
 8080464:	681b      	ldr	r3, [r3, #0]
 8080466:	685b      	ldr	r3, [r3, #4]
 8080468:	9301      	str	r3, [sp, #4]
 808046a:	bd08      	pop	{r3, pc}
 808046c:	080401a4 	.word	0x080401a4

08080470 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 8080470:	b508      	push	{r3, lr}
 8080472:	4b02      	ldr	r3, [pc, #8]	; (808047c <system_delay_ms+0xc>)
 8080474:	681b      	ldr	r3, [r3, #0]
 8080476:	695b      	ldr	r3, [r3, #20]
 8080478:	9301      	str	r3, [sp, #4]
 808047a:	bd08      	pop	{r3, pc}
 808047c:	080401a4 	.word	0x080401a4

08080480 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 8080480:	b508      	push	{r3, lr}
 8080482:	4b02      	ldr	r3, [pc, #8]	; (808048c <application_thread_current+0xc>)
 8080484:	681b      	ldr	r3, [r3, #0]
 8080486:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8080488:	9301      	str	r3, [sp, #4]
 808048a:	bd08      	pop	{r3, pc}
 808048c:	080401a4 	.word	0x080401a4

08080490 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 8080490:	b508      	push	{r3, lr}
 8080492:	4b02      	ldr	r3, [pc, #8]	; (808049c <application_thread_invoke+0xc>)
 8080494:	681b      	ldr	r3, [r3, #0]
 8080496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8080498:	9301      	str	r3, [sp, #4]
 808049a:	bd08      	pop	{r3, pc}
 808049c:	080401a4 	.word	0x080401a4

080804a0 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 80804a0:	b508      	push	{r3, lr}
 80804a2:	4b02      	ldr	r3, [pc, #8]	; (80804ac <system_thread_get_state+0xc>)
 80804a4:	681b      	ldr	r3, [r3, #0]
 80804a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80804a8:	9301      	str	r3, [sp, #4]
 80804aa:	bd08      	pop	{r3, pc}
 80804ac:	080401a4 	.word	0x080401a4

080804b0 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
 80804b0:	b508      	push	{r3, lr}
 80804b2:	4b02      	ldr	r3, [pc, #8]	; (80804bc <system_notify_time_changed+0xc>)
 80804b4:	681b      	ldr	r3, [r3, #0]
 80804b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80804b8:	9301      	str	r3, [sp, #4]
 80804ba:	bd08      	pop	{r3, pc}
 80804bc:	080401a4 	.word	0x080401a4

080804c0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80804c0:	b508      	push	{r3, lr}
 80804c2:	4b03      	ldr	r3, [pc, #12]	; (80804d0 <system_ctrl_set_app_request_handler+0x10>)
 80804c4:	681b      	ldr	r3, [r3, #0]
 80804c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80804ca:	9301      	str	r3, [sp, #4]
 80804cc:	bd08      	pop	{r3, pc}
 80804ce:	0000      	.short	0x0000
 80804d0:	080401a4 	.word	0x080401a4

080804d4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80804d4:	b508      	push	{r3, lr}
 80804d6:	4b03      	ldr	r3, [pc, #12]	; (80804e4 <system_ctrl_set_result+0x10>)
 80804d8:	681b      	ldr	r3, [r3, #0]
 80804da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80804de:	9301      	str	r3, [sp, #4]
 80804e0:	bd08      	pop	{r3, pc}
 80804e2:	0000      	.short	0x0000
 80804e4:	080401a4 	.word	0x080401a4

080804e8 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80804e8:	b508      	push	{r3, lr}
 80804ea:	4b02      	ldr	r3, [pc, #8]	; (80804f4 <spark_process+0xc>)
 80804ec:	681b      	ldr	r3, [r3, #0]
 80804ee:	689b      	ldr	r3, [r3, #8]
 80804f0:	9301      	str	r3, [sp, #4]
 80804f2:	bd08      	pop	{r3, pc}
 80804f4:	080401cc 	.word	0x080401cc

080804f8 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80804f8:	b508      	push	{r3, lr}
 80804fa:	4b02      	ldr	r3, [pc, #8]	; (8080504 <spark_cloud_flag_connected+0xc>)
 80804fc:	681b      	ldr	r3, [r3, #0]
 80804fe:	695b      	ldr	r3, [r3, #20]
 8080500:	9301      	str	r3, [sp, #4]
 8080502:	bd08      	pop	{r3, pc}
 8080504:	080401cc 	.word	0x080401cc

08080508 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 8080508:	b508      	push	{r3, lr}
 808050a:	4b02      	ldr	r3, [pc, #8]	; (8080514 <spark_send_event+0xc>)
 808050c:	681b      	ldr	r3, [r3, #0]
 808050e:	6a1b      	ldr	r3, [r3, #32]
 8080510:	9301      	str	r3, [sp, #4]
 8080512:	bd08      	pop	{r3, pc}
 8080514:	080401cc 	.word	0x080401cc

08080518 <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 8080518:	b508      	push	{r3, lr}
 808051a:	4b02      	ldr	r3, [pc, #8]	; (8080524 <spark_sync_time_pending+0xc>)
 808051c:	681b      	ldr	r3, [r3, #0]
 808051e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8080520:	9301      	str	r3, [sp, #4]
 8080522:	bd08      	pop	{r3, pc}
 8080524:	080401cc 	.word	0x080401cc

08080528 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 8080528:	b508      	push	{r3, lr}
 808052a:	4b02      	ldr	r3, [pc, #8]	; (8080534 <spark_set_random_seed_from_cloud_handler+0xc>)
 808052c:	681b      	ldr	r3, [r3, #0]
 808052e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8080530:	9301      	str	r3, [sp, #4]
 8080532:	bd08      	pop	{r3, pc}
 8080534:	080401cc 	.word	0x080401cc

08080538 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 8080538:	b508      	push	{r3, lr}
 808053a:	4b02      	ldr	r3, [pc, #8]	; (8080544 <network_connect+0xc>)
 808053c:	681b      	ldr	r3, [r3, #0]
 808053e:	685b      	ldr	r3, [r3, #4]
 8080540:	9301      	str	r3, [sp, #4]
 8080542:	bd08      	pop	{r3, pc}
 8080544:	080401c8 	.word	0x080401c8

08080548 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 8080548:	b508      	push	{r3, lr}
 808054a:	4b02      	ldr	r3, [pc, #8]	; (8080554 <network_connecting+0xc>)
 808054c:	681b      	ldr	r3, [r3, #0]
 808054e:	689b      	ldr	r3, [r3, #8]
 8080550:	9301      	str	r3, [sp, #4]
 8080552:	bd08      	pop	{r3, pc}
 8080554:	080401c8 	.word	0x080401c8

08080558 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 8080558:	b508      	push	{r3, lr}
 808055a:	4b02      	ldr	r3, [pc, #8]	; (8080564 <network_disconnect+0xc>)
 808055c:	681b      	ldr	r3, [r3, #0]
 808055e:	68db      	ldr	r3, [r3, #12]
 8080560:	9301      	str	r3, [sp, #4]
 8080562:	bd08      	pop	{r3, pc}
 8080564:	080401c8 	.word	0x080401c8

08080568 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 8080568:	b508      	push	{r3, lr}
 808056a:	4b02      	ldr	r3, [pc, #8]	; (8080574 <network_ready+0xc>)
 808056c:	681b      	ldr	r3, [r3, #0]
 808056e:	691b      	ldr	r3, [r3, #16]
 8080570:	9301      	str	r3, [sp, #4]
 8080572:	bd08      	pop	{r3, pc}
 8080574:	080401c8 	.word	0x080401c8

08080578 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 8080578:	b508      	push	{r3, lr}
 808057a:	4b02      	ldr	r3, [pc, #8]	; (8080584 <network_on+0xc>)
 808057c:	681b      	ldr	r3, [r3, #0]
 808057e:	695b      	ldr	r3, [r3, #20]
 8080580:	9301      	str	r3, [sp, #4]
 8080582:	bd08      	pop	{r3, pc}
 8080584:	080401c8 	.word	0x080401c8

08080588 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 8080588:	b508      	push	{r3, lr}
 808058a:	4b02      	ldr	r3, [pc, #8]	; (8080594 <network_off+0xc>)
 808058c:	681b      	ldr	r3, [r3, #0]
 808058e:	699b      	ldr	r3, [r3, #24]
 8080590:	9301      	str	r3, [sp, #4]
 8080592:	bd08      	pop	{r3, pc}
 8080594:	080401c8 	.word	0x080401c8

08080598 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 8080598:	b508      	push	{r3, lr}
 808059a:	4b02      	ldr	r3, [pc, #8]	; (80805a4 <network_listen+0xc>)
 808059c:	681b      	ldr	r3, [r3, #0]
 808059e:	69db      	ldr	r3, [r3, #28]
 80805a0:	9301      	str	r3, [sp, #4]
 80805a2:	bd08      	pop	{r3, pc}
 80805a4:	080401c8 	.word	0x080401c8

080805a8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80805a8:	b508      	push	{r3, lr}
 80805aa:	4b02      	ldr	r3, [pc, #8]	; (80805b4 <network_listening+0xc>)
 80805ac:	681b      	ldr	r3, [r3, #0]
 80805ae:	6a1b      	ldr	r3, [r3, #32]
 80805b0:	9301      	str	r3, [sp, #4]
 80805b2:	bd08      	pop	{r3, pc}
 80805b4:	080401c8 	.word	0x080401c8

080805b8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80805b8:	b508      	push	{r3, lr}
 80805ba:	4b02      	ldr	r3, [pc, #8]	; (80805c4 <network_set_listen_timeout+0xc>)
 80805bc:	681b      	ldr	r3, [r3, #0]
 80805be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80805c0:	9301      	str	r3, [sp, #4]
 80805c2:	bd08      	pop	{r3, pc}
 80805c4:	080401c8 	.word	0x080401c8

080805c8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80805c8:	b508      	push	{r3, lr}
 80805ca:	4b02      	ldr	r3, [pc, #8]	; (80805d4 <network_get_listen_timeout+0xc>)
 80805cc:	681b      	ldr	r3, [r3, #0]
 80805ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80805d0:	9301      	str	r3, [sp, #4]
 80805d2:	bd08      	pop	{r3, pc}
 80805d4:	080401c8 	.word	0x080401c8

080805d8 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80805d8:	b508      	push	{r3, lr}
 80805da:	4b02      	ldr	r3, [pc, #8]	; (80805e4 <malloc+0xc>)
 80805dc:	681b      	ldr	r3, [r3, #0]
 80805de:	681b      	ldr	r3, [r3, #0]
 80805e0:	9301      	str	r3, [sp, #4]
 80805e2:	bd08      	pop	{r3, pc}
 80805e4:	080401a0 	.word	0x080401a0

080805e8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80805e8:	b508      	push	{r3, lr}
 80805ea:	4b02      	ldr	r3, [pc, #8]	; (80805f4 <free+0xc>)
 80805ec:	681b      	ldr	r3, [r3, #0]
 80805ee:	685b      	ldr	r3, [r3, #4]
 80805f0:	9301      	str	r3, [sp, #4]
 80805f2:	bd08      	pop	{r3, pc}
 80805f4:	080401a0 	.word	0x080401a0

080805f8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80805f8:	b508      	push	{r3, lr}
 80805fa:	4b02      	ldr	r3, [pc, #8]	; (8080604 <realloc+0xc>)
 80805fc:	681b      	ldr	r3, [r3, #0]
 80805fe:	689b      	ldr	r3, [r3, #8]
 8080600:	9301      	str	r3, [sp, #4]
 8080602:	bd08      	pop	{r3, pc}
 8080604:	080401a0 	.word	0x080401a0

08080608 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 8080608:	b508      	push	{r3, lr}
 808060a:	4b02      	ldr	r3, [pc, #8]	; (8080614 <siprintf+0xc>)
 808060c:	681b      	ldr	r3, [r3, #0]
 808060e:	691b      	ldr	r3, [r3, #16]
 8080610:	9301      	str	r3, [sp, #4]
 8080612:	bd08      	pop	{r3, pc}
 8080614:	080401a0 	.word	0x080401a0

08080618 <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
 8080618:	b508      	push	{r3, lr}
 808061a:	4b02      	ldr	r3, [pc, #8]	; (8080624 <siscanf+0xc>)
 808061c:	681b      	ldr	r3, [r3, #0]
 808061e:	699b      	ldr	r3, [r3, #24]
 8080620:	9301      	str	r3, [sp, #4]
 8080622:	bd08      	pop	{r3, pc}
 8080624:	080401a0 	.word	0x080401a0

08080628 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 8080628:	b508      	push	{r3, lr}
 808062a:	4b02      	ldr	r3, [pc, #8]	; (8080634 <snprintf+0xc>)
 808062c:	681b      	ldr	r3, [r3, #0]
 808062e:	69db      	ldr	r3, [r3, #28]
 8080630:	9301      	str	r3, [sp, #4]
 8080632:	bd08      	pop	{r3, pc}
 8080634:	080401a0 	.word	0x080401a0

08080638 <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 8080638:	b508      	push	{r3, lr}
 808063a:	4b02      	ldr	r3, [pc, #8]	; (8080644 <abort+0xc>)
 808063c:	681b      	ldr	r3, [r3, #0]
 808063e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8080640:	9301      	str	r3, [sp, #4]
 8080642:	bd08      	pop	{r3, pc}
 8080644:	080401a0 	.word	0x080401a0

08080648 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 8080648:	b508      	push	{r3, lr}
 808064a:	4b02      	ldr	r3, [pc, #8]	; (8080654 <_malloc_r+0xc>)
 808064c:	681b      	ldr	r3, [r3, #0]
 808064e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8080650:	9301      	str	r3, [sp, #4]
 8080652:	bd08      	pop	{r3, pc}
 8080654:	080401a0 	.word	0x080401a0

08080658 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 8080658:	2100      	movs	r1, #0
 808065a:	f7ff bf09 	b.w	8080470 <system_delay_ms>

0808065e <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 808065e:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8080660:	6883      	ldr	r3, [r0, #8]
 8080662:	4604      	mov	r4, r0
 8080664:	b90b      	cbnz	r3, 808066a <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 8080666:	f001 f862 	bl	808172e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808066a:	68c3      	ldr	r3, [r0, #12]
 808066c:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 808066e:	68a3      	ldr	r3, [r4, #8]
 8080670:	b11b      	cbz	r3, 808067a <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8080672:	2203      	movs	r2, #3
 8080674:	4621      	mov	r1, r4
 8080676:	4620      	mov	r0, r4
 8080678:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 808067a:	4620      	mov	r0, r4
}
 808067c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 8080680:	2110      	movs	r1, #16
 8080682:	f001 b852 	b.w	808172a <_ZdlPvj>

08080686 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 8080686:	2200      	movs	r2, #0
 8080688:	4611      	mov	r1, r2
 808068a:	6840      	ldr	r0, [r0, #4]
 808068c:	f7ff bf6c 	b.w	8080568 <network_ready>

08080690 <_ZN5spark13CellularClass7resolveEPKc>:
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8080690:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    {
        HAL_IPAddress ip = {0};
 8080694:	2600      	movs	r6, #0
 8080696:	ac04      	add	r4, sp, #16
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8080698:	4605      	mov	r5, r0
    {
        HAL_IPAddress ip = {0};
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 808069a:	4610      	mov	r0, r2
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 808069c:	4688      	mov	r8, r1
 808069e:	4617      	mov	r7, r2
    {
        HAL_IPAddress ip = {0};
 80806a0:	f844 6d04 	str.w	r6, [r4, #-4]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80806a4:	f001 fd25 	bl	80820f2 <strlen>
 80806a8:	9600      	str	r6, [sp, #0]
 80806aa:	b281      	uxth	r1, r0
 80806ac:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80806b0:	4622      	mov	r2, r4
 80806b2:	4638      	mov	r0, r7
 80806b4:	f7ff fe1c 	bl	80802f0 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80806b8:	b120      	cbz	r0, 80806c4 <_ZN5spark13CellularClass7resolveEPKc+0x34>
 80806ba:	4631      	mov	r1, r6
 80806bc:	4628      	mov	r0, r5
 80806be:	f000 fb67 	bl	8080d90 <_ZN9IPAddressC1Em>
 80806c2:	e003      	b.n	80806cc <_ZN5spark13CellularClass7resolveEPKc+0x3c>
 80806c4:	4621      	mov	r1, r4
 80806c6:	4628      	mov	r0, r5
 80806c8:	f000 fb5a 	bl	8080d80 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80806cc:	4628      	mov	r0, r5
 80806ce:	b004      	add	sp, #16
 80806d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080806d4 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80806d4:	2200      	movs	r2, #0
 80806d6:	4611      	mov	r1, r2
 80806d8:	6840      	ldr	r0, [r0, #4]
 80806da:	f7ff bf65 	b.w	80805a8 <network_listening>

080806de <_ZN5spark13CellularClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80806de:	2200      	movs	r2, #0
 80806e0:	4611      	mov	r1, r2
 80806e2:	6840      	ldr	r0, [r0, #4]
 80806e4:	f7ff bf70 	b.w	80805c8 <network_get_listen_timeout>

080806e8 <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80806e8:	2200      	movs	r2, #0
 80806ea:	6840      	ldr	r0, [r0, #4]
 80806ec:	f7ff bf64 	b.w	80805b8 <network_set_listen_timeout>

080806f0 <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80806f0:	2200      	movs	r2, #0
 80806f2:	f081 0101 	eor.w	r1, r1, #1
 80806f6:	6840      	ldr	r0, [r0, #4]
 80806f8:	f7ff bf4e 	b.w	8080598 <network_listen>

080806fc <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
 80806fc:	2300      	movs	r3, #0
 80806fe:	461a      	mov	r2, r3
 8080700:	4619      	mov	r1, r3
 8080702:	6840      	ldr	r0, [r0, #4]
 8080704:	f7ff bf40 	b.w	8080588 <network_off>

08080708 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
 8080708:	2300      	movs	r3, #0
 808070a:	461a      	mov	r2, r3
 808070c:	4619      	mov	r1, r3
 808070e:	6840      	ldr	r0, [r0, #4]
 8080710:	f7ff bf32 	b.w	8080578 <network_on>

08080714 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 8080714:	2200      	movs	r2, #0
 8080716:	4611      	mov	r1, r2
 8080718:	6840      	ldr	r0, [r0, #4]
 808071a:	f7ff bf15 	b.w	8080548 <network_connecting>

0808071e <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 808071e:	2200      	movs	r2, #0
 8080720:	2102      	movs	r1, #2
 8080722:	6840      	ldr	r0, [r0, #4]
 8080724:	f7ff bf18 	b.w	8080558 <network_disconnect>

08080728 <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 8080728:	2300      	movs	r3, #0
 808072a:	461a      	mov	r2, r3
 808072c:	6840      	ldr	r0, [r0, #4]
 808072e:	f7ff bf03 	b.w	8080538 <network_connect>
	...

08080734 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
 8080734:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 8080736:	4c08      	ldr	r4, [pc, #32]	; (8080758 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
 8080738:	2528      	movs	r5, #40	; 0x28
 808073a:	462a      	mov	r2, r5
 808073c:	2100      	movs	r1, #0
 808073e:	4620      	mov	r0, r4
 8080740:	f001 fc79 	bl	8082036 <memset>
        cid = -1;
 8080744:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8080748:	6063      	str	r3, [r4, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 808074a:	4b04      	ldr	r3, [pc, #16]	; (808075c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
 808074c:	2204      	movs	r2, #4
 808074e:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
 8080750:	4a03      	ldr	r2, [pc, #12]	; (8080760 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
        size = sizeof(*this);
 8080752:	8025      	strh	r5, [r4, #0]
 8080754:	601a      	str	r2, [r3, #0]
 8080756:	bd38      	pop	{r3, r4, r5, pc}
 8080758:	20000158 	.word	0x20000158
 808075c:	20000150 	.word	0x20000150
 8080760:	0808295c 	.word	0x0808295c

08080764 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8080764:	4770      	bx	lr

08080766 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 8080766:	2000      	movs	r0, #0
 8080768:	4770      	bx	lr

0808076a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 808076a:	b510      	push	{r4, lr}
 808076c:	4604      	mov	r4, r0
 808076e:	2110      	movs	r1, #16
 8080770:	f000 ffdb 	bl	808172a <_ZdlPvj>
 8080774:	4620      	mov	r0, r4
 8080776:	bd10      	pop	{r4, pc}

08080778 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 8080778:	b508      	push	{r3, lr}
      { delete this; }
 808077a:	b108      	cbz	r0, 8080780 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 808077c:	f7ff fff5 	bl	808076a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 8080780:	bd08      	pop	{r3, pc}

08080782 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 8080782:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 8080784:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 8080786:	4604      	mov	r4, r0
    {
      if (_M_manager)
 8080788:	b113      	cbz	r3, 8080790 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 808078a:	2203      	movs	r2, #3
 808078c:	4601      	mov	r1, r0
 808078e:	4798      	blx	r3
    }
 8080790:	4620      	mov	r0, r4
 8080792:	bd10      	pop	{r4, pc}

08080794 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 8080794:	2200      	movs	r2, #0
 8080796:	6002      	str	r2, [r0, #0]
 8080798:	f64f 729c 	movw	r2, #65436	; 0xff9c
 808079c:	8082      	strh	r2, [r0, #4]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 808079e:	b510      	push	{r4, lr}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80807a0:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 80807a4:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80807a6:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80807a8:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
 80807aa:	680c      	ldr	r4, [r1, #0]
 80807ac:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80807ae:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80807b0:	bd10      	pop	{r4, pc}

080807b2 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80807b2:	b510      	push	{r4, lr}
 80807b4:	4604      	mov	r4, r0
    free((void*)msg_);
 80807b6:	6800      	ldr	r0, [r0, #0]
 80807b8:	f7ff ff16 	bl	80805e8 <free>
}
 80807bc:	4620      	mov	r0, r4
 80807be:	bd10      	pop	{r4, pc}

080807c0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 80807c0:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80807c2:	68c4      	ldr	r4, [r0, #12]
 80807c4:	b1f4      	cbz	r4, 8080804 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 80807c6:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80807c8:	2b02      	cmp	r3, #2
 80807ca:	d103      	bne.n	80807d4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80807cc:	f104 000c 	add.w	r0, r4, #12
 80807d0:	f7ff ffef 	bl	80807b2 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 80807d4:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 80807d6:	b135      	cbz	r5, 80807e6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80807d8:	4628      	mov	r0, r5
 80807da:	f7ff ffd2 	bl	8080782 <_ZNSt14_Function_baseD1Ev>
 80807de:	2110      	movs	r1, #16
 80807e0:	4628      	mov	r0, r5
 80807e2:	f000 ffa2 	bl	808172a <_ZdlPvj>
 80807e6:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80807e8:	b135      	cbz	r5, 80807f8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80807ea:	4628      	mov	r0, r5
 80807ec:	f7ff ffc9 	bl	8080782 <_ZNSt14_Function_baseD1Ev>
 80807f0:	2110      	movs	r1, #16
 80807f2:	4628      	mov	r0, r5
 80807f4:	f000 ff99 	bl	808172a <_ZdlPvj>
 80807f8:	4620      	mov	r0, r4
 80807fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80807fe:	2114      	movs	r1, #20
 8080800:	f000 bf93 	b.w	808172a <_ZdlPvj>
 8080804:	bd38      	pop	{r3, r4, r5, pc}

08080806 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 8080806:	b513      	push	{r0, r1, r4, lr}
 8080808:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 808080a:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 808080e:	2300      	movs	r3, #0
 8080810:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 8080812:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 8080814:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 8080816:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8080818:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 808081a:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 808081c:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 808081e:	f7ff fc55 	bl	80800cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080822:	4620      	mov	r0, r4
 8080824:	b002      	add	sp, #8
 8080826:	bd10      	pop	{r4, pc}

08080828 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 8080828:	680b      	ldr	r3, [r1, #0]
 808082a:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 808082c:	b113      	cbz	r3, 8080834 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 808082e:	685a      	ldr	r2, [r3, #4]
 8080830:	3201      	adds	r2, #1
 8080832:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 8080834:	4770      	bx	lr

08080836 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 8080836:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 8080838:	460c      	mov	r4, r1
 808083a:	4606      	mov	r6, r0
 808083c:	460f      	mov	r7, r1
 808083e:	f854 3b04 	ldr.w	r3, [r4], #4
 8080842:	ad02      	add	r5, sp, #8
 8080844:	f845 3d08 	str.w	r3, [r5, #-8]!
 8080848:	4621      	mov	r1, r4
 808084a:	a801      	add	r0, sp, #4
 808084c:	f7ff ffec 	bl	8080828 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 8080850:	4629      	mov	r1, r5
 8080852:	4630      	mov	r0, r6
 8080854:	f7ff ffd7 	bl	8080806 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8080858:	a801      	add	r0, sp, #4
 808085a:	f7ff fc37 	bl	80800cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 808085e:	4620      	mov	r0, r4
 8080860:	f7ff fc34 	bl	80800cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 8080864:	4638      	mov	r0, r7
 8080866:	2108      	movs	r1, #8
 8080868:	f000 ff5f 	bl	808172a <_ZdlPvj>
        return p;
    }
 808086c:	4630      	mov	r0, r6
 808086e:	b003      	add	sp, #12
 8080870:	bdf0      	pop	{r4, r5, r6, r7, pc}

08080872 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 8080872:	b513      	push	{r0, r1, r4, lr}
 8080874:	460b      	mov	r3, r1
 8080876:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8080878:	c803      	ldmia	r0, {r0, r1}
 808087a:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 808087e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8080882:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8080886:	e89d 0003 	ldmia.w	sp, {r0, r1}
 808088a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 808088e:	b002      	add	sp, #8
 8080890:	bd10      	pop	{r4, pc}
	...

08080894 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 8080894:	b538      	push	{r3, r4, r5, lr}
 8080896:	2300      	movs	r3, #0
 8080898:	4604      	mov	r4, r0
 808089a:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 808089c:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 808089e:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80808a0:	f7ff fbfb 	bl	808009a <_Znwj>
 80808a4:	b128      	cbz	r0, 80808b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80808a6:	2301      	movs	r3, #1
 80808a8:	6043      	str	r3, [r0, #4]
 80808aa:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 80808ac:	4b02      	ldr	r3, [pc, #8]	; (80808b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80808ae:	60c5      	str	r5, [r0, #12]
 80808b0:	6003      	str	r3, [r0, #0]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80808b2:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
 80808b4:	4620      	mov	r0, r4
 80808b6:	bd38      	pop	{r3, r4, r5, pc}
 80808b8:	08082990 	.word	0x08082990

080808bc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80808bc:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80808be:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80808c0:	b90a      	cbnz	r2, 80808c6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80808c2:	f000 ff34 	bl	808172e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80808c6:	68c3      	ldr	r3, [r0, #12]
    }
 80808c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80808cc:	4718      	bx	r3

080808ce <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80808ce:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80808d0:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80808d2:	f100 0110 	add.w	r1, r0, #16
 80808d6:	f7ff fff1 	bl	80808bc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80808da:	bd08      	pop	{r3, pc}

080808dc <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80808dc:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80808de:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80808e0:	b90a      	cbnz	r2, 80808e6 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80808e2:	f000 ff24 	bl	808172e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80808e6:	68c3      	ldr	r3, [r0, #12]
    }
 80808e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80808ec:	4718      	bx	r3

080808ee <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80808ee:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80808f0:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80808f2:	f100 0110 	add.w	r1, r0, #16
 80808f6:	f7ff fff1 	bl	80808dc <_ZNKSt8functionIFvRKbEEclES1_>
 80808fa:	bd08      	pop	{r3, pc}

080808fc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80808fc:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80808fe:	2300      	movs	r3, #0
 8080900:	6083      	str	r3, [r0, #8]
 8080902:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8080904:	4604      	mov	r4, r0
 8080906:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 8080908:	b12b      	cbz	r3, 8080916 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 808090a:	2202      	movs	r2, #2
 808090c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 808090e:	68eb      	ldr	r3, [r5, #12]
 8080910:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8080912:	68ab      	ldr	r3, [r5, #8]
 8080914:	60a3      	str	r3, [r4, #8]
	}
    }
 8080916:	4620      	mov	r0, r4
 8080918:	bd38      	pop	{r3, r4, r5, pc}
	...

0808091c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 808091c:	b5f0      	push	{r4, r5, r6, r7, lr}
 808091e:	b089      	sub	sp, #36	; 0x24
 8080920:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 8080922:	4668      	mov	r0, sp
 8080924:	f7ff ff36 	bl	8080794 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 8080928:	f04f 0202 	mov.w	r2, #2
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 808092c:	2300      	movs	r3, #0
 808092e:	f88d 3008 	strb.w	r3, [sp, #8]
 8080932:	e8d4 3f4f 	ldrexb	r3, [r4]
 8080936:	2b00      	cmp	r3, #0
 8080938:	d103      	bne.n	8080942 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
 808093a:	e8c4 2f41 	strexb	r1, r2, [r4]
 808093e:	2900      	cmp	r1, #0
 8080940:	d1f7      	bne.n	8080932 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
 8080942:	d002      	beq.n	808094a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
 8080944:	f88d 3008 	strb.w	r3, [sp, #8]
 8080948:	e063      	b.n	8080a12 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 808094a:	f114 050c 	adds.w	r5, r4, #12
 808094e:	d003      	beq.n	8080958 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
 8080950:	4669      	mov	r1, sp
 8080952:	4628      	mov	r0, r5
 8080954:	f7ff ff1e 	bl	8080794 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 8080958:	f3bf 8f5f 	dmb	sy
 808095c:	2301      	movs	r3, #1
 808095e:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 8080960:	f3bf 8f5f 	dmb	sy
 8080964:	f104 0308 	add.w	r3, r4, #8
 8080968:	2000      	movs	r0, #0
 808096a:	e853 6f00 	ldrex	r6, [r3]
 808096e:	e843 0200 	strex	r2, r0, [r3]
 8080972:	2a00      	cmp	r2, #0
 8080974:	d1f9      	bne.n	808096a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
 8080976:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 808097a:	2e00      	cmp	r6, #0
 808097c:	d049      	beq.n	8080a12 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 808097e:	f7ff fd7f 	bl	8080480 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 8080982:	b120      	cbz	r0, 808098e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 8080984:	4629      	mov	r1, r5
 8080986:	4630      	mov	r0, r6
 8080988:	f7ff ff98 	bl	80808bc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 808098c:	e03a      	b.n	8080a04 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 808098e:	4631      	mov	r1, r6
 8080990:	a802      	add	r0, sp, #8
 8080992:	f7ff ffb3 	bl	80808fc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 8080996:	68e0      	ldr	r0, [r4, #12]
 8080998:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 808099c:	b108      	cbz	r0, 80809a2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
 808099e:	f001 fb8d 	bl	80820bc <strdup>
 80809a2:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80809a4:	2010      	movs	r0, #16
 80809a6:	f8ad 501c 	strh.w	r5, [sp, #28]
 80809aa:	f7ff fb76 	bl	808009a <_Znwj>
 80809ae:	4605      	mov	r5, r0
 80809b0:	b1e8      	cbz	r0, 80809ee <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80809b2:	2700      	movs	r7, #0
 80809b4:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80809b6:	2018      	movs	r0, #24
 80809b8:	f7ff fb6f 	bl	808009a <_Znwj>
 80809bc:	4604      	mov	r4, r0
 80809be:	b188      	cbz	r0, 80809e4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80809c0:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80809c2:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80809c4:	a802      	add	r0, sp, #8
 80809c6:	f7ff ff54 	bl	8080872 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80809ca:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80809cc:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80809ce:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80809d0:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80809d2:	9204      	str	r2, [sp, #16]
 80809d4:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80809d6:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80809d8:	60e3      	str	r3, [r4, #12]
 80809da:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80809de:	9205      	str	r2, [sp, #20]
 80809e0:	f7ff fed8 	bl	8080794 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80809e4:	4b0d      	ldr	r3, [pc, #52]	; (8080a1c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80809e6:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80809e8:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80809ea:	4b0d      	ldr	r3, [pc, #52]	; (8080a20 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
 80809ec:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
 80809ee:	a806      	add	r0, sp, #24
 80809f0:	f7ff fedf 	bl	80807b2 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80809f4:	a802      	add	r0, sp, #8
 80809f6:	f7ff fec4 	bl	8080782 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80809fa:	2200      	movs	r2, #0
 80809fc:	4629      	mov	r1, r5
 80809fe:	4809      	ldr	r0, [pc, #36]	; (8080a24 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
 8080a00:	f7ff fd46 	bl	8080490 <application_thread_invoke>
 8080a04:	4630      	mov	r0, r6
 8080a06:	f7ff febc 	bl	8080782 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 8080a0a:	2110      	movs	r1, #16
 8080a0c:	4630      	mov	r0, r6
 8080a0e:	f000 fe8c 	bl	808172a <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
 8080a12:	4668      	mov	r0, sp
 8080a14:	f7ff fecd 	bl	80807b2 <_ZN8particle5ErrorD1Ev>
    }
 8080a18:	b009      	add	sp, #36	; 0x24
 8080a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8080a1c:	080808cf 	.word	0x080808cf
 8080a20:	08080b45 	.word	0x08080b45
 8080a24:	0808065f 	.word	0x0808065f

08080a28 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 8080a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8080a2c:	b08b      	sub	sp, #44	; 0x2c
 8080a2e:	4606      	mov	r6, r0
 8080a30:	460f      	mov	r7, r1
 8080a32:	4690      	mov	r8, r2
 8080a34:	4699      	mov	r9, r3
 8080a36:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8080a3a:	f7ff fd5d 	bl	80804f8 <spark_cloud_flag_connected>
 8080a3e:	ad07      	add	r5, sp, #28
#ifndef SPARK_NO_CLOUD
    if (!connected()) {
 8080a40:	4683      	mov	fp, r0
 8080a42:	bb30      	cbnz	r0, 8080a92 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 8080a44:	f64f 732e 	movw	r3, #65326	; 0xff2e
 8080a48:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 8080a4a:	a905      	add	r1, sp, #20
 8080a4c:	4628      	mov	r0, r5
 8080a4e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8080a52:	f7ff fe9f 	bl	8080794 <_ZN8particle5ErrorC1EOS0_>
 8080a56:	2014      	movs	r0, #20
 8080a58:	f7ff fb1f 	bl	808009a <_Znwj>
 8080a5c:	4604      	mov	r4, r0
 8080a5e:	b158      	cbz	r0, 8080a78 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 8080a60:	2302      	movs	r3, #2
 8080a62:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8080a64:	2301      	movs	r3, #1
 8080a66:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 8080a68:	f8c0 b004 	str.w	fp, [r0, #4]
 8080a6c:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
 8080a70:	4629      	mov	r1, r5
 8080a72:	300c      	adds	r0, #12
 8080a74:	f7ff fe8e 	bl	8080794 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 8080a78:	4630      	mov	r0, r6
 8080a7a:	4621      	mov	r1, r4
 8080a7c:	f840 4b04 	str.w	r4, [r0], #4
 8080a80:	f7ff ff08 	bl	8080894 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 8080a84:	4628      	mov	r0, r5
 8080a86:	f7ff fe94 	bl	80807b2 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 8080a8a:	a805      	add	r0, sp, #20
 8080a8c:	f7ff fe91 	bl	80807b2 <_ZN8particle5ErrorD1Ev>
 8080a90:	e052      	b.n	8080b38 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 8080a92:	2400      	movs	r4, #0
 8080a94:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 8080a96:	2014      	movs	r0, #20
 8080a98:	606c      	str	r4, [r5, #4]
 8080a9a:	60ac      	str	r4, [r5, #8]
 8080a9c:	9307      	str	r3, [sp, #28]
 8080a9e:	f7ff fafc 	bl	808009a <_Znwj>
 8080aa2:	4601      	mov	r1, r0
 8080aa4:	b118      	cbz	r0, 8080aae <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
 8080aa6:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8080aa8:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 8080aaa:	6044      	str	r4, [r0, #4]
 8080aac:	6084      	str	r4, [r0, #8]
 8080aae:	a804      	add	r0, sp, #16
 8080ab0:	9103      	str	r1, [sp, #12]
 8080ab2:	f7ff feef 	bl	8080894 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 8080ab6:	4b22      	ldr	r3, [pc, #136]	; (8080b40 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 8080ab8:	2008      	movs	r0, #8
 8080aba:	9308      	str	r3, [sp, #32]
 8080abc:	f7ff faed 	bl	808009a <_Znwj>
 8080ac0:	4604      	mov	r4, r0
 8080ac2:	b128      	cbz	r0, 8080ad0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 8080ac4:	9b03      	ldr	r3, [sp, #12]
 8080ac6:	a904      	add	r1, sp, #16
 8080ac8:	f840 3b04 	str.w	r3, [r0], #4
 8080acc:	f7ff feac 	bl	8080828 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 8080ad0:	9500      	str	r5, [sp, #0]
 8080ad2:	fa5f f38a 	uxtb.w	r3, sl
 8080ad6:	464a      	mov	r2, r9
 8080ad8:	4641      	mov	r1, r8
 8080ada:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 8080adc:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 8080ade:	f7ff fd13 	bl	8080508 <spark_send_event>
 8080ae2:	b920      	cbnz	r0, 8080aee <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 8080ae4:	9b03      	ldr	r3, [sp, #12]
 8080ae6:	785b      	ldrb	r3, [r3, #1]
 8080ae8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8080aec:	b183      	cbz	r3, 8080b10 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
 8080aee:	9b03      	ldr	r3, [sp, #12]
 8080af0:	a904      	add	r1, sp, #16
 8080af2:	a806      	add	r0, sp, #24
 8080af4:	9305      	str	r3, [sp, #20]
 8080af6:	f7ff fe97 	bl	8080828 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 8080afa:	a905      	add	r1, sp, #20
 8080afc:	4630      	mov	r0, r6
 8080afe:	f7ff fe82 	bl	8080806 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8080b02:	a806      	add	r0, sp, #24
 8080b04:	f7ff fae2 	bl	80800cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080b08:	a804      	add	r0, sp, #16
 8080b0a:	f7ff fadf 	bl	80800cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080b0e:	e013      	b.n	8080b38 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
 8080b10:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 8080b14:	a905      	add	r1, sp, #20
 8080b16:	a803      	add	r0, sp, #12
 8080b18:	9205      	str	r2, [sp, #20]
 8080b1a:	f8ad 3018 	strh.w	r3, [sp, #24]
 8080b1e:	f7ff fefd 	bl	808091c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 8080b22:	a805      	add	r0, sp, #20
 8080b24:	f7ff fe45 	bl	80807b2 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 8080b28:	a805      	add	r0, sp, #20
 8080b2a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8080b2c:	f7ff fe83 	bl	8080836 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
 8080b30:	a806      	add	r0, sp, #24
 8080b32:	f7ff facb 	bl	80800cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080b36:	e7da      	b.n	8080aee <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
 8080b38:	4630      	mov	r0, r6
 8080b3a:	b00b      	add	sp, #44	; 0x2c
 8080b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8080b40:	08080cb5 	.word	0x08080cb5

08080b44 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 8080b44:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8080b46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8080b48:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 8080b4a:	d006      	beq.n	8080b5a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 8080b4c:	2a03      	cmp	r2, #3
 8080b4e:	d017      	beq.n	8080b80 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 8080b50:	2a01      	cmp	r2, #1
 8080b52:	d122      	bne.n	8080b9a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8080b54:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8080b56:	6003      	str	r3, [r0, #0]
	      break;
 8080b58:	e01f      	b.n	8080b9a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8080b5a:	2018      	movs	r0, #24
 8080b5c:	680e      	ldr	r6, [r1, #0]
 8080b5e:	f7ff fa9c 	bl	808009a <_Znwj>
 8080b62:	4605      	mov	r5, r0
 8080b64:	b150      	cbz	r0, 8080b7c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 8080b66:	4631      	mov	r1, r6
 8080b68:	f7ff fec8 	bl	80808fc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 8080b6c:	6930      	ldr	r0, [r6, #16]
 8080b6e:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 8080b72:	b108      	cbz	r0, 8080b78 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 8080b74:	f001 faa2 	bl	80820bc <strdup>
 8080b78:	6128      	str	r0, [r5, #16]
 8080b7a:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8080b7c:	6025      	str	r5, [r4, #0]
 8080b7e:	e00c      	b.n	8080b9a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8080b80:	6804      	ldr	r4, [r0, #0]
 8080b82:	b154      	cbz	r4, 8080b9a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
 8080b84:	f104 0010 	add.w	r0, r4, #16
 8080b88:	f7ff fe13 	bl	80807b2 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8080b8c:	4620      	mov	r0, r4
 8080b8e:	f7ff fdf8 	bl	8080782 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8080b92:	2118      	movs	r1, #24
 8080b94:	4620      	mov	r0, r4
 8080b96:	f000 fdc8 	bl	808172a <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 8080b9a:	2000      	movs	r0, #0
 8080b9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08080b9e <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8080b9e:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8080ba0:	2300      	movs	r3, #0
 8080ba2:	6083      	str	r3, [r0, #8]
 8080ba4:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8080ba6:	4604      	mov	r4, r0
 8080ba8:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 8080baa:	b12b      	cbz	r3, 8080bb8 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8080bac:	2202      	movs	r2, #2
 8080bae:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8080bb0:	68eb      	ldr	r3, [r5, #12]
 8080bb2:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8080bb4:	68ab      	ldr	r3, [r5, #8]
 8080bb6:	60a3      	str	r3, [r4, #8]
	}
    }
 8080bb8:	4620      	mov	r0, r4
 8080bba:	bd38      	pop	{r3, r4, r5, pc}

08080bbc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 8080bbc:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8080bbe:	b570      	push	{r4, r5, r6, lr}
 8080bc0:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 8080bc2:	d006      	beq.n	8080bd2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 8080bc4:	2a03      	cmp	r2, #3
 8080bc6:	d011      	beq.n	8080bec <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 8080bc8:	2a01      	cmp	r2, #1
 8080bca:	d118      	bne.n	8080bfe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8080bcc:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8080bce:	6003      	str	r3, [r0, #0]
	      break;
 8080bd0:	e015      	b.n	8080bfe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8080bd2:	2014      	movs	r0, #20
 8080bd4:	680e      	ldr	r6, [r1, #0]
 8080bd6:	f7ff fa60 	bl	808009a <_Znwj>
 8080bda:	4605      	mov	r5, r0
 8080bdc:	b120      	cbz	r0, 8080be8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 8080bde:	4631      	mov	r1, r6
 8080be0:	f7ff ffdd 	bl	8080b9e <_ZNSt8functionIFvRKbEEC1ERKS3_>
 8080be4:	7c33      	ldrb	r3, [r6, #16]
 8080be6:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8080be8:	6025      	str	r5, [r4, #0]
 8080bea:	e008      	b.n	8080bfe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8080bec:	6804      	ldr	r4, [r0, #0]
 8080bee:	b134      	cbz	r4, 8080bfe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8080bf0:	4620      	mov	r0, r4
 8080bf2:	f7ff fdc6 	bl	8080782 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8080bf6:	2114      	movs	r1, #20
 8080bf8:	4620      	mov	r0, r4
 8080bfa:	f000 fd96 	bl	808172a <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 8080bfe:	2000      	movs	r0, #0
 8080c00:	bd70      	pop	{r4, r5, r6, pc}
	...

08080c04 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 8080c04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8080c06:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 8080c08:	f3bf 8f5f 	dmb	sy
 8080c0c:	b087      	sub	sp, #28
 8080c0e:	2300      	movs	r3, #0
 8080c10:	e850 6f00 	ldrex	r6, [r0]
 8080c14:	e840 3200 	strex	r2, r3, [r0]
 8080c18:	2a00      	cmp	r2, #0
 8080c1a:	d1f9      	bne.n	8080c10 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 8080c1c:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 8080c20:	2e00      	cmp	r6, #0
 8080c22:	d03f      	beq.n	8080ca4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 8080c24:	4618      	mov	r0, r3
 8080c26:	f7ff fc2b 	bl	8080480 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 8080c2a:	4607      	mov	r7, r0
 8080c2c:	b120      	cbz	r0, 8080c38 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 8080c2e:	4621      	mov	r1, r4
 8080c30:	4630      	mov	r0, r6
 8080c32:	f7ff fe53 	bl	80808dc <_ZNKSt8functionIFvRKbEEclES1_>
 8080c36:	e02e      	b.n	8080c96 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 8080c38:	4631      	mov	r1, r6
 8080c3a:	a801      	add	r0, sp, #4
 8080c3c:	f7ff ffaf 	bl	8080b9e <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8080c40:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 8080c42:	2010      	movs	r0, #16
 8080c44:	f88d 3014 	strb.w	r3, [sp, #20]
 8080c48:	f7ff fa27 	bl	808009a <_Znwj>
 8080c4c:	4605      	mov	r5, r0
 8080c4e:	b1d0      	cbz	r0, 8080c86 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8080c50:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8080c52:	2014      	movs	r0, #20
 8080c54:	f7ff fa21 	bl	808009a <_Znwj>
 8080c58:	4604      	mov	r4, r0
 8080c5a:	b178      	cbz	r0, 8080c7c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8080c5c:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 8080c5e:	4601      	mov	r1, r0
 8080c60:	a801      	add	r0, sp, #4
 8080c62:	f7ff fe06 	bl	8080872 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8080c66:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 8080c68:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8080c6a:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8080c6c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 8080c6e:	9203      	str	r2, [sp, #12]
 8080c70:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 8080c72:	60e3      	str	r3, [r4, #12]
 8080c74:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8080c78:	9204      	str	r2, [sp, #16]
 8080c7a:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8080c7c:	4b0a      	ldr	r3, [pc, #40]	; (8080ca8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8080c7e:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8080c80:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 8080c82:	4b0a      	ldr	r3, [pc, #40]	; (8080cac <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 8080c84:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8080c86:	a801      	add	r0, sp, #4
 8080c88:	f7ff fd7b 	bl	8080782 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 8080c8c:	2200      	movs	r2, #0
 8080c8e:	4629      	mov	r1, r5
 8080c90:	4807      	ldr	r0, [pc, #28]	; (8080cb0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 8080c92:	f7ff fbfd 	bl	8080490 <application_thread_invoke>
 8080c96:	4630      	mov	r0, r6
 8080c98:	f7ff fd73 	bl	8080782 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 8080c9c:	2110      	movs	r1, #16
 8080c9e:	4630      	mov	r0, r6
 8080ca0:	f000 fd43 	bl	808172a <_ZdlPvj>
        }
    }
 8080ca4:	b007      	add	sp, #28
 8080ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8080ca8:	080808ef 	.word	0x080808ef
 8080cac:	08080bbd 	.word	0x08080bbd
 8080cb0:	0808065f 	.word	0x0808065f

08080cb4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 8080cb4:	b530      	push	{r4, r5, lr}
 8080cb6:	4604      	mov	r4, r0
 8080cb8:	b085      	sub	sp, #20
 8080cba:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 8080cbc:	4668      	mov	r0, sp
 8080cbe:	4611      	mov	r1, r2
 8080cc0:	f7ff fdb9 	bl	8080836 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 8080cc4:	b17c      	cbz	r4, 8080ce6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 8080cc6:	b224      	sxth	r4, r4
 8080cc8:	4628      	mov	r0, r5
 8080cca:	b10d      	cbz	r5, 8080cd0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 8080ccc:	f001 f9f6 	bl	80820bc <strdup>
 8080cd0:	9002      	str	r0, [sp, #8]
 8080cd2:	a902      	add	r1, sp, #8
 8080cd4:	4668      	mov	r0, sp
 8080cd6:	f8ad 400c 	strh.w	r4, [sp, #12]
 8080cda:	f7ff fe1f 	bl	808091c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 8080cde:	a802      	add	r0, sp, #8
 8080ce0:	f7ff fd67 	bl	80807b2 <_ZN8particle5ErrorD1Ev>
 8080ce4:	e01d      	b.n	8080d22 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 8080ce6:	f04f 0201 	mov.w	r2, #1
 8080cea:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 8080cec:	f88d 4008 	strb.w	r4, [sp, #8]
 8080cf0:	e8d0 3f4f 	ldrexb	r3, [r0]
 8080cf4:	42a3      	cmp	r3, r4
 8080cf6:	d103      	bne.n	8080d00 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 8080cf8:	e8c0 2f41 	strexb	r1, r2, [r0]
 8080cfc:	2900      	cmp	r1, #0
 8080cfe:	d1f7      	bne.n	8080cf0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 8080d00:	d002      	beq.n	8080d08 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 8080d02:	f88d 3008 	strb.w	r3, [sp, #8]
 8080d06:	e00c      	b.n	8080d22 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 8080d08:	f110 010c 	adds.w	r1, r0, #12
 8080d0c:	f04f 0301 	mov.w	r3, #1
 8080d10:	bf18      	it	ne
 8080d12:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 8080d14:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 8080d18:	3004      	adds	r0, #4
 8080d1a:	f800 3c03 	strb.w	r3, [r0, #-3]
 8080d1e:	f7ff ff71 	bl	8080c04 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 8080d22:	a801      	add	r0, sp, #4
 8080d24:	f7ff f9d2 	bl	80800cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 8080d28:	b005      	add	sp, #20
 8080d2a:	bd30      	pop	{r4, r5, pc}

08080d2c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 8080d2c:	4770      	bx	lr

08080d2e <_ZN9IPAddressD0Ev>:
 8080d2e:	b510      	push	{r4, lr}
 8080d30:	4604      	mov	r4, r0
 8080d32:	2108      	movs	r1, #8
 8080d34:	f000 fcf9 	bl	808172a <_ZdlPvj>
 8080d38:	4620      	mov	r0, r4
 8080d3a:	bd10      	pop	{r4, pc}

08080d3c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 8080d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8080d3e:	460f      	mov	r7, r1
 8080d40:	f100 0608 	add.w	r6, r0, #8
 8080d44:	1d05      	adds	r5, r0, #4
 8080d46:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 8080d48:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8080d4c:	220a      	movs	r2, #10
 8080d4e:	4638      	mov	r0, r7
 8080d50:	f000 f8fb 	bl	8080f4a <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8080d54:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 8080d56:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8080d58:	d007      	beq.n	8080d6a <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 8080d5a:	2c00      	cmp	r4, #0
 8080d5c:	d0f4      	beq.n	8080d48 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 8080d5e:	212e      	movs	r1, #46	; 0x2e
 8080d60:	4638      	mov	r0, r7
 8080d62:	f000 f8c5 	bl	8080ef0 <_ZN5Print5printEc>
 8080d66:	4404      	add	r4, r0
 8080d68:	e7ee      	b.n	8080d48 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 8080d6a:	4620      	mov	r0, r4
 8080d6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08080d70 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 8080d70:	4a02      	ldr	r2, [pc, #8]	; (8080d7c <_ZN9IPAddressC1Ev+0xc>)
 8080d72:	6002      	str	r2, [r0, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 8080d74:	2200      	movs	r2, #0
 8080d76:	6042      	str	r2, [r0, #4]
{
    clear();
}
 8080d78:	4770      	bx	lr
 8080d7a:	bf00      	nop
 8080d7c:	080829ac 	.word	0x080829ac

08080d80 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 8080d80:	4a02      	ldr	r2, [pc, #8]	; (8080d8c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xc>)
 8080d82:	6002      	str	r2, [r0, #0]
{
    memcpy(&this->address, &address, sizeof(address));
 8080d84:	680a      	ldr	r2, [r1, #0]
 8080d86:	6042      	str	r2, [r0, #4]
}
 8080d88:	4770      	bx	lr
 8080d8a:	bf00      	nop
 8080d8c:	080829ac 	.word	0x080829ac

08080d90 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 8080d90:	4a01      	ldr	r2, [pc, #4]	; (8080d98 <_ZN9IPAddressC1Em+0x8>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 8080d92:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 8080d94:	6002      	str	r2, [r0, #0]
{
    *this = address;
}
 8080d96:	4770      	bx	lr
 8080d98:	080829ac 	.word	0x080829ac

08080d9c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 8080d9c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 8080d9e:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8080da2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 8080da6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8080daa:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 8080dae:	6041      	str	r1, [r0, #4]
 8080db0:	bd10      	pop	{r4, pc}
	...

08080db4 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 8080db4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8080db6:	4d04      	ldr	r5, [pc, #16]	; (8080dc8 <_ZN9IPAddressC1Ehhhh+0x14>)
 8080db8:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 8080dba:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8080dbe:	9500      	str	r5, [sp, #0]
 8080dc0:	f7ff ffec 	bl	8080d9c <_ZN9IPAddress8set_ipv4Ehhhh>
}
 8080dc4:	b003      	add	sp, #12
 8080dc6:	bd30      	pop	{r4, r5, pc}
 8080dc8:	080829ac 	.word	0x080829ac

08080dcc <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 8080dcc:	4a01      	ldr	r2, [pc, #4]	; (8080dd4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 8080dce:	4b02      	ldr	r3, [pc, #8]	; (8080dd8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 8080dd0:	601a      	str	r2, [r3, #0]
 8080dd2:	4770      	bx	lr
 8080dd4:	08082a73 	.word	0x08082a73
 8080dd8:	20000180 	.word	0x20000180

08080ddc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 8080ddc:	2300      	movs	r3, #0
 8080dde:	461a      	mov	r2, r3
 8080de0:	6840      	ldr	r0, [r0, #4]
 8080de2:	f7ff bba9 	b.w	8080538 <network_connect>

08080de6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 8080de6:	2200      	movs	r2, #0
 8080de8:	2102      	movs	r1, #2
 8080dea:	6840      	ldr	r0, [r0, #4]
 8080dec:	f7ff bbb4 	b.w	8080558 <network_disconnect>

08080df0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 8080df0:	2200      	movs	r2, #0
 8080df2:	4611      	mov	r1, r2
 8080df4:	6840      	ldr	r0, [r0, #4]
 8080df6:	f7ff bba7 	b.w	8080548 <network_connecting>

08080dfa <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 8080dfa:	2200      	movs	r2, #0
 8080dfc:	4611      	mov	r1, r2
 8080dfe:	6840      	ldr	r0, [r0, #4]
 8080e00:	f7ff bbb2 	b.w	8080568 <network_ready>

08080e04 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 8080e04:	2300      	movs	r3, #0
 8080e06:	461a      	mov	r2, r3
 8080e08:	4619      	mov	r1, r3
 8080e0a:	6840      	ldr	r0, [r0, #4]
 8080e0c:	f7ff bbb4 	b.w	8080578 <network_on>

08080e10 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 8080e10:	2300      	movs	r3, #0
 8080e12:	461a      	mov	r2, r3
 8080e14:	4619      	mov	r1, r3
 8080e16:	6840      	ldr	r0, [r0, #4]
 8080e18:	f7ff bbb6 	b.w	8080588 <network_off>

08080e1c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 8080e1c:	2200      	movs	r2, #0
 8080e1e:	f081 0101 	eor.w	r1, r1, #1
 8080e22:	6840      	ldr	r0, [r0, #4]
 8080e24:	f7ff bbb8 	b.w	8080598 <network_listen>

08080e28 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 8080e28:	2200      	movs	r2, #0
 8080e2a:	6840      	ldr	r0, [r0, #4]
 8080e2c:	f7ff bbc4 	b.w	80805b8 <network_set_listen_timeout>

08080e30 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 8080e30:	2200      	movs	r2, #0
 8080e32:	4611      	mov	r1, r2
 8080e34:	6840      	ldr	r0, [r0, #4]
 8080e36:	f7ff bbc7 	b.w	80805c8 <network_get_listen_timeout>

08080e3a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 8080e3a:	2200      	movs	r2, #0
 8080e3c:	4611      	mov	r1, r2
 8080e3e:	6840      	ldr	r0, [r0, #4]
 8080e40:	f7ff bbb2 	b.w	80805a8 <network_listening>

08080e44 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 8080e44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8080e46:	4617      	mov	r7, r2
 8080e48:	b087      	sub	sp, #28
 8080e4a:	4605      	mov	r5, r0
    IPAddress addr;
 8080e4c:	a804      	add	r0, sp, #16
 8080e4e:	f7ff ff8f 	bl	8080d70 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 8080e52:	2600      	movs	r6, #0
 8080e54:	ac06      	add	r4, sp, #24
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8080e56:	4638      	mov	r0, r7
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 8080e58:	f844 6d0c 	str.w	r6, [r4, #-12]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8080e5c:	f001 f949 	bl	80820f2 <strlen>
 8080e60:	4b0a      	ldr	r3, [pc, #40]	; (8080e8c <_ZN5spark12NetworkClass7resolveEPKc+0x48>)
 8080e62:	9600      	str	r6, [sp, #0]
 8080e64:	b281      	uxth	r1, r0
 8080e66:	685b      	ldr	r3, [r3, #4]
 8080e68:	4622      	mov	r2, r4
 8080e6a:	4638      	mov	r0, r7
 8080e6c:	f7ff fa40 	bl	80802f0 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8080e70:	b120      	cbz	r0, 8080e7c <_ZN5spark12NetworkClass7resolveEPKc+0x38>
 8080e72:	4631      	mov	r1, r6
 8080e74:	4628      	mov	r0, r5
 8080e76:	f7ff ff8b 	bl	8080d90 <_ZN9IPAddressC1Em>
 8080e7a:	e003      	b.n	8080e84 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 8080e7c:	4621      	mov	r1, r4
 8080e7e:	4628      	mov	r0, r5
 8080e80:	f7ff ff7e 	bl	8080d80 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 8080e84:	4628      	mov	r0, r5
 8080e86:	b007      	add	sp, #28
 8080e88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8080e8a:	bf00      	nop
 8080e8c:	20000150 	.word	0x20000150

08080e90 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 8080e90:	4b02      	ldr	r3, [pc, #8]	; (8080e9c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 8080e92:	4a03      	ldr	r2, [pc, #12]	; (8080ea0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 8080e94:	601a      	str	r2, [r3, #0]
 8080e96:	2200      	movs	r2, #0
 8080e98:	605a      	str	r2, [r3, #4]
 8080e9a:	4770      	bx	lr
 8080e9c:	20000184 	.word	0x20000184
 8080ea0:	08082aa4 	.word	0x08082aa4

08080ea4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8080ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8080ea6:	4606      	mov	r6, r0
 8080ea8:	460d      	mov	r5, r1
 8080eaa:	188f      	adds	r7, r1, r2
  size_t n = 0;
 8080eac:	2400      	movs	r4, #0
  while (size--) {
 8080eae:	42bd      	cmp	r5, r7
 8080eb0:	d00c      	beq.n	8080ecc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 8080eb2:	6833      	ldr	r3, [r6, #0]
 8080eb4:	f815 1b01 	ldrb.w	r1, [r5], #1
 8080eb8:	689b      	ldr	r3, [r3, #8]
 8080eba:	4630      	mov	r0, r6
 8080ebc:	4798      	blx	r3
     if (chunk>=0)
 8080ebe:	2800      	cmp	r0, #0
 8080ec0:	db01      	blt.n	8080ec6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 8080ec2:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 8080ec4:	e7f3      	b.n	8080eae <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 8080ec6:	2c00      	cmp	r4, #0
 8080ec8:	bf08      	it	eq
 8080eca:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 8080ecc:	4620      	mov	r0, r4
 8080ece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08080ed0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 8080ed0:	b570      	push	{r4, r5, r6, lr}
 8080ed2:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 8080ed4:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 8080ed6:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 8080ed8:	b149      	cbz	r1, 8080eee <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 8080eda:	f001 f90a 	bl	80820f2 <strlen>
 8080ede:	682b      	ldr	r3, [r5, #0]
 8080ee0:	4602      	mov	r2, r0
 8080ee2:	4621      	mov	r1, r4
 8080ee4:	4628      	mov	r0, r5
    }
 8080ee6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 8080eea:	68db      	ldr	r3, [r3, #12]
 8080eec:	4718      	bx	r3
    }
 8080eee:	bd70      	pop	{r4, r5, r6, pc}

08080ef0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 8080ef0:	6803      	ldr	r3, [r0, #0]
 8080ef2:	689b      	ldr	r3, [r3, #8]
 8080ef4:	4718      	bx	r3

08080ef6 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 8080ef6:	2a01      	cmp	r2, #1
 8080ef8:	bf98      	it	ls
 8080efa:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 8080efc:	b530      	push	{r4, r5, lr}
 8080efe:	460b      	mov	r3, r1
 8080f00:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 8080f02:	2100      	movs	r1, #0
 8080f04:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8080f08:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 8080f0c:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 8080f10:	fb05 3312 	mls	r3, r5, r2, r3
 8080f14:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8080f16:	2b09      	cmp	r3, #9
 8080f18:	bf94      	ite	ls
 8080f1a:	3330      	addls	r3, #48	; 0x30
 8080f1c:	3337      	addhi	r3, #55	; 0x37
 8080f1e:	b2db      	uxtb	r3, r3
 8080f20:	4621      	mov	r1, r4
 8080f22:	f804 3901 	strb.w	r3, [r4], #-1
 8080f26:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 8080f28:	2d00      	cmp	r5, #0
 8080f2a:	d1ef      	bne.n	8080f0c <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 8080f2c:	f7ff ffd0 	bl	8080ed0 <_ZN5Print5writeEPKc>
}
 8080f30:	b00b      	add	sp, #44	; 0x2c
 8080f32:	bd30      	pop	{r4, r5, pc}

08080f34 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 8080f34:	b410      	push	{r4}
  if (base == 0) return write(n);
 8080f36:	b922      	cbnz	r2, 8080f42 <_ZN5Print5printEmi+0xe>
 8080f38:	6803      	ldr	r3, [r0, #0]
 8080f3a:	b2c9      	uxtb	r1, r1
 8080f3c:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 8080f3e:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 8080f40:	4718      	bx	r3
  else return printNumber(n, base);
 8080f42:	b2d2      	uxtb	r2, r2
}
 8080f44:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 8080f46:	f7ff bfd6 	b.w	8080ef6 <_ZN5Print11printNumberEmh>

08080f4a <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 8080f4a:	f7ff bff3 	b.w	8080f34 <_ZN5Print5printEmi>

08080f4e <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 8080f4e:	b510      	push	{r4, lr}
 8080f50:	4604      	mov	r4, r0
 8080f52:	f7ff fc16 	bl	8080782 <_ZNSt14_Function_baseD1Ev>
 8080f56:	4620      	mov	r0, r4
 8080f58:	bd10      	pop	{r4, pc}
	...

08080f5c <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8080f5c:	4803      	ldr	r0, [pc, #12]	; (8080f6c <_GLOBAL__sub_I_RGB+0x10>)
 8080f5e:	2300      	movs	r3, #0
 8080f60:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 8080f62:	4a03      	ldr	r2, [pc, #12]	; (8080f70 <_GLOBAL__sub_I_RGB+0x14>)
 8080f64:	4903      	ldr	r1, [pc, #12]	; (8080f74 <_GLOBAL__sub_I_RGB+0x18>)
 8080f66:	f000 bbdb 	b.w	8081720 <__aeabi_atexit>
 8080f6a:	bf00      	nop
 8080f6c:	2000018c 	.word	0x2000018c
 8080f70:	200000c4 	.word	0x200000c4
 8080f74:	08080f4f 	.word	0x08080f4f

08080f78 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 8080f78:	4770      	bx	lr

08080f7a <_ZN8SPIClassD0Ev>:
 8080f7a:	b510      	push	{r4, lr}
 8080f7c:	4604      	mov	r4, r0
 8080f7e:	2110      	movs	r1, #16
 8080f80:	f000 fbd3 	bl	808172a <_ZdlPvj>
 8080f84:	4620      	mov	r0, r4
 8080f86:	bd10      	pop	{r4, pc}

08080f88 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 8080f88:	b570      	push	{r4, r5, r6, lr}
 8080f8a:	4604      	mov	r4, r0
 8080f8c:	460e      	mov	r6, r1
 8080f8e:	4b07      	ldr	r3, [pc, #28]	; (8080fac <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 8080f90:	2500      	movs	r5, #0
 8080f92:	6003      	str	r3, [r0, #0]
 8080f94:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 8080f98:	f7ff f9b2 	bl	8080300 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 8080f9c:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 8080f9e:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 8080fa0:	f7ff f9e6 	bl	8080370 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 8080fa4:	60a5      	str	r5, [r4, #8]
}
 8080fa6:	4620      	mov	r0, r4
 8080fa8:	bd70      	pop	{r4, r5, r6, pc}
 8080faa:	bf00      	nop
 8080fac:	08082ad8 	.word	0x08082ad8

08080fb0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 8080fb0:	b510      	push	{r4, lr}
 8080fb2:	4604      	mov	r4, r0
{
	free(buffer);
 8080fb4:	6800      	ldr	r0, [r0, #0]
 8080fb6:	f7ff fb17 	bl	80805e8 <free>
}
 8080fba:	4620      	mov	r0, r4
 8080fbc:	bd10      	pop	{r4, pc}

08080fbe <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 8080fbe:	b510      	push	{r4, lr}
 8080fc0:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 8080fc2:	6800      	ldr	r0, [r0, #0]
 8080fc4:	b108      	cbz	r0, 8080fca <_ZN6String10invalidateEv+0xc>
 8080fc6:	f7ff fb0f 	bl	80805e8 <free>
	buffer = NULL;
 8080fca:	2300      	movs	r3, #0
 8080fcc:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 8080fce:	60a3      	str	r3, [r4, #8]
 8080fd0:	6063      	str	r3, [r4, #4]
 8080fd2:	bd10      	pop	{r4, pc}

08080fd4 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 8080fd4:	b538      	push	{r3, r4, r5, lr}
 8080fd6:	4604      	mov	r4, r0
 8080fd8:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 8080fda:	6800      	ldr	r0, [r0, #0]
 8080fdc:	3101      	adds	r1, #1
 8080fde:	f7ff fb0b 	bl	80805f8 <realloc>
	if (newbuffer) {
 8080fe2:	b110      	cbz	r0, 8080fea <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 8080fe4:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 8080fe8:	2001      	movs	r0, #1
	}
	return 0;
}
 8080fea:	bd38      	pop	{r3, r4, r5, pc}

08080fec <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 8080fec:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 8080fee:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 8080ff0:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 8080ff2:	b113      	cbz	r3, 8080ffa <_ZN6String7reserveEj+0xe>
 8080ff4:	6843      	ldr	r3, [r0, #4]
 8080ff6:	428b      	cmp	r3, r1
 8080ff8:	d207      	bcs.n	808100a <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 8080ffa:	4620      	mov	r0, r4
 8080ffc:	f7ff ffea 	bl	8080fd4 <_ZN6String12changeBufferEj>
 8081000:	b120      	cbz	r0, 808100c <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 8081002:	68a3      	ldr	r3, [r4, #8]
 8081004:	b90b      	cbnz	r3, 808100a <_ZN6String7reserveEj+0x1e>
 8081006:	6822      	ldr	r2, [r4, #0]
 8081008:	7013      	strb	r3, [r2, #0]
 808100a:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 808100c:	bd10      	pop	{r4, pc}

0808100e <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 808100e:	b570      	push	{r4, r5, r6, lr}
 8081010:	460e      	mov	r6, r1
	if (!reserve(length)) {
 8081012:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 8081014:	4604      	mov	r4, r0
 8081016:	4615      	mov	r5, r2
	if (!reserve(length)) {
 8081018:	f7ff ffe8 	bl	8080fec <_ZN6String7reserveEj>
 808101c:	b918      	cbnz	r0, 8081026 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 808101e:	4620      	mov	r0, r4
 8081020:	f7ff ffcd 	bl	8080fbe <_ZN6String10invalidateEv>
		return *this;
 8081024:	e009      	b.n	808103a <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 8081026:	462a      	mov	r2, r5
 8081028:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 808102a:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 808102c:	6820      	ldr	r0, [r4, #0]
 808102e:	f000 fff7 	bl	8082020 <memcpy>
	buffer[len] = 0;
 8081032:	6822      	ldr	r2, [r4, #0]
 8081034:	68a3      	ldr	r3, [r4, #8]
 8081036:	2100      	movs	r1, #0
 8081038:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 808103a:	4620      	mov	r0, r4
 808103c:	bd70      	pop	{r4, r5, r6, pc}

0808103e <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 808103e:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8081040:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 8081042:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8081044:	6003      	str	r3, [r0, #0]
	capacity = 0;
 8081046:	6043      	str	r3, [r0, #4]
	len = 0;
 8081048:	6083      	str	r3, [r0, #8]
	flags = 0;
 808104a:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 808104c:	460d      	mov	r5, r1
 808104e:	b139      	cbz	r1, 8081060 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 8081050:	4608      	mov	r0, r1
 8081052:	f001 f84e 	bl	80820f2 <strlen>
 8081056:	4629      	mov	r1, r5
 8081058:	4602      	mov	r2, r0
 808105a:	4620      	mov	r0, r4
 808105c:	f7ff ffd7 	bl	808100e <_ZN6String4copyEPKcj>
}
 8081060:	4620      	mov	r0, r4
 8081062:	bd38      	pop	{r3, r4, r5, pc}

08081064 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 8081064:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8081068:	4b03      	ldr	r3, [pc, #12]	; (8081078 <_GLOBAL__sub_I_System+0x14>)
 808106a:	2000      	movs	r0, #0
 808106c:	7018      	strb	r0, [r3, #0]
 808106e:	8058      	strh	r0, [r3, #2]
 8081070:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8081072:	f7ff b9f5 	b.w	8080460 <set_system_mode>
 8081076:	bf00      	nop
 8081078:	2000019c 	.word	0x2000019c

0808107c <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 808107c:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
 808107e:	4b14      	ldr	r3, [pc, #80]	; (80810d0 <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 8081080:	4f14      	ldr	r7, [pc, #80]	; (80810d4 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 8081082:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
 8081084:	4b14      	ldr	r3, [pc, #80]	; (80810d8 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 8081086:	4406      	add	r6, r0
    unix_time += dst_current_cache;
 8081088:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
 808108a:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
 808108c:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
 808108e:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 8081090:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 8081092:	d01b      	beq.n	80810cc <_ZL22Refresh_UnixTime_Cachel+0x50>
 8081094:	a80a      	add	r0, sp, #40	; 0x28
 8081096:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
 808109a:	f000 fec9 	bl	8081e30 <localtime>
	calendar_time->tm_year += 1900;
	return *calendar_time;
 808109e:	4604      	mov	r4, r0
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 80810a0:	6943      	ldr	r3, [r0, #20]
	return *calendar_time;
 80810a2:	ad01      	add	r5, sp, #4
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 80810a4:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 80810a8:	6143      	str	r3, [r0, #20]
	return *calendar_time;
 80810aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80810ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80810ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80810b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80810b2:	f8d4 e000 	ldr.w	lr, [r4]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80810b6:	4c09      	ldr	r4, [pc, #36]	; (80810dc <_ZL22Refresh_UnixTime_Cachel+0x60>)
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
 80810b8:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80810bc:	ad01      	add	r5, sp, #4
 80810be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80810c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80810c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80810c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
 80810c6:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80810c8:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
 80810cc:	b00b      	add	sp, #44	; 0x2c
 80810ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80810d0:	200001d4 	.word	0x200001d4
 80810d4:	200001d0 	.word	0x200001d0
 80810d8:	200001cc 	.word	0x200001cc
 80810dc:	200001a4 	.word	0x200001a4

080810e0 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
 80810e0:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 80810e2:	2000      	movs	r0, #0
 80810e4:	f7ff fa18 	bl	8080518 <spark_sync_time_pending>
 80810e8:	b128      	cbz	r0, 80810f6 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80810ea:	f7ff fa05 	bl	80804f8 <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 80810ee:	f080 0001 	eor.w	r0, r0, #1
 80810f2:	b2c0      	uxtb	r0, r0
 80810f4:	bd08      	pop	{r3, pc}
 80810f6:	2001      	movs	r0, #1
    }
 80810f8:	bd08      	pop	{r3, pc}
	...

080810fc <_ZN9TimeClass7weekdayEl>:
	return weekday(now());
}

/* the weekday for the given time */
int TimeClass::weekday(time_t t)
{
 80810fc:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 80810fe:	f7ff ffbd 	bl	808107c <_ZL22Refresh_UnixTime_Cachel>
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
 8081102:	4b02      	ldr	r3, [pc, #8]	; (808110c <_ZN9TimeClass7weekdayEl+0x10>)
 8081104:	6998      	ldr	r0, [r3, #24]
}
 8081106:	3001      	adds	r0, #1
 8081108:	bd08      	pop	{r3, pc}
 808110a:	bf00      	nop
 808110c:	200001a4 	.word	0x200001a4

08081110 <_ZN9TimeClass5monthEl>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
 8081110:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 8081112:	f7ff ffb3 	bl	808107c <_ZL22Refresh_UnixTime_Cachel>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
 8081116:	4b02      	ldr	r3, [pc, #8]	; (8081120 <_ZN9TimeClass5monthEl+0x10>)
 8081118:	6918      	ldr	r0, [r3, #16]
}
 808111a:	3001      	adds	r0, #1
 808111c:	bd08      	pop	{r3, pc}
 808111e:	bf00      	nop
 8081120:	200001a4 	.word	0x200001a4

08081124 <_ZN9TimeClass4zoneEf>:
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 8081124:	b510      	push	{r4, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
 8081126:	4909      	ldr	r1, [pc, #36]	; (808114c <_ZN9TimeClass4zoneEf+0x28>)
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 8081128:	4604      	mov	r4, r0
	if(GMT_Offset < -12 || GMT_Offset > 14)
 808112a:	f000 fde9 	bl	8081d00 <__aeabi_fcmplt>
 808112e:	b960      	cbnz	r0, 808114a <_ZN9TimeClass4zoneEf+0x26>
 8081130:	4907      	ldr	r1, [pc, #28]	; (8081150 <_ZN9TimeClass4zoneEf+0x2c>)
 8081132:	4620      	mov	r0, r4
 8081134:	f000 fe02 	bl	8081d3c <__aeabi_fcmpgt>
 8081138:	b938      	cbnz	r0, 808114a <_ZN9TimeClass4zoneEf+0x26>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
 808113a:	4906      	ldr	r1, [pc, #24]	; (8081154 <_ZN9TimeClass4zoneEf+0x30>)
 808113c:	4620      	mov	r0, r4
 808113e:	f000 fc41 	bl	80819c4 <__aeabi_fmul>
 8081142:	f000 fe05 	bl	8081d50 <__aeabi_f2iz>
 8081146:	4b04      	ldr	r3, [pc, #16]	; (8081158 <_ZN9TimeClass4zoneEf+0x34>)
 8081148:	6018      	str	r0, [r3, #0]
 808114a:	bd10      	pop	{r4, pc}
 808114c:	c1400000 	.word	0xc1400000
 8081150:	41600000 	.word	0x41600000
 8081154:	45610000 	.word	0x45610000
 8081158:	200001d4 	.word	0x200001d4

0808115c <_ZN9TimeClass12setDSTOffsetEf>:
{
    return dst_cache / 3600.0;
}

void TimeClass::setDSTOffset(float offset)
{
 808115c:	b510      	push	{r4, lr}
    if (offset < 0 || offset > 2)
 808115e:	2100      	movs	r1, #0
{
    return dst_cache / 3600.0;
}

void TimeClass::setDSTOffset(float offset)
{
 8081160:	4604      	mov	r4, r0
    if (offset < 0 || offset > 2)
 8081162:	f000 fdcd 	bl	8081d00 <__aeabi_fcmplt>
 8081166:	b968      	cbnz	r0, 8081184 <_ZN9TimeClass12setDSTOffsetEf+0x28>
 8081168:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 808116c:	4620      	mov	r0, r4
 808116e:	f000 fde5 	bl	8081d3c <__aeabi_fcmpgt>
 8081172:	b938      	cbnz	r0, 8081184 <_ZN9TimeClass12setDSTOffsetEf+0x28>
    {
        return;
    }
    dst_cache = offset * 3600;
 8081174:	4904      	ldr	r1, [pc, #16]	; (8081188 <_ZN9TimeClass12setDSTOffsetEf+0x2c>)
 8081176:	4620      	mov	r0, r4
 8081178:	f000 fc24 	bl	80819c4 <__aeabi_fmul>
 808117c:	f000 fde8 	bl	8081d50 <__aeabi_f2iz>
 8081180:	4b02      	ldr	r3, [pc, #8]	; (808118c <_ZN9TimeClass12setDSTOffsetEf+0x30>)
 8081182:	6018      	str	r0, [r3, #0]
 8081184:	bd10      	pop	{r4, pc}
 8081186:	bf00      	nop
 8081188:	45610000 	.word	0x45610000
 808118c:	20000008 	.word	0x20000008

08081190 <_ZN9TimeClass8beginDSTEv>:
}

void TimeClass::beginDST()
{
    dst_current_cache = dst_cache;
 8081190:	4b02      	ldr	r3, [pc, #8]	; (808119c <_ZN9TimeClass8beginDSTEv+0xc>)
 8081192:	681a      	ldr	r2, [r3, #0]
 8081194:	4b02      	ldr	r3, [pc, #8]	; (80811a0 <_ZN9TimeClass8beginDSTEv+0x10>)
 8081196:	601a      	str	r2, [r3, #0]
 8081198:	4770      	bx	lr
 808119a:	bf00      	nop
 808119c:	20000008 	.word	0x20000008
 80811a0:	200001cc 	.word	0x200001cc

080811a4 <_ZN9TimeClass6endDSTEv>:
}

void TimeClass::endDST()
{
    dst_current_cache = 0;
 80811a4:	4b01      	ldr	r3, [pc, #4]	; (80811ac <_ZN9TimeClass6endDSTEv+0x8>)
 80811a6:	2200      	movs	r2, #0
 80811a8:	601a      	str	r2, [r3, #0]
 80811aa:	4770      	bx	lr
 80811ac:	200001cc 	.word	0x200001cc

080811b0 <_ZN9TimeClass5isDSTEv>:
}

uint8_t TimeClass::isDST()
{
    return !(dst_current_cache == 0);
 80811b0:	4b02      	ldr	r3, [pc, #8]	; (80811bc <_ZN9TimeClass5isDSTEv+0xc>)
 80811b2:	6818      	ldr	r0, [r3, #0]
}
 80811b4:	3000      	adds	r0, #0
 80811b6:	bf18      	it	ne
 80811b8:	2001      	movne	r0, #1
 80811ba:	4770      	bx	lr
 80811bc:	200001cc 	.word	0x200001cc

080811c0 <_ZN9TimeClass7setTimeEl>:

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
 80811c0:	b508      	push	{r3, lr}
    HAL_RTC_Set_UnixTime(t);
 80811c2:	f7ff f8bd 	bl	8080340 <HAL_RTC_Set_UnixTime>
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}
 80811c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
    HAL_RTC_Set_UnixTime(t);
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
 80811ca:	2200      	movs	r2, #0
 80811cc:	4611      	mov	r1, r2
 80811ce:	4610      	mov	r0, r2
 80811d0:	f7ff b96e 	b.w	80804b0 <system_notify_time_changed>

080811d4 <_ZN9TimeClass7timeStrEl>:
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 80811d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
 80811d6:	4b0e      	ldr	r3, [pc, #56]	; (8081210 <_ZN9TimeClass7timeStrEl+0x3c>)
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 80811d8:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
 80811da:	681b      	ldr	r3, [r3, #0]
 80811dc:	a802      	add	r0, sp, #8
 80811de:	4419      	add	r1, r3
 80811e0:	4b0c      	ldr	r3, [pc, #48]	; (8081214 <_ZN9TimeClass7timeStrEl+0x40>)
 80811e2:	681b      	ldr	r3, [r3, #0]
 80811e4:	4419      	add	r1, r3
 80811e6:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
 80811ea:	f000 fe21 	bl	8081e30 <localtime>
        char* ascstr = asctime(calendar_time);
 80811ee:	f000 fdd5 	bl	8081d9c <asctime>
 80811f2:	4605      	mov	r5, r0
        int len = strlen(ascstr);
 80811f4:	f000 ff7d 	bl	80820f2 <strlen>
        ascstr[len-1] = 0; // remove final newline
 80811f8:	2300      	movs	r3, #0
 80811fa:	4428      	add	r0, r5
 80811fc:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
 8081200:	4629      	mov	r1, r5
 8081202:	4620      	mov	r0, r4
 8081204:	f7ff ff1b 	bl	808103e <_ZN6StringC1EPK19__FlashStringHelper>
}
 8081208:	4620      	mov	r0, r4
 808120a:	b003      	add	sp, #12
 808120c:	bd30      	pop	{r4, r5, pc}
 808120e:	bf00      	nop
 8081210:	200001d4 	.word	0x200001d4
 8081214:	200001cc 	.word	0x200001cc

08081218 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 8081218:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
 808121a:	2000      	movs	r0, #0
 808121c:	f7ff f898 	bl	8080350 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
 8081220:	4604      	mov	r4, r0
 8081222:	b968      	cbnz	r0, 8081240 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 8081224:	f7ff f914 	bl	8080450 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 8081228:	2801      	cmp	r0, #1
 808122a:	d10b      	bne.n	8081244 <_ZN9TimeClass7isValidEv+0x2c>
 808122c:	4620      	mov	r0, r4
 808122e:	f7ff f937 	bl	80804a0 <system_thread_get_state>
 8081232:	b938      	cbnz	r0, 8081244 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
 8081234:	f7ff ff54 	bl	80810e0 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8081238:	b930      	cbnz	r0, 8081248 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
 808123a:	f7ff f955 	bl	80804e8 <spark_process>
 808123e:	e7f9      	b.n	8081234 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
 8081240:	2001      	movs	r0, #1
 8081242:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
 8081244:	2000      	movs	r0, #0
 8081246:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
 8081248:	f7ff ff4a 	bl	80810e0 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
 808124c:	2000      	movs	r0, #0
 808124e:	f7ff f87f 	bl	8080350 <HAL_RTC_Time_Is_Valid>
 8081252:	3000      	adds	r0, #0
 8081254:	bf18      	it	ne
 8081256:	2001      	movne	r0, #1
    }
    return rtcstate;
}
 8081258:	bd10      	pop	{r4, pc}

0808125a <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
 808125a:	b508      	push	{r3, lr}
    (void)isValid();
 808125c:	f7ff ffdc 	bl	8081218 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
 8081260:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
 8081264:	f7ff b864 	b.w	8080330 <HAL_RTC_Get_UnixTime>

08081268 <_ZN9TimeClass3dayEv>:
	return calendar_time_cache.tm_sec;
}

/* current day */
int TimeClass::day()
{
 8081268:	b508      	push	{r3, lr}
	return day(now());
 808126a:	f7ff fff6 	bl	808125a <_ZN9TimeClass3nowEv>
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
	Refresh_UnixTime_Cache(t);
 808126e:	f7ff ff05 	bl	808107c <_ZL22Refresh_UnixTime_Cachel>

/* current day */
int TimeClass::day()
{
	return day(now());
}
 8081272:	4b01      	ldr	r3, [pc, #4]	; (8081278 <_ZN9TimeClass3dayEv+0x10>)
 8081274:	68d8      	ldr	r0, [r3, #12]
 8081276:	bd08      	pop	{r3, pc}
 8081278:	200001a4 	.word	0x200001a4

0808127c <_ZN9TimeClass7weekdayEv>:
	return calendar_time_cache.tm_mday;
}

/* the current weekday */
int TimeClass::weekday()
{
 808127c:	b508      	push	{r3, lr}
	return weekday(now());
 808127e:	f7ff ffec 	bl	808125a <_ZN9TimeClass3nowEv>
}
 8081282:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

/* the current weekday */
int TimeClass::weekday()
{
	return weekday(now());
 8081286:	f7ff bf39 	b.w	80810fc <_ZN9TimeClass7weekdayEl>

0808128a <_ZN9TimeClass5monthEv>:
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
}

/* current month */
int TimeClass::month()
{
 808128a:	b508      	push	{r3, lr}
	return month(now());
 808128c:	f7ff ffe5 	bl	808125a <_ZN9TimeClass3nowEv>
}
 8081290:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

/* current month */
int TimeClass::month()
{
	return month(now());
 8081294:	f7ff bf3c 	b.w	8081110 <_ZN9TimeClass5monthEl>

08081298 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 8081298:	4b02      	ldr	r3, [pc, #8]	; (80812a4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 808129a:	681a      	ldr	r2, [r3, #0]
 808129c:	4b02      	ldr	r3, [pc, #8]	; (80812a8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 808129e:	601a      	str	r2, [r3, #0]
 80812a0:	4770      	bx	lr
 80812a2:	bf00      	nop
 80812a4:	2000000c 	.word	0x2000000c
 80812a8:	200001c8 	.word	0x200001c8

080812ac <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80812ac:	4770      	bx	lr

080812ae <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80812ae:	7441      	strb	r1, [r0, #17]
 80812b0:	4770      	bx	lr

080812b2 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80812b2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80812b4:	7c00      	ldrb	r0, [r0, #16]
 80812b6:	f7ff f893 	bl	80803e0 <HAL_USART_Available_Data_For_Write>
}
 80812ba:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80812be:	bd08      	pop	{r3, pc}

080812c0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80812c0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80812c2:	7c00      	ldrb	r0, [r0, #16]
 80812c4:	f7ff f86c 	bl	80803a0 <HAL_USART_Available_Data>
}
 80812c8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80812cc:	bd08      	pop	{r3, pc}

080812ce <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80812ce:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80812d0:	7c00      	ldrb	r0, [r0, #16]
 80812d2:	f7ff f875 	bl	80803c0 <HAL_USART_Peek_Data>
}
 80812d6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80812da:	bf28      	it	cs
 80812dc:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80812e0:	bd08      	pop	{r3, pc}

080812e2 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80812e2:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80812e4:	7c00      	ldrb	r0, [r0, #16]
 80812e6:	f7ff f863 	bl	80803b0 <HAL_USART_Read_Data>
}
 80812ea:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80812ee:	bf28      	it	cs
 80812f0:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80812f4:	bd08      	pop	{r3, pc}

080812f6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80812f6:	7c00      	ldrb	r0, [r0, #16]
 80812f8:	f7ff b86a 	b.w	80803d0 <HAL_USART_Flush_Data>

080812fc <_ZN11USARTSerialD0Ev>:
 80812fc:	b510      	push	{r4, lr}
 80812fe:	4604      	mov	r4, r0
 8081300:	2114      	movs	r1, #20
 8081302:	f000 fa12 	bl	808172a <_ZdlPvj>
 8081306:	4620      	mov	r0, r4
 8081308:	bd10      	pop	{r4, pc}

0808130a <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 808130a:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 808130c:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 808130e:	4604      	mov	r4, r0
 8081310:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 8081312:	b925      	cbnz	r5, 808131e <_ZN11USARTSerial5writeEh+0x14>
 8081314:	7c00      	ldrb	r0, [r0, #16]
 8081316:	f7ff f863 	bl	80803e0 <HAL_USART_Available_Data_For_Write>
 808131a:	2800      	cmp	r0, #0
 808131c:	dd05      	ble.n	808132a <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 808131e:	4631      	mov	r1, r6
 8081320:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 8081322:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 8081326:	f7ff b833 	b.w	8080390 <HAL_USART_Write_Data>
  }
  return 0;
}
 808132a:	4628      	mov	r0, r5
 808132c:	bd70      	pop	{r4, r5, r6, pc}
	...

08081330 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 8081330:	b510      	push	{r4, lr}
 8081332:	4604      	mov	r4, r0
 8081334:	4608      	mov	r0, r1
 8081336:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 8081338:	2200      	movs	r2, #0
 808133a:	6062      	str	r2, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 808133c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8081340:	60a2      	str	r2, [r4, #8]
 8081342:	4a05      	ldr	r2, [pc, #20]	; (8081358 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 8081344:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 8081346:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 8081348:	2201      	movs	r2, #1
 808134a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 808134c:	461a      	mov	r2, r3
 808134e:	f7ff f817 	bl	8080380 <HAL_USART_Init>
}
 8081352:	4620      	mov	r0, r4
 8081354:	bd10      	pop	{r4, pc}
 8081356:	bf00      	nop
 8081358:	08082b10 	.word	0x08082b10

0808135c <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 808135c:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 808135e:	4d0c      	ldr	r5, [pc, #48]	; (8081390 <_Z22__fetch_global_Serial1v+0x34>)
 8081360:	6829      	ldr	r1, [r5, #0]
 8081362:	f011 0401 	ands.w	r4, r1, #1
 8081366:	d111      	bne.n	808138c <_Z22__fetch_global_Serial1v+0x30>
 8081368:	4628      	mov	r0, r5
 808136a:	f7fe fe9a 	bl	80800a2 <__cxa_guard_acquire>
 808136e:	b168      	cbz	r0, 808138c <_Z22__fetch_global_Serial1v+0x30>
 8081370:	4a08      	ldr	r2, [pc, #32]	; (8081394 <_Z22__fetch_global_Serial1v+0x38>)
 8081372:	4621      	mov	r1, r4
 8081374:	4b08      	ldr	r3, [pc, #32]	; (8081398 <_Z22__fetch_global_Serial1v+0x3c>)
 8081376:	4809      	ldr	r0, [pc, #36]	; (808139c <_Z22__fetch_global_Serial1v+0x40>)
 8081378:	f7ff ffda 	bl	8081330 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 808137c:	4628      	mov	r0, r5
 808137e:	f7fe fe95 	bl	80800ac <__cxa_guard_release>
 8081382:	4a07      	ldr	r2, [pc, #28]	; (80813a0 <_Z22__fetch_global_Serial1v+0x44>)
 8081384:	4907      	ldr	r1, [pc, #28]	; (80813a4 <_Z22__fetch_global_Serial1v+0x48>)
 8081386:	4805      	ldr	r0, [pc, #20]	; (808139c <_Z22__fetch_global_Serial1v+0x40>)
 8081388:	f000 f9ca 	bl	8081720 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 808138c:	4803      	ldr	r0, [pc, #12]	; (808139c <_Z22__fetch_global_Serial1v+0x40>)
 808138e:	bd38      	pop	{r3, r4, r5, pc}
 8081390:	20000270 	.word	0x20000270
 8081394:	20000274 	.word	0x20000274
 8081398:	200001ec 	.word	0x200001ec
 808139c:	200001d8 	.word	0x200001d8
 80813a0:	200000c4 	.word	0x200000c4
 80813a4:	080812ad 	.word	0x080812ad

080813a8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80813a8:	7441      	strb	r1, [r0, #17]
 80813aa:	4770      	bx	lr

080813ac <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80813ac:	4770      	bx	lr

080813ae <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80813ae:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80813b0:	2100      	movs	r1, #0
 80813b2:	7c00      	ldrb	r0, [r0, #16]
 80813b4:	f7ff f834 	bl	8080420 <HAL_USB_USART_Receive_Data>
}
 80813b8:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80813bc:	bf28      	it	cs
 80813be:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80813c2:	bd08      	pop	{r3, pc}

080813c4 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80813c4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80813c6:	2101      	movs	r1, #1
 80813c8:	7c00      	ldrb	r0, [r0, #16]
 80813ca:	f7ff f829 	bl	8080420 <HAL_USB_USART_Receive_Data>
}
 80813ce:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80813d2:	bf28      	it	cs
 80813d4:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80813d8:	bd08      	pop	{r3, pc}

080813da <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80813da:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80813dc:	7c00      	ldrb	r0, [r0, #16]
 80813de:	f7ff f817 	bl	8080410 <HAL_USB_USART_Available_Data_For_Write>
}
 80813e2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80813e6:	bd08      	pop	{r3, pc}

080813e8 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80813e8:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80813ea:	7c00      	ldrb	r0, [r0, #16]
 80813ec:	f7ff f808 	bl	8080400 <HAL_USB_USART_Available_Data>
}
 80813f0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80813f4:	bd08      	pop	{r3, pc}

080813f6 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80813f6:	7c00      	ldrb	r0, [r0, #16]
 80813f8:	f7ff b822 	b.w	8080440 <HAL_USB_USART_Flush_Data>

080813fc <_ZN9USBSerialD0Ev>:
 80813fc:	b510      	push	{r4, lr}
 80813fe:	4604      	mov	r4, r0
 8081400:	2114      	movs	r1, #20
 8081402:	f000 f992 	bl	808172a <_ZdlPvj>
 8081406:	4620      	mov	r0, r4
 8081408:	bd10      	pop	{r4, pc}

0808140a <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 808140a:	b538      	push	{r3, r4, r5, lr}
 808140c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 808140e:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 8081410:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8081412:	f7fe fffd 	bl	8080410 <HAL_USB_USART_Available_Data_For_Write>
 8081416:	2800      	cmp	r0, #0
 8081418:	dc01      	bgt.n	808141e <_ZN9USBSerial5writeEh+0x14>
 808141a:	7c60      	ldrb	r0, [r4, #17]
 808141c:	b128      	cbz	r0, 808142a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 808141e:	4629      	mov	r1, r5
 8081420:	7c20      	ldrb	r0, [r4, #16]
 8081422:	f7ff f805 	bl	8080430 <HAL_USB_USART_Send_Data>
 8081426:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 808142a:	bd38      	pop	{r3, r4, r5, pc}

0808142c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 808142c:	b510      	push	{r4, lr}
 808142e:	4604      	mov	r4, r0
 8081430:	2300      	movs	r3, #0
 8081432:	6063      	str	r3, [r4, #4]
 8081434:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8081438:	60a3      	str	r3, [r4, #8]
 808143a:	4b05      	ldr	r3, [pc, #20]	; (8081450 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 808143c:	4608      	mov	r0, r1
 808143e:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 8081440:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 8081442:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 8081444:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 8081446:	4611      	mov	r1, r2
 8081448:	f7fe ffd2 	bl	80803f0 <HAL_USB_USART_Init>
}
 808144c:	4620      	mov	r0, r4
 808144e:	bd10      	pop	{r4, pc}
 8081450:	08082b40 	.word	0x08082b40

08081454 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 8081454:	b510      	push	{r4, lr}
 8081456:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8081458:	2214      	movs	r2, #20
 808145a:	2100      	movs	r1, #0
 808145c:	f000 fdeb 	bl	8082036 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 8081460:	4b05      	ldr	r3, [pc, #20]	; (8081478 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8081462:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 8081464:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 8081466:	4b05      	ldr	r3, [pc, #20]	; (808147c <_Z19acquireSerialBufferv+0x28>)
 8081468:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 808146a:	f240 1301 	movw	r3, #257	; 0x101
 808146e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8081470:	2381      	movs	r3, #129	; 0x81
 8081472:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 8081474:	bd10      	pop	{r4, pc}
 8081476:	bf00      	nop
 8081478:	2000037d 	.word	0x2000037d
 808147c:	200002fc 	.word	0x200002fc

08081480 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 8081480:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8081482:	4d0e      	ldr	r5, [pc, #56]	; (80814bc <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 8081484:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 8081486:	a801      	add	r0, sp, #4
 8081488:	f7ff ffe4 	bl	8081454 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 808148c:	6829      	ldr	r1, [r5, #0]
 808148e:	f011 0401 	ands.w	r4, r1, #1
 8081492:	d110      	bne.n	80814b6 <_Z16_fetch_usbserialv+0x36>
 8081494:	4628      	mov	r0, r5
 8081496:	f7fe fe04 	bl	80800a2 <__cxa_guard_acquire>
 808149a:	b160      	cbz	r0, 80814b6 <_Z16_fetch_usbserialv+0x36>
 808149c:	aa01      	add	r2, sp, #4
 808149e:	4621      	mov	r1, r4
 80814a0:	4807      	ldr	r0, [pc, #28]	; (80814c0 <_Z16_fetch_usbserialv+0x40>)
 80814a2:	f7ff ffc3 	bl	808142c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80814a6:	4628      	mov	r0, r5
 80814a8:	f7fe fe00 	bl	80800ac <__cxa_guard_release>
 80814ac:	4a05      	ldr	r2, [pc, #20]	; (80814c4 <_Z16_fetch_usbserialv+0x44>)
 80814ae:	4906      	ldr	r1, [pc, #24]	; (80814c8 <_Z16_fetch_usbserialv+0x48>)
 80814b0:	4803      	ldr	r0, [pc, #12]	; (80814c0 <_Z16_fetch_usbserialv+0x40>)
 80814b2:	f000 f935 	bl	8081720 <__aeabi_atexit>
	return _usbserial;
}
 80814b6:	4802      	ldr	r0, [pc, #8]	; (80814c0 <_Z16_fetch_usbserialv+0x40>)
 80814b8:	b007      	add	sp, #28
 80814ba:	bd30      	pop	{r4, r5, pc}
 80814bc:	200002f8 	.word	0x200002f8
 80814c0:	20000480 	.word	0x20000480
 80814c4:	200000c4 	.word	0x200000c4
 80814c8:	080813ad 	.word	0x080813ad

080814cc <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80814cc:	b510      	push	{r4, lr}
 80814ce:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80814d0:	2214      	movs	r2, #20
 80814d2:	2100      	movs	r1, #0
 80814d4:	f000 fdaf 	bl	8082036 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80814d8:	4b05      	ldr	r3, [pc, #20]	; (80814f0 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80814da:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80814dc:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80814de:	4b05      	ldr	r3, [pc, #20]	; (80814f4 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80814e0:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80814e2:	f240 1301 	movw	r3, #257	; 0x101
 80814e6:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80814e8:	2381      	movs	r3, #129	; 0x81
 80814ea:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80814ec:	bd10      	pop	{r4, pc}
 80814ee:	bf00      	nop
 80814f0:	20000530 	.word	0x20000530
 80814f4:	20000498 	.word	0x20000498

080814f8 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80814f8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80814fa:	4c0e      	ldr	r4, [pc, #56]	; (8081534 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80814fc:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80814fe:	a801      	add	r0, sp, #4
 8081500:	f7ff ffe4 	bl	80814cc <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8081504:	6823      	ldr	r3, [r4, #0]
 8081506:	07db      	lsls	r3, r3, #31
 8081508:	d410      	bmi.n	808152c <_Z17_fetch_usbserial1v+0x34>
 808150a:	4620      	mov	r0, r4
 808150c:	f7fe fdc9 	bl	80800a2 <__cxa_guard_acquire>
 8081510:	b160      	cbz	r0, 808152c <_Z17_fetch_usbserial1v+0x34>
 8081512:	aa01      	add	r2, sp, #4
 8081514:	2101      	movs	r1, #1
 8081516:	4808      	ldr	r0, [pc, #32]	; (8081538 <_Z17_fetch_usbserial1v+0x40>)
 8081518:	f7ff ff88 	bl	808142c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 808151c:	4620      	mov	r0, r4
 808151e:	f7fe fdc5 	bl	80800ac <__cxa_guard_release>
 8081522:	4a06      	ldr	r2, [pc, #24]	; (808153c <_Z17_fetch_usbserial1v+0x44>)
 8081524:	4906      	ldr	r1, [pc, #24]	; (8081540 <_Z17_fetch_usbserial1v+0x48>)
 8081526:	4804      	ldr	r0, [pc, #16]	; (8081538 <_Z17_fetch_usbserial1v+0x40>)
 8081528:	f000 f8fa 	bl	8081720 <__aeabi_atexit>
  return _usbserial1;
}
 808152c:	4802      	ldr	r0, [pc, #8]	; (8081538 <_Z17_fetch_usbserial1v+0x40>)
 808152e:	b006      	add	sp, #24
 8081530:	bd10      	pop	{r4, pc}
 8081532:	bf00      	nop
 8081534:	20000494 	.word	0x20000494
 8081538:	2000051c 	.word	0x2000051c
 808153c:	200000c4 	.word	0x200000c4
 8081540:	080813ad 	.word	0x080813ad

08081544 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 8081544:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 8081546:	4b18      	ldr	r3, [pc, #96]	; (80815a8 <serialEventRun+0x64>)
 8081548:	b133      	cbz	r3, 8081558 <serialEventRun+0x14>
 808154a:	f7ff ff99 	bl	8081480 <_Z16_fetch_usbserialv>
 808154e:	6803      	ldr	r3, [r0, #0]
 8081550:	691b      	ldr	r3, [r3, #16]
 8081552:	4798      	blx	r3
 8081554:	2800      	cmp	r0, #0
 8081556:	dc1e      	bgt.n	8081596 <serialEventRun+0x52>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 8081558:	4b14      	ldr	r3, [pc, #80]	; (80815ac <serialEventRun+0x68>)
 808155a:	b133      	cbz	r3, 808156a <serialEventRun+0x26>
 808155c:	f7ff fefe 	bl	808135c <_Z22__fetch_global_Serial1v>
 8081560:	6803      	ldr	r3, [r0, #0]
 8081562:	691b      	ldr	r3, [r3, #16]
 8081564:	4798      	blx	r3
 8081566:	2800      	cmp	r0, #0
 8081568:	dc18      	bgt.n	808159c <serialEventRun+0x58>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 808156a:	4b11      	ldr	r3, [pc, #68]	; (80815b0 <serialEventRun+0x6c>)
 808156c:	b10b      	cbz	r3, 8081572 <serialEventRun+0x2e>
 808156e:	f3af 8000 	nop.w
#if Wiring_Serial3
    if (serialEventRun3) serialEventRun3();
#endif

#if Wiring_Serial4
    if (serialEventRun4) serialEventRun4();
 8081572:	4b10      	ldr	r3, [pc, #64]	; (80815b4 <serialEventRun+0x70>)
 8081574:	b10b      	cbz	r3, 808157a <serialEventRun+0x36>
 8081576:	f3af 8000 	nop.w
#endif

#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
 808157a:	4b0f      	ldr	r3, [pc, #60]	; (80815b8 <serialEventRun+0x74>)
 808157c:	b10b      	cbz	r3, 8081582 <serialEventRun+0x3e>
 808157e:	f3af 8000 	nop.w
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 8081582:	4b0e      	ldr	r3, [pc, #56]	; (80815bc <serialEventRun+0x78>)
 8081584:	b17b      	cbz	r3, 80815a6 <serialEventRun+0x62>
 8081586:	f7ff ffb7 	bl	80814f8 <_Z17_fetch_usbserial1v>
 808158a:	6803      	ldr	r3, [r0, #0]
 808158c:	691b      	ldr	r3, [r3, #16]
 808158e:	4798      	blx	r3
 8081590:	2800      	cmp	r0, #0
 8081592:	dc06      	bgt.n	80815a2 <serialEventRun+0x5e>
 8081594:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 8081596:	f3af 8000 	nop.w
 808159a:	e7dd      	b.n	8081558 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 808159c:	f3af 8000 	nop.w
 80815a0:	e7e3      	b.n	808156a <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80815a2:	f3af 8000 	nop.w
 80815a6:	bd08      	pop	{r3, pc}
	...

080815c0 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80815c0:	b508      	push	{r3, lr}
	serialEventRun();
 80815c2:	f7ff ffbf 	bl	8081544 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80815c6:	f7fe feab 	bl	8080320 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80815ca:	4b01      	ldr	r3, [pc, #4]	; (80815d0 <_post_loop+0x10>)
 80815cc:	6018      	str	r0, [r3, #0]
 80815ce:	bd08      	pop	{r3, pc}
 80815d0:	2000063c 	.word	0x2000063c

080815d4 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80815d4:	4802      	ldr	r0, [pc, #8]	; (80815e0 <_Z33system_initialize_user_backup_ramv+0xc>)
 80815d6:	4a03      	ldr	r2, [pc, #12]	; (80815e4 <_Z33system_initialize_user_backup_ramv+0x10>)
 80815d8:	4903      	ldr	r1, [pc, #12]	; (80815e8 <_Z33system_initialize_user_backup_ramv+0x14>)
 80815da:	1a12      	subs	r2, r2, r0
 80815dc:	f000 bd20 	b.w	8082020 <memcpy>
 80815e0:	40024000 	.word	0x40024000
 80815e4:	40024004 	.word	0x40024004
 80815e8:	08082e00 	.word	0x08082e00

080815ec <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80815ec:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80815ee:	2300      	movs	r3, #0
 80815f0:	9300      	str	r3, [sp, #0]
 80815f2:	461a      	mov	r2, r3
 80815f4:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80815f8:	f7fe ff6c 	bl	80804d4 <system_ctrl_set_result>
}
 80815fc:	b003      	add	sp, #12
 80815fe:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08081604 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 8081604:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 8081606:	8843      	ldrh	r3, [r0, #2]
 8081608:	2b0a      	cmp	r3, #10
 808160a:	d008      	beq.n	808161e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 808160c:	2b50      	cmp	r3, #80	; 0x50
 808160e:	d109      	bne.n	8081624 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 8081610:	4b09      	ldr	r3, [pc, #36]	; (8081638 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 8081612:	681b      	ldr	r3, [r3, #0]
 8081614:	b13b      	cbz	r3, 8081626 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 8081616:	b003      	add	sp, #12
 8081618:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 808161c:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 808161e:	f7ff ffe5 	bl	80815ec <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 8081622:	e006      	b.n	8081632 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8081624:	2300      	movs	r3, #0
 8081626:	9300      	str	r3, [sp, #0]
 8081628:	461a      	mov	r2, r3
 808162a:	f06f 0177 	mvn.w	r1, #119	; 0x77
 808162e:	f7fe ff51 	bl	80804d4 <system_ctrl_set_result>
        break;
    }
}
 8081632:	b003      	add	sp, #12
 8081634:	f85d fb04 	ldr.w	pc, [sp], #4
 8081638:	20000634 	.word	0x20000634

0808163c <module_user_init_hook>:

void module_user_init_hook()
{
 808163c:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 808163e:	4c10      	ldr	r4, [pc, #64]	; (8081680 <module_user_init_hook+0x44>)
 8081640:	4d10      	ldr	r5, [pc, #64]	; (8081684 <module_user_init_hook+0x48>)
 8081642:	6823      	ldr	r3, [r4, #0]
 8081644:	42ab      	cmp	r3, r5
 8081646:	4b10      	ldr	r3, [pc, #64]	; (8081688 <module_user_init_hook+0x4c>)
 8081648:	bf0c      	ite	eq
 808164a:	2201      	moveq	r2, #1
 808164c:	2200      	movne	r2, #0
 808164e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 8081650:	d002      	beq.n	8081658 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 8081652:	f7ff ffbf 	bl	80815d4 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 8081656:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 8081658:	f7fe fe5a 	bl	8080310 <HAL_RNG_GetRandomNumber>
 808165c:	4604      	mov	r4, r0
    srand(seed);
 808165e:	f000 fcf3 	bl	8082048 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 8081662:	4b0a      	ldr	r3, [pc, #40]	; (808168c <module_user_init_hook+0x50>)
 8081664:	b113      	cbz	r3, 808166c <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 8081666:	4620      	mov	r0, r4
 8081668:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 808166c:	2100      	movs	r1, #0
 808166e:	4807      	ldr	r0, [pc, #28]	; (808168c <module_user_init_hook+0x50>)
 8081670:	f7fe ff5a 	bl	8080528 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 8081674:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 8081678:	2100      	movs	r1, #0
 808167a:	4805      	ldr	r0, [pc, #20]	; (8081690 <module_user_init_hook+0x54>)
 808167c:	f7fe bf20 	b.w	80804c0 <system_ctrl_set_app_request_handler>
 8081680:	40024000 	.word	0x40024000
 8081684:	9a271c1e 	.word	0x9a271c1e
 8081688:	20000638 	.word	0x20000638
 808168c:	00000000 	.word	0x00000000
 8081690:	08081605 	.word	0x08081605

08081694 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 8081694:	b513      	push	{r0, r1, r4, lr}
 8081696:	4c08      	ldr	r4, [pc, #32]	; (80816b8 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 8081698:	2300      	movs	r3, #0
 808169a:	461a      	mov	r2, r3
 808169c:	4619      	mov	r1, r3
 808169e:	9300      	str	r3, [sp, #0]
 80816a0:	4620      	mov	r0, r4
 80816a2:	f7ff fb87 	bl	8080db4 <_ZN9IPAddressC1Ehhhh>
 80816a6:	4620      	mov	r0, r4
 80816a8:	4a04      	ldr	r2, [pc, #16]	; (80816bc <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80816aa:	4905      	ldr	r1, [pc, #20]	; (80816c0 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80816ac:	b002      	add	sp, #8
 80816ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80816b2:	f000 b835 	b.w	8081720 <__aeabi_atexit>
 80816b6:	bf00      	nop
 80816b8:	20000640 	.word	0x20000640
 80816bc:	200000c4 	.word	0x200000c4
 80816c0:	08080d2d 	.word	0x08080d2d

080816c4 <_GLOBAL__sub_I_SPI>:
#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 80816c4:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80816c6:	4e11      	ldr	r6, [pc, #68]	; (808170c <_GLOBAL__sub_I_SPI+0x48>)
 80816c8:	4d11      	ldr	r5, [pc, #68]	; (8081710 <_GLOBAL__sub_I_SPI+0x4c>)
 80816ca:	4c12      	ldr	r4, [pc, #72]	; (8081714 <_GLOBAL__sub_I_SPI+0x50>)
 80816cc:	2100      	movs	r1, #0
 80816ce:	4630      	mov	r0, r6
 80816d0:	f7ff fc5a 	bl	8080f88 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80816d4:	4630      	mov	r0, r6

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80816d6:	4e10      	ldr	r6, [pc, #64]	; (8081718 <_GLOBAL__sub_I_SPI+0x54>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80816d8:	462a      	mov	r2, r5
 80816da:	4621      	mov	r1, r4
 80816dc:	f000 f820 	bl	8081720 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80816e0:	2101      	movs	r1, #1
 80816e2:	4630      	mov	r0, r6
 80816e4:	f7ff fc50 	bl	8080f88 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80816e8:	4630      	mov	r0, r6
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 80816ea:	4e0c      	ldr	r6, [pc, #48]	; (808171c <_GLOBAL__sub_I_SPI+0x58>)
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80816ec:	462a      	mov	r2, r5
 80816ee:	4621      	mov	r1, r4
 80816f0:	f000 f816 	bl	8081720 <__aeabi_atexit>
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 80816f4:	2102      	movs	r1, #2
 80816f6:	4630      	mov	r0, r6
 80816f8:	f7ff fc46 	bl	8080f88 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80816fc:	462a      	mov	r2, r5
 80816fe:	4621      	mov	r1, r4
 8081700:	4630      	mov	r0, r6
 8081702:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8081706:	f000 b80b 	b.w	8081720 <__aeabi_atexit>
 808170a:	bf00      	nop
 808170c:	20000648 	.word	0x20000648
 8081710:	200000c4 	.word	0x200000c4
 8081714:	08080f79 	.word	0x08080f79
 8081718:	20000658 	.word	0x20000658
 808171c:	20000668 	.word	0x20000668

08081720 <__aeabi_atexit>:
 8081720:	460b      	mov	r3, r1
 8081722:	4601      	mov	r1, r0
 8081724:	4618      	mov	r0, r3
 8081726:	f000 bb75 	b.w	8081e14 <__cxa_atexit>

0808172a <_ZdlPvj>:
 808172a:	f7fe bcb8 	b.w	808009e <_ZdlPv>

0808172e <_ZSt25__throw_bad_function_callv>:
 808172e:	b508      	push	{r3, lr}
 8081730:	f7fe ff82 	bl	8080638 <abort>

08081734 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 8081734:	4b24      	ldr	r3, [pc, #144]	; (80817c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 8081736:	681a      	ldr	r2, [r3, #0]
 8081738:	07d0      	lsls	r0, r2, #31
 808173a:	bf5c      	itt	pl
 808173c:	2201      	movpl	r2, #1
 808173e:	601a      	strpl	r2, [r3, #0]
 8081740:	4b22      	ldr	r3, [pc, #136]	; (80817cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 8081742:	681a      	ldr	r2, [r3, #0]
 8081744:	07d1      	lsls	r1, r2, #31
 8081746:	bf5c      	itt	pl
 8081748:	2201      	movpl	r2, #1
 808174a:	601a      	strpl	r2, [r3, #0]
 808174c:	4b20      	ldr	r3, [pc, #128]	; (80817d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 808174e:	681a      	ldr	r2, [r3, #0]
 8081750:	07d2      	lsls	r2, r2, #31
 8081752:	bf5c      	itt	pl
 8081754:	2201      	movpl	r2, #1
 8081756:	601a      	strpl	r2, [r3, #0]
 8081758:	4b1e      	ldr	r3, [pc, #120]	; (80817d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 808175a:	681a      	ldr	r2, [r3, #0]
 808175c:	07d0      	lsls	r0, r2, #31
 808175e:	bf5c      	itt	pl
 8081760:	2201      	movpl	r2, #1
 8081762:	601a      	strpl	r2, [r3, #0]
 8081764:	4b1c      	ldr	r3, [pc, #112]	; (80817d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 8081766:	681a      	ldr	r2, [r3, #0]
 8081768:	07d1      	lsls	r1, r2, #31
 808176a:	bf5c      	itt	pl
 808176c:	2201      	movpl	r2, #1
 808176e:	601a      	strpl	r2, [r3, #0]
 8081770:	4b1a      	ldr	r3, [pc, #104]	; (80817dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 8081772:	681a      	ldr	r2, [r3, #0]
 8081774:	07d2      	lsls	r2, r2, #31
 8081776:	bf5c      	itt	pl
 8081778:	2201      	movpl	r2, #1
 808177a:	601a      	strpl	r2, [r3, #0]
 808177c:	4b18      	ldr	r3, [pc, #96]	; (80817e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 808177e:	681a      	ldr	r2, [r3, #0]
 8081780:	07d0      	lsls	r0, r2, #31
 8081782:	bf5c      	itt	pl
 8081784:	2201      	movpl	r2, #1
 8081786:	601a      	strpl	r2, [r3, #0]
 8081788:	4b16      	ldr	r3, [pc, #88]	; (80817e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 808178a:	681a      	ldr	r2, [r3, #0]
 808178c:	07d1      	lsls	r1, r2, #31
 808178e:	bf5c      	itt	pl
 8081790:	2201      	movpl	r2, #1
 8081792:	601a      	strpl	r2, [r3, #0]
 8081794:	4b14      	ldr	r3, [pc, #80]	; (80817e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 8081796:	681a      	ldr	r2, [r3, #0]
 8081798:	07d2      	lsls	r2, r2, #31
 808179a:	bf5c      	itt	pl
 808179c:	2201      	movpl	r2, #1
 808179e:	601a      	strpl	r2, [r3, #0]
 80817a0:	4b12      	ldr	r3, [pc, #72]	; (80817ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80817a2:	681a      	ldr	r2, [r3, #0]
 80817a4:	07d0      	lsls	r0, r2, #31
 80817a6:	bf5c      	itt	pl
 80817a8:	2201      	movpl	r2, #1
 80817aa:	601a      	strpl	r2, [r3, #0]
 80817ac:	4b10      	ldr	r3, [pc, #64]	; (80817f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80817ae:	681a      	ldr	r2, [r3, #0]
 80817b0:	07d1      	lsls	r1, r2, #31
 80817b2:	bf5c      	itt	pl
 80817b4:	2201      	movpl	r2, #1
 80817b6:	601a      	strpl	r2, [r3, #0]
 80817b8:	4b0e      	ldr	r3, [pc, #56]	; (80817f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80817ba:	681a      	ldr	r2, [r3, #0]
 80817bc:	07d2      	lsls	r2, r2, #31
 80817be:	bf5c      	itt	pl
 80817c0:	2201      	movpl	r2, #1
 80817c2:	601a      	strpl	r2, [r3, #0]
 80817c4:	4770      	bx	lr
 80817c6:	bf00      	nop
 80817c8:	200006a4 	.word	0x200006a4
 80817cc:	200006a0 	.word	0x200006a0
 80817d0:	2000069c 	.word	0x2000069c
 80817d4:	20000698 	.word	0x20000698
 80817d8:	20000694 	.word	0x20000694
 80817dc:	20000690 	.word	0x20000690
 80817e0:	2000068c 	.word	0x2000068c
 80817e4:	20000688 	.word	0x20000688
 80817e8:	20000684 	.word	0x20000684
 80817ec:	20000680 	.word	0x20000680
 80817f0:	2000067c 	.word	0x2000067c
 80817f4:	20000678 	.word	0x20000678

080817f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80817f8:	4b18      	ldr	r3, [pc, #96]	; (808185c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80817fa:	681a      	ldr	r2, [r3, #0]
 80817fc:	07d1      	lsls	r1, r2, #31
 80817fe:	bf5c      	itt	pl
 8081800:	2201      	movpl	r2, #1
 8081802:	601a      	strpl	r2, [r3, #0]
 8081804:	4b16      	ldr	r3, [pc, #88]	; (8081860 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 8081806:	681a      	ldr	r2, [r3, #0]
 8081808:	07d2      	lsls	r2, r2, #31
 808180a:	bf5c      	itt	pl
 808180c:	2201      	movpl	r2, #1
 808180e:	601a      	strpl	r2, [r3, #0]
 8081810:	4b14      	ldr	r3, [pc, #80]	; (8081864 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 8081812:	681a      	ldr	r2, [r3, #0]
 8081814:	07d0      	lsls	r0, r2, #31
 8081816:	bf5c      	itt	pl
 8081818:	2201      	movpl	r2, #1
 808181a:	601a      	strpl	r2, [r3, #0]
 808181c:	4b12      	ldr	r3, [pc, #72]	; (8081868 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 808181e:	681a      	ldr	r2, [r3, #0]
 8081820:	07d1      	lsls	r1, r2, #31
 8081822:	bf5c      	itt	pl
 8081824:	2201      	movpl	r2, #1
 8081826:	601a      	strpl	r2, [r3, #0]
 8081828:	4b10      	ldr	r3, [pc, #64]	; (808186c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 808182a:	681a      	ldr	r2, [r3, #0]
 808182c:	07d2      	lsls	r2, r2, #31
 808182e:	bf5c      	itt	pl
 8081830:	2201      	movpl	r2, #1
 8081832:	601a      	strpl	r2, [r3, #0]
 8081834:	4b0e      	ldr	r3, [pc, #56]	; (8081870 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 8081836:	681a      	ldr	r2, [r3, #0]
 8081838:	07d0      	lsls	r0, r2, #31
 808183a:	bf5c      	itt	pl
 808183c:	2201      	movpl	r2, #1
 808183e:	601a      	strpl	r2, [r3, #0]
 8081840:	4b0c      	ldr	r3, [pc, #48]	; (8081874 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 8081842:	681a      	ldr	r2, [r3, #0]
 8081844:	07d1      	lsls	r1, r2, #31
 8081846:	bf5c      	itt	pl
 8081848:	2201      	movpl	r2, #1
 808184a:	601a      	strpl	r2, [r3, #0]
 808184c:	4b0a      	ldr	r3, [pc, #40]	; (8081878 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 808184e:	681a      	ldr	r2, [r3, #0]
 8081850:	07d2      	lsls	r2, r2, #31
 8081852:	bf5c      	itt	pl
 8081854:	2201      	movpl	r2, #1
 8081856:	601a      	strpl	r2, [r3, #0]
 8081858:	4770      	bx	lr
 808185a:	bf00      	nop
 808185c:	200006c4 	.word	0x200006c4
 8081860:	200006c0 	.word	0x200006c0
 8081864:	200006bc 	.word	0x200006bc
 8081868:	200006b8 	.word	0x200006b8
 808186c:	200006b4 	.word	0x200006b4
 8081870:	200006b0 	.word	0x200006b0
 8081874:	200006ac 	.word	0x200006ac
 8081878:	200006a8 	.word	0x200006a8

0808187c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 808187c:	4b18      	ldr	r3, [pc, #96]	; (80818e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 808187e:	681a      	ldr	r2, [r3, #0]
 8081880:	07d1      	lsls	r1, r2, #31
 8081882:	bf5c      	itt	pl
 8081884:	2201      	movpl	r2, #1
 8081886:	601a      	strpl	r2, [r3, #0]
 8081888:	4b16      	ldr	r3, [pc, #88]	; (80818e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 808188a:	681a      	ldr	r2, [r3, #0]
 808188c:	07d2      	lsls	r2, r2, #31
 808188e:	bf5c      	itt	pl
 8081890:	2201      	movpl	r2, #1
 8081892:	601a      	strpl	r2, [r3, #0]
 8081894:	4b14      	ldr	r3, [pc, #80]	; (80818e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 8081896:	681a      	ldr	r2, [r3, #0]
 8081898:	07d0      	lsls	r0, r2, #31
 808189a:	bf5c      	itt	pl
 808189c:	2201      	movpl	r2, #1
 808189e:	601a      	strpl	r2, [r3, #0]
 80818a0:	4b12      	ldr	r3, [pc, #72]	; (80818ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80818a2:	681a      	ldr	r2, [r3, #0]
 80818a4:	07d1      	lsls	r1, r2, #31
 80818a6:	bf5c      	itt	pl
 80818a8:	2201      	movpl	r2, #1
 80818aa:	601a      	strpl	r2, [r3, #0]
 80818ac:	4b10      	ldr	r3, [pc, #64]	; (80818f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80818ae:	681a      	ldr	r2, [r3, #0]
 80818b0:	07d2      	lsls	r2, r2, #31
 80818b2:	bf5c      	itt	pl
 80818b4:	2201      	movpl	r2, #1
 80818b6:	601a      	strpl	r2, [r3, #0]
 80818b8:	4b0e      	ldr	r3, [pc, #56]	; (80818f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80818ba:	681a      	ldr	r2, [r3, #0]
 80818bc:	07d0      	lsls	r0, r2, #31
 80818be:	bf5c      	itt	pl
 80818c0:	2201      	movpl	r2, #1
 80818c2:	601a      	strpl	r2, [r3, #0]
 80818c4:	4b0c      	ldr	r3, [pc, #48]	; (80818f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80818c6:	681a      	ldr	r2, [r3, #0]
 80818c8:	07d1      	lsls	r1, r2, #31
 80818ca:	bf5c      	itt	pl
 80818cc:	2201      	movpl	r2, #1
 80818ce:	601a      	strpl	r2, [r3, #0]
 80818d0:	4b0a      	ldr	r3, [pc, #40]	; (80818fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80818d2:	681a      	ldr	r2, [r3, #0]
 80818d4:	07d2      	lsls	r2, r2, #31
 80818d6:	bf5c      	itt	pl
 80818d8:	2201      	movpl	r2, #1
 80818da:	601a      	strpl	r2, [r3, #0]
 80818dc:	4770      	bx	lr
 80818de:	bf00      	nop
 80818e0:	200006e4 	.word	0x200006e4
 80818e4:	200006e0 	.word	0x200006e0
 80818e8:	200006dc 	.word	0x200006dc
 80818ec:	200006d8 	.word	0x200006d8
 80818f0:	200006d4 	.word	0x200006d4
 80818f4:	200006d0 	.word	0x200006d0
 80818f8:	200006cc 	.word	0x200006cc
 80818fc:	200006c8 	.word	0x200006c8

08081900 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 8081900:	4b24      	ldr	r3, [pc, #144]	; (8081994 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 8081902:	681a      	ldr	r2, [r3, #0]
 8081904:	07d0      	lsls	r0, r2, #31
 8081906:	bf5c      	itt	pl
 8081908:	2201      	movpl	r2, #1
 808190a:	601a      	strpl	r2, [r3, #0]
 808190c:	4b22      	ldr	r3, [pc, #136]	; (8081998 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 808190e:	681a      	ldr	r2, [r3, #0]
 8081910:	07d1      	lsls	r1, r2, #31
 8081912:	bf5c      	itt	pl
 8081914:	2201      	movpl	r2, #1
 8081916:	601a      	strpl	r2, [r3, #0]
 8081918:	4b20      	ldr	r3, [pc, #128]	; (808199c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 808191a:	681a      	ldr	r2, [r3, #0]
 808191c:	07d2      	lsls	r2, r2, #31
 808191e:	bf5c      	itt	pl
 8081920:	2201      	movpl	r2, #1
 8081922:	601a      	strpl	r2, [r3, #0]
 8081924:	4b1e      	ldr	r3, [pc, #120]	; (80819a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 8081926:	681a      	ldr	r2, [r3, #0]
 8081928:	07d0      	lsls	r0, r2, #31
 808192a:	bf5c      	itt	pl
 808192c:	2201      	movpl	r2, #1
 808192e:	601a      	strpl	r2, [r3, #0]
 8081930:	4b1c      	ldr	r3, [pc, #112]	; (80819a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 8081932:	681a      	ldr	r2, [r3, #0]
 8081934:	07d1      	lsls	r1, r2, #31
 8081936:	bf5c      	itt	pl
 8081938:	2201      	movpl	r2, #1
 808193a:	601a      	strpl	r2, [r3, #0]
 808193c:	4b1a      	ldr	r3, [pc, #104]	; (80819a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 808193e:	681a      	ldr	r2, [r3, #0]
 8081940:	07d2      	lsls	r2, r2, #31
 8081942:	bf5c      	itt	pl
 8081944:	2201      	movpl	r2, #1
 8081946:	601a      	strpl	r2, [r3, #0]
 8081948:	4b18      	ldr	r3, [pc, #96]	; (80819ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 808194a:	681a      	ldr	r2, [r3, #0]
 808194c:	07d0      	lsls	r0, r2, #31
 808194e:	bf5c      	itt	pl
 8081950:	2201      	movpl	r2, #1
 8081952:	601a      	strpl	r2, [r3, #0]
 8081954:	4b16      	ldr	r3, [pc, #88]	; (80819b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 8081956:	681a      	ldr	r2, [r3, #0]
 8081958:	07d1      	lsls	r1, r2, #31
 808195a:	bf5c      	itt	pl
 808195c:	2201      	movpl	r2, #1
 808195e:	601a      	strpl	r2, [r3, #0]
 8081960:	4b14      	ldr	r3, [pc, #80]	; (80819b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 8081962:	681a      	ldr	r2, [r3, #0]
 8081964:	07d2      	lsls	r2, r2, #31
 8081966:	bf5c      	itt	pl
 8081968:	2201      	movpl	r2, #1
 808196a:	601a      	strpl	r2, [r3, #0]
 808196c:	4b12      	ldr	r3, [pc, #72]	; (80819b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 808196e:	681a      	ldr	r2, [r3, #0]
 8081970:	07d0      	lsls	r0, r2, #31
 8081972:	bf5c      	itt	pl
 8081974:	2201      	movpl	r2, #1
 8081976:	601a      	strpl	r2, [r3, #0]
 8081978:	4b10      	ldr	r3, [pc, #64]	; (80819bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 808197a:	681a      	ldr	r2, [r3, #0]
 808197c:	07d1      	lsls	r1, r2, #31
 808197e:	bf5c      	itt	pl
 8081980:	2201      	movpl	r2, #1
 8081982:	601a      	strpl	r2, [r3, #0]
 8081984:	4b0e      	ldr	r3, [pc, #56]	; (80819c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 8081986:	681a      	ldr	r2, [r3, #0]
 8081988:	07d2      	lsls	r2, r2, #31
 808198a:	bf5c      	itt	pl
 808198c:	2201      	movpl	r2, #1
 808198e:	601a      	strpl	r2, [r3, #0]
 8081990:	4770      	bx	lr
 8081992:	bf00      	nop
 8081994:	20000714 	.word	0x20000714
 8081998:	20000710 	.word	0x20000710
 808199c:	2000070c 	.word	0x2000070c
 80819a0:	20000708 	.word	0x20000708
 80819a4:	20000704 	.word	0x20000704
 80819a8:	20000700 	.word	0x20000700
 80819ac:	200006fc 	.word	0x200006fc
 80819b0:	200006f8 	.word	0x200006f8
 80819b4:	200006f4 	.word	0x200006f4
 80819b8:	200006f0 	.word	0x200006f0
 80819bc:	200006ec 	.word	0x200006ec
 80819c0:	200006e8 	.word	0x200006e8

080819c4 <__aeabi_fmul>:
 80819c4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80819c8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80819cc:	bf1e      	ittt	ne
 80819ce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80819d2:	ea92 0f0c 	teqne	r2, ip
 80819d6:	ea93 0f0c 	teqne	r3, ip
 80819da:	d06f      	beq.n	8081abc <__aeabi_fmul+0xf8>
 80819dc:	441a      	add	r2, r3
 80819de:	ea80 0c01 	eor.w	ip, r0, r1
 80819e2:	0240      	lsls	r0, r0, #9
 80819e4:	bf18      	it	ne
 80819e6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80819ea:	d01e      	beq.n	8081a2a <__aeabi_fmul+0x66>
 80819ec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80819f0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80819f4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80819f8:	fba0 3101 	umull	r3, r1, r0, r1
 80819fc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8081a00:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8081a04:	bf3e      	ittt	cc
 8081a06:	0049      	lslcc	r1, r1, #1
 8081a08:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8081a0c:	005b      	lslcc	r3, r3, #1
 8081a0e:	ea40 0001 	orr.w	r0, r0, r1
 8081a12:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8081a16:	2afd      	cmp	r2, #253	; 0xfd
 8081a18:	d81d      	bhi.n	8081a56 <__aeabi_fmul+0x92>
 8081a1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8081a1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8081a22:	bf08      	it	eq
 8081a24:	f020 0001 	biceq.w	r0, r0, #1
 8081a28:	4770      	bx	lr
 8081a2a:	f090 0f00 	teq	r0, #0
 8081a2e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8081a32:	bf08      	it	eq
 8081a34:	0249      	lsleq	r1, r1, #9
 8081a36:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8081a3a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8081a3e:	3a7f      	subs	r2, #127	; 0x7f
 8081a40:	bfc2      	ittt	gt
 8081a42:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8081a46:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8081a4a:	4770      	bxgt	lr
 8081a4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8081a50:	f04f 0300 	mov.w	r3, #0
 8081a54:	3a01      	subs	r2, #1
 8081a56:	dc5d      	bgt.n	8081b14 <__aeabi_fmul+0x150>
 8081a58:	f112 0f19 	cmn.w	r2, #25
 8081a5c:	bfdc      	itt	le
 8081a5e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8081a62:	4770      	bxle	lr
 8081a64:	f1c2 0200 	rsb	r2, r2, #0
 8081a68:	0041      	lsls	r1, r0, #1
 8081a6a:	fa21 f102 	lsr.w	r1, r1, r2
 8081a6e:	f1c2 0220 	rsb	r2, r2, #32
 8081a72:	fa00 fc02 	lsl.w	ip, r0, r2
 8081a76:	ea5f 0031 	movs.w	r0, r1, rrx
 8081a7a:	f140 0000 	adc.w	r0, r0, #0
 8081a7e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8081a82:	bf08      	it	eq
 8081a84:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8081a88:	4770      	bx	lr
 8081a8a:	f092 0f00 	teq	r2, #0
 8081a8e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8081a92:	bf02      	ittt	eq
 8081a94:	0040      	lsleq	r0, r0, #1
 8081a96:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8081a9a:	3a01      	subeq	r2, #1
 8081a9c:	d0f9      	beq.n	8081a92 <__aeabi_fmul+0xce>
 8081a9e:	ea40 000c 	orr.w	r0, r0, ip
 8081aa2:	f093 0f00 	teq	r3, #0
 8081aa6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8081aaa:	bf02      	ittt	eq
 8081aac:	0049      	lsleq	r1, r1, #1
 8081aae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8081ab2:	3b01      	subeq	r3, #1
 8081ab4:	d0f9      	beq.n	8081aaa <__aeabi_fmul+0xe6>
 8081ab6:	ea41 010c 	orr.w	r1, r1, ip
 8081aba:	e78f      	b.n	80819dc <__aeabi_fmul+0x18>
 8081abc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8081ac0:	ea92 0f0c 	teq	r2, ip
 8081ac4:	bf18      	it	ne
 8081ac6:	ea93 0f0c 	teqne	r3, ip
 8081aca:	d00a      	beq.n	8081ae2 <__aeabi_fmul+0x11e>
 8081acc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8081ad0:	bf18      	it	ne
 8081ad2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8081ad6:	d1d8      	bne.n	8081a8a <__aeabi_fmul+0xc6>
 8081ad8:	ea80 0001 	eor.w	r0, r0, r1
 8081adc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8081ae0:	4770      	bx	lr
 8081ae2:	f090 0f00 	teq	r0, #0
 8081ae6:	bf17      	itett	ne
 8081ae8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8081aec:	4608      	moveq	r0, r1
 8081aee:	f091 0f00 	teqne	r1, #0
 8081af2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8081af6:	d014      	beq.n	8081b22 <__aeabi_fmul+0x15e>
 8081af8:	ea92 0f0c 	teq	r2, ip
 8081afc:	d101      	bne.n	8081b02 <__aeabi_fmul+0x13e>
 8081afe:	0242      	lsls	r2, r0, #9
 8081b00:	d10f      	bne.n	8081b22 <__aeabi_fmul+0x15e>
 8081b02:	ea93 0f0c 	teq	r3, ip
 8081b06:	d103      	bne.n	8081b10 <__aeabi_fmul+0x14c>
 8081b08:	024b      	lsls	r3, r1, #9
 8081b0a:	bf18      	it	ne
 8081b0c:	4608      	movne	r0, r1
 8081b0e:	d108      	bne.n	8081b22 <__aeabi_fmul+0x15e>
 8081b10:	ea80 0001 	eor.w	r0, r0, r1
 8081b14:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8081b18:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8081b1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8081b20:	4770      	bx	lr
 8081b22:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8081b26:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8081b2a:	4770      	bx	lr

08081b2c <__aeabi_fdiv>:
 8081b2c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8081b30:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8081b34:	bf1e      	ittt	ne
 8081b36:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8081b3a:	ea92 0f0c 	teqne	r2, ip
 8081b3e:	ea93 0f0c 	teqne	r3, ip
 8081b42:	d069      	beq.n	8081c18 <__aeabi_fdiv+0xec>
 8081b44:	eba2 0203 	sub.w	r2, r2, r3
 8081b48:	ea80 0c01 	eor.w	ip, r0, r1
 8081b4c:	0249      	lsls	r1, r1, #9
 8081b4e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8081b52:	d037      	beq.n	8081bc4 <__aeabi_fdiv+0x98>
 8081b54:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8081b58:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8081b5c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8081b60:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8081b64:	428b      	cmp	r3, r1
 8081b66:	bf38      	it	cc
 8081b68:	005b      	lslcc	r3, r3, #1
 8081b6a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8081b6e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8081b72:	428b      	cmp	r3, r1
 8081b74:	bf24      	itt	cs
 8081b76:	1a5b      	subcs	r3, r3, r1
 8081b78:	ea40 000c 	orrcs.w	r0, r0, ip
 8081b7c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8081b80:	bf24      	itt	cs
 8081b82:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8081b86:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8081b8a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8081b8e:	bf24      	itt	cs
 8081b90:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8081b94:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8081b98:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8081b9c:	bf24      	itt	cs
 8081b9e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8081ba2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8081ba6:	011b      	lsls	r3, r3, #4
 8081ba8:	bf18      	it	ne
 8081baa:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8081bae:	d1e0      	bne.n	8081b72 <__aeabi_fdiv+0x46>
 8081bb0:	2afd      	cmp	r2, #253	; 0xfd
 8081bb2:	f63f af50 	bhi.w	8081a56 <__aeabi_fmul+0x92>
 8081bb6:	428b      	cmp	r3, r1
 8081bb8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8081bbc:	bf08      	it	eq
 8081bbe:	f020 0001 	biceq.w	r0, r0, #1
 8081bc2:	4770      	bx	lr
 8081bc4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8081bc8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8081bcc:	327f      	adds	r2, #127	; 0x7f
 8081bce:	bfc2      	ittt	gt
 8081bd0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8081bd4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8081bd8:	4770      	bxgt	lr
 8081bda:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8081bde:	f04f 0300 	mov.w	r3, #0
 8081be2:	3a01      	subs	r2, #1
 8081be4:	e737      	b.n	8081a56 <__aeabi_fmul+0x92>
 8081be6:	f092 0f00 	teq	r2, #0
 8081bea:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8081bee:	bf02      	ittt	eq
 8081bf0:	0040      	lsleq	r0, r0, #1
 8081bf2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8081bf6:	3a01      	subeq	r2, #1
 8081bf8:	d0f9      	beq.n	8081bee <__aeabi_fdiv+0xc2>
 8081bfa:	ea40 000c 	orr.w	r0, r0, ip
 8081bfe:	f093 0f00 	teq	r3, #0
 8081c02:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8081c06:	bf02      	ittt	eq
 8081c08:	0049      	lsleq	r1, r1, #1
 8081c0a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8081c0e:	3b01      	subeq	r3, #1
 8081c10:	d0f9      	beq.n	8081c06 <__aeabi_fdiv+0xda>
 8081c12:	ea41 010c 	orr.w	r1, r1, ip
 8081c16:	e795      	b.n	8081b44 <__aeabi_fdiv+0x18>
 8081c18:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8081c1c:	ea92 0f0c 	teq	r2, ip
 8081c20:	d108      	bne.n	8081c34 <__aeabi_fdiv+0x108>
 8081c22:	0242      	lsls	r2, r0, #9
 8081c24:	f47f af7d 	bne.w	8081b22 <__aeabi_fmul+0x15e>
 8081c28:	ea93 0f0c 	teq	r3, ip
 8081c2c:	f47f af70 	bne.w	8081b10 <__aeabi_fmul+0x14c>
 8081c30:	4608      	mov	r0, r1
 8081c32:	e776      	b.n	8081b22 <__aeabi_fmul+0x15e>
 8081c34:	ea93 0f0c 	teq	r3, ip
 8081c38:	d104      	bne.n	8081c44 <__aeabi_fdiv+0x118>
 8081c3a:	024b      	lsls	r3, r1, #9
 8081c3c:	f43f af4c 	beq.w	8081ad8 <__aeabi_fmul+0x114>
 8081c40:	4608      	mov	r0, r1
 8081c42:	e76e      	b.n	8081b22 <__aeabi_fmul+0x15e>
 8081c44:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8081c48:	bf18      	it	ne
 8081c4a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8081c4e:	d1ca      	bne.n	8081be6 <__aeabi_fdiv+0xba>
 8081c50:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8081c54:	f47f af5c 	bne.w	8081b10 <__aeabi_fmul+0x14c>
 8081c58:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8081c5c:	f47f af3c 	bne.w	8081ad8 <__aeabi_fmul+0x114>
 8081c60:	e75f      	b.n	8081b22 <__aeabi_fmul+0x15e>
 8081c62:	bf00      	nop

08081c64 <__gesf2>:
 8081c64:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8081c68:	e006      	b.n	8081c78 <__cmpsf2+0x4>
 8081c6a:	bf00      	nop

08081c6c <__lesf2>:
 8081c6c:	f04f 0c01 	mov.w	ip, #1
 8081c70:	e002      	b.n	8081c78 <__cmpsf2+0x4>
 8081c72:	bf00      	nop

08081c74 <__cmpsf2>:
 8081c74:	f04f 0c01 	mov.w	ip, #1
 8081c78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8081c7c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8081c80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8081c84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8081c88:	bf18      	it	ne
 8081c8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8081c8e:	d011      	beq.n	8081cb4 <__cmpsf2+0x40>
 8081c90:	b001      	add	sp, #4
 8081c92:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8081c96:	bf18      	it	ne
 8081c98:	ea90 0f01 	teqne	r0, r1
 8081c9c:	bf58      	it	pl
 8081c9e:	ebb2 0003 	subspl.w	r0, r2, r3
 8081ca2:	bf88      	it	hi
 8081ca4:	17c8      	asrhi	r0, r1, #31
 8081ca6:	bf38      	it	cc
 8081ca8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8081cac:	bf18      	it	ne
 8081cae:	f040 0001 	orrne.w	r0, r0, #1
 8081cb2:	4770      	bx	lr
 8081cb4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8081cb8:	d102      	bne.n	8081cc0 <__cmpsf2+0x4c>
 8081cba:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8081cbe:	d105      	bne.n	8081ccc <__cmpsf2+0x58>
 8081cc0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8081cc4:	d1e4      	bne.n	8081c90 <__cmpsf2+0x1c>
 8081cc6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8081cca:	d0e1      	beq.n	8081c90 <__cmpsf2+0x1c>
 8081ccc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8081cd0:	4770      	bx	lr
 8081cd2:	bf00      	nop

08081cd4 <__aeabi_cfrcmple>:
 8081cd4:	4684      	mov	ip, r0
 8081cd6:	4608      	mov	r0, r1
 8081cd8:	4661      	mov	r1, ip
 8081cda:	e7ff      	b.n	8081cdc <__aeabi_cfcmpeq>

08081cdc <__aeabi_cfcmpeq>:
 8081cdc:	b50f      	push	{r0, r1, r2, r3, lr}
 8081cde:	f7ff ffc9 	bl	8081c74 <__cmpsf2>
 8081ce2:	2800      	cmp	r0, #0
 8081ce4:	bf48      	it	mi
 8081ce6:	f110 0f00 	cmnmi.w	r0, #0
 8081cea:	bd0f      	pop	{r0, r1, r2, r3, pc}

08081cec <__aeabi_fcmpeq>:
 8081cec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8081cf0:	f7ff fff4 	bl	8081cdc <__aeabi_cfcmpeq>
 8081cf4:	bf0c      	ite	eq
 8081cf6:	2001      	moveq	r0, #1
 8081cf8:	2000      	movne	r0, #0
 8081cfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8081cfe:	bf00      	nop

08081d00 <__aeabi_fcmplt>:
 8081d00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8081d04:	f7ff ffea 	bl	8081cdc <__aeabi_cfcmpeq>
 8081d08:	bf34      	ite	cc
 8081d0a:	2001      	movcc	r0, #1
 8081d0c:	2000      	movcs	r0, #0
 8081d0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8081d12:	bf00      	nop

08081d14 <__aeabi_fcmple>:
 8081d14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8081d18:	f7ff ffe0 	bl	8081cdc <__aeabi_cfcmpeq>
 8081d1c:	bf94      	ite	ls
 8081d1e:	2001      	movls	r0, #1
 8081d20:	2000      	movhi	r0, #0
 8081d22:	f85d fb08 	ldr.w	pc, [sp], #8
 8081d26:	bf00      	nop

08081d28 <__aeabi_fcmpge>:
 8081d28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8081d2c:	f7ff ffd2 	bl	8081cd4 <__aeabi_cfrcmple>
 8081d30:	bf94      	ite	ls
 8081d32:	2001      	movls	r0, #1
 8081d34:	2000      	movhi	r0, #0
 8081d36:	f85d fb08 	ldr.w	pc, [sp], #8
 8081d3a:	bf00      	nop

08081d3c <__aeabi_fcmpgt>:
 8081d3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8081d40:	f7ff ffc8 	bl	8081cd4 <__aeabi_cfrcmple>
 8081d44:	bf34      	ite	cc
 8081d46:	2001      	movcc	r0, #1
 8081d48:	2000      	movcs	r0, #0
 8081d4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8081d4e:	bf00      	nop

08081d50 <__aeabi_f2iz>:
 8081d50:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8081d54:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8081d58:	d30f      	bcc.n	8081d7a <__aeabi_f2iz+0x2a>
 8081d5a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8081d5e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8081d62:	d90d      	bls.n	8081d80 <__aeabi_f2iz+0x30>
 8081d64:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8081d68:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8081d6c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8081d70:	fa23 f002 	lsr.w	r0, r3, r2
 8081d74:	bf18      	it	ne
 8081d76:	4240      	negne	r0, r0
 8081d78:	4770      	bx	lr
 8081d7a:	f04f 0000 	mov.w	r0, #0
 8081d7e:	4770      	bx	lr
 8081d80:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8081d84:	d101      	bne.n	8081d8a <__aeabi_f2iz+0x3a>
 8081d86:	0242      	lsls	r2, r0, #9
 8081d88:	d105      	bne.n	8081d96 <__aeabi_f2iz+0x46>
 8081d8a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8081d8e:	bf08      	it	eq
 8081d90:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8081d94:	4770      	bx	lr
 8081d96:	f04f 0000 	mov.w	r0, #0
 8081d9a:	4770      	bx	lr

08081d9c <asctime>:
 8081d9c:	4b09      	ldr	r3, [pc, #36]	; (8081dc4 <asctime+0x28>)
 8081d9e:	b570      	push	{r4, r5, r6, lr}
 8081da0:	681c      	ldr	r4, [r3, #0]
 8081da2:	4606      	mov	r6, r0
 8081da4:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8081da6:	b93d      	cbnz	r5, 8081db8 <asctime+0x1c>
 8081da8:	201a      	movs	r0, #26
 8081daa:	f7fe fc15 	bl	80805d8 <malloc>
 8081dae:	221a      	movs	r2, #26
 8081db0:	6420      	str	r0, [r4, #64]	; 0x40
 8081db2:	4629      	mov	r1, r5
 8081db4:	f000 f93f 	bl	8082036 <memset>
 8081db8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8081dba:	4630      	mov	r0, r6
 8081dbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8081dc0:	f000 b802 	b.w	8081dc8 <asctime_r>
 8081dc4:	20000074 	.word	0x20000074

08081dc8 <asctime_r>:
 8081dc8:	b510      	push	{r4, lr}
 8081dca:	460c      	mov	r4, r1
 8081dcc:	6941      	ldr	r1, [r0, #20]
 8081dce:	b086      	sub	sp, #24
 8081dd0:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 8081dd4:	6903      	ldr	r3, [r0, #16]
 8081dd6:	6982      	ldr	r2, [r0, #24]
 8081dd8:	9104      	str	r1, [sp, #16]
 8081dda:	6801      	ldr	r1, [r0, #0]
 8081ddc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8081de0:	9103      	str	r1, [sp, #12]
 8081de2:	6841      	ldr	r1, [r0, #4]
 8081de4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8081de8:	9102      	str	r1, [sp, #8]
 8081dea:	6881      	ldr	r1, [r0, #8]
 8081dec:	9101      	str	r1, [sp, #4]
 8081dee:	68c1      	ldr	r1, [r0, #12]
 8081df0:	4620      	mov	r0, r4
 8081df2:	9100      	str	r1, [sp, #0]
 8081df4:	4904      	ldr	r1, [pc, #16]	; (8081e08 <asctime_r+0x40>)
 8081df6:	440b      	add	r3, r1
 8081df8:	4904      	ldr	r1, [pc, #16]	; (8081e0c <asctime_r+0x44>)
 8081dfa:	440a      	add	r2, r1
 8081dfc:	4904      	ldr	r1, [pc, #16]	; (8081e10 <asctime_r+0x48>)
 8081dfe:	f7fe fc03 	bl	8080608 <siprintf>
 8081e02:	4620      	mov	r0, r4
 8081e04:	b006      	add	sp, #24
 8081e06:	bd10      	pop	{r4, pc}
 8081e08:	08082b7d 	.word	0x08082b7d
 8081e0c:	08082b68 	.word	0x08082b68
 8081e10:	08082ba1 	.word	0x08082ba1

08081e14 <__cxa_atexit>:
 8081e14:	b510      	push	{r4, lr}
 8081e16:	4c05      	ldr	r4, [pc, #20]	; (8081e2c <__cxa_atexit+0x18>)
 8081e18:	4613      	mov	r3, r2
 8081e1a:	b12c      	cbz	r4, 8081e28 <__cxa_atexit+0x14>
 8081e1c:	460a      	mov	r2, r1
 8081e1e:	4601      	mov	r1, r0
 8081e20:	2002      	movs	r0, #2
 8081e22:	f3af 8000 	nop.w
 8081e26:	bd10      	pop	{r4, pc}
 8081e28:	4620      	mov	r0, r4
 8081e2a:	bd10      	pop	{r4, pc}
 8081e2c:	00000000 	.word	0x00000000

08081e30 <localtime>:
 8081e30:	b538      	push	{r3, r4, r5, lr}
 8081e32:	4b07      	ldr	r3, [pc, #28]	; (8081e50 <localtime+0x20>)
 8081e34:	4605      	mov	r5, r0
 8081e36:	681c      	ldr	r4, [r3, #0]
 8081e38:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8081e3a:	b91b      	cbnz	r3, 8081e44 <localtime+0x14>
 8081e3c:	2024      	movs	r0, #36	; 0x24
 8081e3e:	f7fe fbcb 	bl	80805d8 <malloc>
 8081e42:	63e0      	str	r0, [r4, #60]	; 0x3c
 8081e44:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8081e46:	4628      	mov	r0, r5
 8081e48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8081e4c:	f000 b802 	b.w	8081e54 <localtime_r>
 8081e50:	20000074 	.word	0x20000074

08081e54 <localtime_r>:
 8081e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8081e58:	460c      	mov	r4, r1
 8081e5a:	4680      	mov	r8, r0
 8081e5c:	f000 fc62 	bl	8082724 <__gettzinfo>
 8081e60:	4621      	mov	r1, r4
 8081e62:	4607      	mov	r7, r0
 8081e64:	4640      	mov	r0, r8
 8081e66:	f000 fc61 	bl	808272c <gmtime_r>
 8081e6a:	6946      	ldr	r6, [r0, #20]
 8081e6c:	4604      	mov	r4, r0
 8081e6e:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 8081e72:	07b3      	lsls	r3, r6, #30
 8081e74:	d105      	bne.n	8081e82 <localtime_r+0x2e>
 8081e76:	2264      	movs	r2, #100	; 0x64
 8081e78:	fb96 f3f2 	sdiv	r3, r6, r2
 8081e7c:	fb02 6313 	mls	r3, r2, r3, r6
 8081e80:	b94b      	cbnz	r3, 8081e96 <localtime_r+0x42>
 8081e82:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8081e86:	fb96 f3f5 	sdiv	r3, r6, r5
 8081e8a:	fb05 6513 	mls	r5, r5, r3, r6
 8081e8e:	fab5 f385 	clz	r3, r5
 8081e92:	095b      	lsrs	r3, r3, #5
 8081e94:	e000      	b.n	8081e98 <localtime_r+0x44>
 8081e96:	2301      	movs	r3, #1
 8081e98:	4a5f      	ldr	r2, [pc, #380]	; (8082018 <localtime_r+0x1c4>)
 8081e9a:	2530      	movs	r5, #48	; 0x30
 8081e9c:	fb05 2503 	mla	r5, r5, r3, r2
 8081ea0:	f000 fa74 	bl	808238c <__tz_lock>
 8081ea4:	f000 fa74 	bl	8082390 <_tzset_unlocked>
 8081ea8:	4b5c      	ldr	r3, [pc, #368]	; (808201c <localtime_r+0x1c8>)
 8081eaa:	681b      	ldr	r3, [r3, #0]
 8081eac:	b1f3      	cbz	r3, 8081eec <localtime_r+0x98>
 8081eae:	687b      	ldr	r3, [r7, #4]
 8081eb0:	429e      	cmp	r6, r3
 8081eb2:	d105      	bne.n	8081ec0 <localtime_r+0x6c>
 8081eb4:	6839      	ldr	r1, [r7, #0]
 8081eb6:	f8d8 3000 	ldr.w	r3, [r8]
 8081eba:	69fa      	ldr	r2, [r7, #28]
 8081ebc:	b941      	cbnz	r1, 8081ed0 <localtime_r+0x7c>
 8081ebe:	e00a      	b.n	8081ed6 <localtime_r+0x82>
 8081ec0:	4630      	mov	r0, r6
 8081ec2:	f000 f9bb 	bl	808223c <__tzcalc_limits>
 8081ec6:	2800      	cmp	r0, #0
 8081ec8:	d1f4      	bne.n	8081eb4 <localtime_r+0x60>
 8081eca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8081ece:	e00d      	b.n	8081eec <localtime_r+0x98>
 8081ed0:	4293      	cmp	r3, r2
 8081ed2:	db08      	blt.n	8081ee6 <localtime_r+0x92>
 8081ed4:	e001      	b.n	8081eda <localtime_r+0x86>
 8081ed6:	4293      	cmp	r3, r2
 8081ed8:	da07      	bge.n	8081eea <localtime_r+0x96>
 8081eda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8081edc:	4293      	cmp	r3, r2
 8081ede:	bfac      	ite	ge
 8081ee0:	2300      	movge	r3, #0
 8081ee2:	2301      	movlt	r3, #1
 8081ee4:	e002      	b.n	8081eec <localtime_r+0x98>
 8081ee6:	2300      	movs	r3, #0
 8081ee8:	e000      	b.n	8081eec <localtime_r+0x98>
 8081eea:	2301      	movs	r3, #1
 8081eec:	6223      	str	r3, [r4, #32]
 8081eee:	6a23      	ldr	r3, [r4, #32]
 8081ef0:	203c      	movs	r0, #60	; 0x3c
 8081ef2:	2b01      	cmp	r3, #1
 8081ef4:	bf0c      	ite	eq
 8081ef6:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
 8081ef8:	6a39      	ldrne	r1, [r7, #32]
 8081efa:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8081efe:	fb91 f6f3 	sdiv	r6, r1, r3
 8081f02:	fb03 1316 	mls	r3, r3, r6, r1
 8081f06:	fb93 f2f0 	sdiv	r2, r3, r0
 8081f0a:	fb00 3012 	mls	r0, r0, r2, r3
 8081f0e:	6861      	ldr	r1, [r4, #4]
 8081f10:	6823      	ldr	r3, [r4, #0]
 8081f12:	1a89      	subs	r1, r1, r2
 8081f14:	68a2      	ldr	r2, [r4, #8]
 8081f16:	1a1b      	subs	r3, r3, r0
 8081f18:	1b92      	subs	r2, r2, r6
 8081f1a:	2b3b      	cmp	r3, #59	; 0x3b
 8081f1c:	6023      	str	r3, [r4, #0]
 8081f1e:	6061      	str	r1, [r4, #4]
 8081f20:	60a2      	str	r2, [r4, #8]
 8081f22:	dd03      	ble.n	8081f2c <localtime_r+0xd8>
 8081f24:	3101      	adds	r1, #1
 8081f26:	6061      	str	r1, [r4, #4]
 8081f28:	3b3c      	subs	r3, #60	; 0x3c
 8081f2a:	e004      	b.n	8081f36 <localtime_r+0xe2>
 8081f2c:	2b00      	cmp	r3, #0
 8081f2e:	da03      	bge.n	8081f38 <localtime_r+0xe4>
 8081f30:	3901      	subs	r1, #1
 8081f32:	6061      	str	r1, [r4, #4]
 8081f34:	333c      	adds	r3, #60	; 0x3c
 8081f36:	6023      	str	r3, [r4, #0]
 8081f38:	6863      	ldr	r3, [r4, #4]
 8081f3a:	2b3b      	cmp	r3, #59	; 0x3b
 8081f3c:	dd03      	ble.n	8081f46 <localtime_r+0xf2>
 8081f3e:	3201      	adds	r2, #1
 8081f40:	60a2      	str	r2, [r4, #8]
 8081f42:	3b3c      	subs	r3, #60	; 0x3c
 8081f44:	e004      	b.n	8081f50 <localtime_r+0xfc>
 8081f46:	2b00      	cmp	r3, #0
 8081f48:	da03      	bge.n	8081f52 <localtime_r+0xfe>
 8081f4a:	3a01      	subs	r2, #1
 8081f4c:	60a2      	str	r2, [r4, #8]
 8081f4e:	333c      	adds	r3, #60	; 0x3c
 8081f50:	6063      	str	r3, [r4, #4]
 8081f52:	68a3      	ldr	r3, [r4, #8]
 8081f54:	2b17      	cmp	r3, #23
 8081f56:	dd22      	ble.n	8081f9e <localtime_r+0x14a>
 8081f58:	69e2      	ldr	r2, [r4, #28]
 8081f5a:	3b18      	subs	r3, #24
 8081f5c:	3201      	adds	r2, #1
 8081f5e:	61e2      	str	r2, [r4, #28]
 8081f60:	69a2      	ldr	r2, [r4, #24]
 8081f62:	60a3      	str	r3, [r4, #8]
 8081f64:	3201      	adds	r2, #1
 8081f66:	2a06      	cmp	r2, #6
 8081f68:	bfc8      	it	gt
 8081f6a:	2200      	movgt	r2, #0
 8081f6c:	61a2      	str	r2, [r4, #24]
 8081f6e:	68e2      	ldr	r2, [r4, #12]
 8081f70:	6923      	ldr	r3, [r4, #16]
 8081f72:	3201      	adds	r2, #1
 8081f74:	60e2      	str	r2, [r4, #12]
 8081f76:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 8081f7a:	428a      	cmp	r2, r1
 8081f7c:	dd46      	ble.n	808200c <localtime_r+0x1b8>
 8081f7e:	3301      	adds	r3, #1
 8081f80:	2b0c      	cmp	r3, #12
 8081f82:	bf08      	it	eq
 8081f84:	6963      	ldreq	r3, [r4, #20]
 8081f86:	eba2 0201 	sub.w	r2, r2, r1
 8081f8a:	60e2      	str	r2, [r4, #12]
 8081f8c:	bf05      	ittet	eq
 8081f8e:	3301      	addeq	r3, #1
 8081f90:	2200      	moveq	r2, #0
 8081f92:	6123      	strne	r3, [r4, #16]
 8081f94:	6122      	streq	r2, [r4, #16]
 8081f96:	bf04      	itt	eq
 8081f98:	6163      	streq	r3, [r4, #20]
 8081f9a:	61e2      	streq	r2, [r4, #28]
 8081f9c:	e036      	b.n	808200c <localtime_r+0x1b8>
 8081f9e:	2b00      	cmp	r3, #0
 8081fa0:	da34      	bge.n	808200c <localtime_r+0x1b8>
 8081fa2:	69e2      	ldr	r2, [r4, #28]
 8081fa4:	3318      	adds	r3, #24
 8081fa6:	3a01      	subs	r2, #1
 8081fa8:	61e2      	str	r2, [r4, #28]
 8081faa:	69a2      	ldr	r2, [r4, #24]
 8081fac:	60a3      	str	r3, [r4, #8]
 8081fae:	3a01      	subs	r2, #1
 8081fb0:	bf48      	it	mi
 8081fb2:	2206      	movmi	r2, #6
 8081fb4:	61a2      	str	r2, [r4, #24]
 8081fb6:	68e2      	ldr	r2, [r4, #12]
 8081fb8:	3a01      	subs	r2, #1
 8081fba:	60e2      	str	r2, [r4, #12]
 8081fbc:	bb32      	cbnz	r2, 808200c <localtime_r+0x1b8>
 8081fbe:	6923      	ldr	r3, [r4, #16]
 8081fc0:	3b01      	subs	r3, #1
 8081fc2:	d401      	bmi.n	8081fc8 <localtime_r+0x174>
 8081fc4:	6123      	str	r3, [r4, #16]
 8081fc6:	e01d      	b.n	8082004 <localtime_r+0x1b0>
 8081fc8:	230b      	movs	r3, #11
 8081fca:	6123      	str	r3, [r4, #16]
 8081fcc:	6963      	ldr	r3, [r4, #20]
 8081fce:	1e5a      	subs	r2, r3, #1
 8081fd0:	f012 0f03 	tst.w	r2, #3
 8081fd4:	6162      	str	r2, [r4, #20]
 8081fd6:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8081fda:	d105      	bne.n	8081fe8 <localtime_r+0x194>
 8081fdc:	2164      	movs	r1, #100	; 0x64
 8081fde:	fb93 f2f1 	sdiv	r2, r3, r1
 8081fe2:	fb01 3212 	mls	r2, r1, r2, r3
 8081fe6:	b94a      	cbnz	r2, 8081ffc <localtime_r+0x1a8>
 8081fe8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8081fec:	fb93 f2f1 	sdiv	r2, r3, r1
 8081ff0:	fb01 3312 	mls	r3, r1, r2, r3
 8081ff4:	fab3 f383 	clz	r3, r3
 8081ff8:	095b      	lsrs	r3, r3, #5
 8081ffa:	e000      	b.n	8081ffe <localtime_r+0x1aa>
 8081ffc:	2301      	movs	r3, #1
 8081ffe:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8082002:	61e3      	str	r3, [r4, #28]
 8082004:	6923      	ldr	r3, [r4, #16]
 8082006:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 808200a:	60e3      	str	r3, [r4, #12]
 808200c:	f000 f9bf 	bl	808238e <__tz_unlock>
 8082010:	4620      	mov	r0, r4
 8082012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8082016:	bf00      	nop
 8082018:	08082d28 	.word	0x08082d28
 808201c:	20000734 	.word	0x20000734

08082020 <memcpy>:
 8082020:	b510      	push	{r4, lr}
 8082022:	1e43      	subs	r3, r0, #1
 8082024:	440a      	add	r2, r1
 8082026:	4291      	cmp	r1, r2
 8082028:	d004      	beq.n	8082034 <memcpy+0x14>
 808202a:	f811 4b01 	ldrb.w	r4, [r1], #1
 808202e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8082032:	e7f8      	b.n	8082026 <memcpy+0x6>
 8082034:	bd10      	pop	{r4, pc}

08082036 <memset>:
 8082036:	4603      	mov	r3, r0
 8082038:	4402      	add	r2, r0
 808203a:	4293      	cmp	r3, r2
 808203c:	d002      	beq.n	8082044 <memset+0xe>
 808203e:	f803 1b01 	strb.w	r1, [r3], #1
 8082042:	e7fa      	b.n	808203a <memset+0x4>
 8082044:	4770      	bx	lr
	...

08082048 <srand>:
 8082048:	b538      	push	{r3, r4, r5, lr}
 808204a:	4b12      	ldr	r3, [pc, #72]	; (8082094 <srand+0x4c>)
 808204c:	4605      	mov	r5, r0
 808204e:	681c      	ldr	r4, [r3, #0]
 8082050:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8082052:	b9d3      	cbnz	r3, 808208a <srand+0x42>
 8082054:	2018      	movs	r0, #24
 8082056:	f7fe fabf 	bl	80805d8 <malloc>
 808205a:	f243 330e 	movw	r3, #13070	; 0x330e
 808205e:	63a0      	str	r0, [r4, #56]	; 0x38
 8082060:	8003      	strh	r3, [r0, #0]
 8082062:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 8082066:	8043      	strh	r3, [r0, #2]
 8082068:	f241 2334 	movw	r3, #4660	; 0x1234
 808206c:	8083      	strh	r3, [r0, #4]
 808206e:	f24e 636d 	movw	r3, #58989	; 0xe66d
 8082072:	80c3      	strh	r3, [r0, #6]
 8082074:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 8082078:	8103      	strh	r3, [r0, #8]
 808207a:	2305      	movs	r3, #5
 808207c:	8143      	strh	r3, [r0, #10]
 808207e:	230b      	movs	r3, #11
 8082080:	8183      	strh	r3, [r0, #12]
 8082082:	2201      	movs	r2, #1
 8082084:	2300      	movs	r3, #0
 8082086:	e9c0 2304 	strd	r2, r3, [r0, #16]
 808208a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 808208c:	2200      	movs	r2, #0
 808208e:	611d      	str	r5, [r3, #16]
 8082090:	615a      	str	r2, [r3, #20]
 8082092:	bd38      	pop	{r3, r4, r5, pc}
 8082094:	20000074 	.word	0x20000074

08082098 <strcmp>:
 8082098:	f810 2b01 	ldrb.w	r2, [r0], #1
 808209c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80820a0:	2a01      	cmp	r2, #1
 80820a2:	bf28      	it	cs
 80820a4:	429a      	cmpcs	r2, r3
 80820a6:	d0f7      	beq.n	8082098 <strcmp>
 80820a8:	1ad0      	subs	r0, r2, r3
 80820aa:	4770      	bx	lr

080820ac <strcpy>:
 80820ac:	4603      	mov	r3, r0
 80820ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80820b2:	f803 2b01 	strb.w	r2, [r3], #1
 80820b6:	2a00      	cmp	r2, #0
 80820b8:	d1f9      	bne.n	80820ae <strcpy+0x2>
 80820ba:	4770      	bx	lr

080820bc <strdup>:
 80820bc:	4b02      	ldr	r3, [pc, #8]	; (80820c8 <strdup+0xc>)
 80820be:	4601      	mov	r1, r0
 80820c0:	6818      	ldr	r0, [r3, #0]
 80820c2:	f000 b803 	b.w	80820cc <_strdup_r>
 80820c6:	bf00      	nop
 80820c8:	20000074 	.word	0x20000074

080820cc <_strdup_r>:
 80820cc:	b570      	push	{r4, r5, r6, lr}
 80820ce:	4606      	mov	r6, r0
 80820d0:	4608      	mov	r0, r1
 80820d2:	460c      	mov	r4, r1
 80820d4:	f000 f80d 	bl	80820f2 <strlen>
 80820d8:	1c45      	adds	r5, r0, #1
 80820da:	4629      	mov	r1, r5
 80820dc:	4630      	mov	r0, r6
 80820de:	f7fe fab3 	bl	8080648 <_malloc_r>
 80820e2:	4606      	mov	r6, r0
 80820e4:	b118      	cbz	r0, 80820ee <_strdup_r+0x22>
 80820e6:	462a      	mov	r2, r5
 80820e8:	4621      	mov	r1, r4
 80820ea:	f7ff ff99 	bl	8082020 <memcpy>
 80820ee:	4630      	mov	r0, r6
 80820f0:	bd70      	pop	{r4, r5, r6, pc}

080820f2 <strlen>:
 80820f2:	4603      	mov	r3, r0
 80820f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80820f8:	2a00      	cmp	r2, #0
 80820fa:	d1fb      	bne.n	80820f4 <strlen+0x2>
 80820fc:	1a18      	subs	r0, r3, r0
 80820fe:	3801      	subs	r0, #1
 8082100:	4770      	bx	lr

08082102 <strncmp>:
 8082102:	b530      	push	{r4, r5, lr}
 8082104:	b182      	cbz	r2, 8082128 <strncmp+0x26>
 8082106:	1e45      	subs	r5, r0, #1
 8082108:	3901      	subs	r1, #1
 808210a:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 808210e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8082112:	42a3      	cmp	r3, r4
 8082114:	d106      	bne.n	8082124 <strncmp+0x22>
 8082116:	43ec      	mvns	r4, r5
 8082118:	4414      	add	r4, r2
 808211a:	42e0      	cmn	r0, r4
 808211c:	d001      	beq.n	8082122 <strncmp+0x20>
 808211e:	2b00      	cmp	r3, #0
 8082120:	d1f3      	bne.n	808210a <strncmp+0x8>
 8082122:	461c      	mov	r4, r3
 8082124:	1b18      	subs	r0, r3, r4
 8082126:	bd30      	pop	{r4, r5, pc}
 8082128:	4610      	mov	r0, r2
 808212a:	bd30      	pop	{r4, r5, pc}

0808212c <_strtoul_r>:
 808212c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8082130:	460e      	mov	r6, r1
 8082132:	4680      	mov	r8, r0
 8082134:	483b      	ldr	r0, [pc, #236]	; (8082224 <_strtoul_r+0xf8>)
 8082136:	f8d0 9000 	ldr.w	r9, [r0]
 808213a:	4635      	mov	r5, r6
 808213c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8082140:	eb09 0004 	add.w	r0, r9, r4
 8082144:	7840      	ldrb	r0, [r0, #1]
 8082146:	f000 0008 	and.w	r0, r0, #8
 808214a:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 808214e:	b108      	cbz	r0, 8082154 <_strtoul_r+0x28>
 8082150:	462e      	mov	r6, r5
 8082152:	e7f2      	b.n	808213a <_strtoul_r+0xe>
 8082154:	2c2d      	cmp	r4, #45	; 0x2d
 8082156:	d103      	bne.n	8082160 <_strtoul_r+0x34>
 8082158:	1cb5      	adds	r5, r6, #2
 808215a:	7874      	ldrb	r4, [r6, #1]
 808215c:	2701      	movs	r7, #1
 808215e:	e003      	b.n	8082168 <_strtoul_r+0x3c>
 8082160:	2c2b      	cmp	r4, #43	; 0x2b
 8082162:	bf04      	itt	eq
 8082164:	7874      	ldrbeq	r4, [r6, #1]
 8082166:	1cb5      	addeq	r5, r6, #2
 8082168:	b113      	cbz	r3, 8082170 <_strtoul_r+0x44>
 808216a:	2b10      	cmp	r3, #16
 808216c:	d10a      	bne.n	8082184 <_strtoul_r+0x58>
 808216e:	e053      	b.n	8082218 <_strtoul_r+0xec>
 8082170:	2c30      	cmp	r4, #48	; 0x30
 8082172:	d14f      	bne.n	8082214 <_strtoul_r+0xe8>
 8082174:	7828      	ldrb	r0, [r5, #0]
 8082176:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 808217a:	2858      	cmp	r0, #88	; 0x58
 808217c:	d145      	bne.n	808220a <_strtoul_r+0xde>
 808217e:	786c      	ldrb	r4, [r5, #1]
 8082180:	2310      	movs	r3, #16
 8082182:	3502      	adds	r5, #2
 8082184:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8082188:	fbbc fcf3 	udiv	ip, ip, r3
 808218c:	fb03 fa0c 	mul.w	sl, r3, ip
 8082190:	2600      	movs	r6, #0
 8082192:	ea6f 0a0a 	mvn.w	sl, sl
 8082196:	4630      	mov	r0, r6
 8082198:	eb09 0e04 	add.w	lr, r9, r4
 808219c:	f89e e001 	ldrb.w	lr, [lr, #1]
 80821a0:	f01e 0f04 	tst.w	lr, #4
 80821a4:	d001      	beq.n	80821aa <_strtoul_r+0x7e>
 80821a6:	3c30      	subs	r4, #48	; 0x30
 80821a8:	e00b      	b.n	80821c2 <_strtoul_r+0x96>
 80821aa:	f01e 0e03 	ands.w	lr, lr, #3
 80821ae:	d01a      	beq.n	80821e6 <_strtoul_r+0xba>
 80821b0:	f1be 0f01 	cmp.w	lr, #1
 80821b4:	bf0c      	ite	eq
 80821b6:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80821ba:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80821be:	ebce 0404 	rsb	r4, lr, r4
 80821c2:	42a3      	cmp	r3, r4
 80821c4:	dd0f      	ble.n	80821e6 <_strtoul_r+0xba>
 80821c6:	2e00      	cmp	r6, #0
 80821c8:	db08      	blt.n	80821dc <_strtoul_r+0xb0>
 80821ca:	4560      	cmp	r0, ip
 80821cc:	d806      	bhi.n	80821dc <_strtoul_r+0xb0>
 80821ce:	d101      	bne.n	80821d4 <_strtoul_r+0xa8>
 80821d0:	4554      	cmp	r4, sl
 80821d2:	dc03      	bgt.n	80821dc <_strtoul_r+0xb0>
 80821d4:	fb03 4000 	mla	r0, r3, r0, r4
 80821d8:	2601      	movs	r6, #1
 80821da:	e001      	b.n	80821e0 <_strtoul_r+0xb4>
 80821dc:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80821e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80821e4:	e7d8      	b.n	8082198 <_strtoul_r+0x6c>
 80821e6:	2e00      	cmp	r6, #0
 80821e8:	da07      	bge.n	80821fa <_strtoul_r+0xce>
 80821ea:	2322      	movs	r3, #34	; 0x22
 80821ec:	f8c8 3000 	str.w	r3, [r8]
 80821f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80821f4:	b92a      	cbnz	r2, 8082202 <_strtoul_r+0xd6>
 80821f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80821fa:	b107      	cbz	r7, 80821fe <_strtoul_r+0xd2>
 80821fc:	4240      	negs	r0, r0
 80821fe:	b172      	cbz	r2, 808221e <_strtoul_r+0xf2>
 8082200:	b106      	cbz	r6, 8082204 <_strtoul_r+0xd8>
 8082202:	1e69      	subs	r1, r5, #1
 8082204:	6011      	str	r1, [r2, #0]
 8082206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808220a:	2430      	movs	r4, #48	; 0x30
 808220c:	2b00      	cmp	r3, #0
 808220e:	d1b9      	bne.n	8082184 <_strtoul_r+0x58>
 8082210:	2308      	movs	r3, #8
 8082212:	e7b7      	b.n	8082184 <_strtoul_r+0x58>
 8082214:	230a      	movs	r3, #10
 8082216:	e7b5      	b.n	8082184 <_strtoul_r+0x58>
 8082218:	2c30      	cmp	r4, #48	; 0x30
 808221a:	d0ab      	beq.n	8082174 <_strtoul_r+0x48>
 808221c:	e7b2      	b.n	8082184 <_strtoul_r+0x58>
 808221e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8082222:	bf00      	nop
 8082224:	20000010 	.word	0x20000010

08082228 <strtoul>:
 8082228:	4613      	mov	r3, r2
 808222a:	460a      	mov	r2, r1
 808222c:	4601      	mov	r1, r0
 808222e:	4802      	ldr	r0, [pc, #8]	; (8082238 <strtoul+0x10>)
 8082230:	6800      	ldr	r0, [r0, #0]
 8082232:	f7ff bf7b 	b.w	808212c <_strtoul_r>
 8082236:	bf00      	nop
 8082238:	20000074 	.word	0x20000074

0808223c <__tzcalc_limits>:
 808223c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8082240:	4604      	mov	r4, r0
 8082242:	f000 fa6f 	bl	8082724 <__gettzinfo>
 8082246:	f240 73b1 	movw	r3, #1969	; 0x7b1
 808224a:	429c      	cmp	r4, r3
 808224c:	f340 8096 	ble.w	808237c <__tzcalc_limits+0x140>
 8082250:	f240 156d 	movw	r5, #365	; 0x16d
 8082254:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 8082258:	18e3      	adds	r3, r4, r3
 808225a:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
 808225e:	109b      	asrs	r3, r3, #2
 8082260:	fb05 3502 	mla	r5, r5, r2, r3
 8082264:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
 8082268:	f06f 0363 	mvn.w	r3, #99	; 0x63
 808226c:	fb92 f3f3 	sdiv	r3, r2, r3
 8082270:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 8082274:	442b      	add	r3, r5
 8082276:	18a5      	adds	r5, r4, r2
 8082278:	f44f 72c8 	mov.w	r2, #400	; 0x190
 808227c:	fb94 f7f2 	sdiv	r7, r4, r2
 8082280:	fb95 f5f2 	sdiv	r5, r5, r2
 8082284:	fb02 4717 	mls	r7, r2, r7, r4
 8082288:	441d      	add	r5, r3
 808228a:	2364      	movs	r3, #100	; 0x64
 808228c:	fb94 f6f3 	sdiv	r6, r4, r3
 8082290:	fab7 fe87 	clz	lr, r7
 8082294:	4601      	mov	r1, r0
 8082296:	fb03 4616 	mls	r6, r3, r6, r4
 808229a:	f100 0338 	add.w	r3, r0, #56	; 0x38
 808229e:	9301      	str	r3, [sp, #4]
 80822a0:	f004 0303 	and.w	r3, r4, #3
 80822a4:	6044      	str	r4, [r0, #4]
 80822a6:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80822aa:	9300      	str	r3, [sp, #0]
 80822ac:	f04f 0c07 	mov.w	ip, #7
 80822b0:	7a0b      	ldrb	r3, [r1, #8]
 80822b2:	2b4a      	cmp	r3, #74	; 0x4a
 80822b4:	d10e      	bne.n	80822d4 <__tzcalc_limits+0x98>
 80822b6:	694b      	ldr	r3, [r1, #20]
 80822b8:	9a00      	ldr	r2, [sp, #0]
 80822ba:	18ec      	adds	r4, r5, r3
 80822bc:	b902      	cbnz	r2, 80822c0 <__tzcalc_limits+0x84>
 80822be:	b906      	cbnz	r6, 80822c2 <__tzcalc_limits+0x86>
 80822c0:	b927      	cbnz	r7, 80822cc <__tzcalc_limits+0x90>
 80822c2:	2b3b      	cmp	r3, #59	; 0x3b
 80822c4:	bfd4      	ite	le
 80822c6:	2300      	movle	r3, #0
 80822c8:	2301      	movgt	r3, #1
 80822ca:	e000      	b.n	80822ce <__tzcalc_limits+0x92>
 80822cc:	2300      	movs	r3, #0
 80822ce:	4423      	add	r3, r4
 80822d0:	3b01      	subs	r3, #1
 80822d2:	e03f      	b.n	8082354 <__tzcalc_limits+0x118>
 80822d4:	2b44      	cmp	r3, #68	; 0x44
 80822d6:	d102      	bne.n	80822de <__tzcalc_limits+0xa2>
 80822d8:	694b      	ldr	r3, [r1, #20]
 80822da:	442b      	add	r3, r5
 80822dc:	e03a      	b.n	8082354 <__tzcalc_limits+0x118>
 80822de:	9b00      	ldr	r3, [sp, #0]
 80822e0:	b92b      	cbnz	r3, 80822ee <__tzcalc_limits+0xb2>
 80822e2:	2e00      	cmp	r6, #0
 80822e4:	bf0c      	ite	eq
 80822e6:	46f0      	moveq	r8, lr
 80822e8:	f04f 0801 	movne.w	r8, #1
 80822ec:	e000      	b.n	80822f0 <__tzcalc_limits+0xb4>
 80822ee:	46f0      	mov	r8, lr
 80822f0:	46a9      	mov	r9, r5
 80822f2:	4b24      	ldr	r3, [pc, #144]	; (8082384 <__tzcalc_limits+0x148>)
 80822f4:	2230      	movs	r2, #48	; 0x30
 80822f6:	fb02 3808 	mla	r8, r2, r8, r3
 80822fa:	68cc      	ldr	r4, [r1, #12]
 80822fc:	f1a8 0a04 	sub.w	sl, r8, #4
 8082300:	2301      	movs	r3, #1
 8082302:	42a3      	cmp	r3, r4
 8082304:	da04      	bge.n	8082310 <__tzcalc_limits+0xd4>
 8082306:	f85a bf04 	ldr.w	fp, [sl, #4]!
 808230a:	3301      	adds	r3, #1
 808230c:	44d9      	add	r9, fp
 808230e:	e7f8      	b.n	8082302 <__tzcalc_limits+0xc6>
 8082310:	f109 0304 	add.w	r3, r9, #4
 8082314:	fb93 fbfc 	sdiv	fp, r3, ip
 8082318:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
 808231c:	ebca 0a03 	rsb	sl, sl, r3
 8082320:	694b      	ldr	r3, [r1, #20]
 8082322:	2c01      	cmp	r4, #1
 8082324:	bfb8      	it	lt
 8082326:	2401      	movlt	r4, #1
 8082328:	ebb3 0a0a 	subs.w	sl, r3, sl
 808232c:	690b      	ldr	r3, [r1, #16]
 808232e:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8082332:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8082336:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 808233a:	bf48      	it	mi
 808233c:	f10a 0a07 	addmi.w	sl, sl, #7
 8082340:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8082344:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 8082348:	4453      	add	r3, sl
 808234a:	42a3      	cmp	r3, r4
 808234c:	db01      	blt.n	8082352 <__tzcalc_limits+0x116>
 808234e:	3b07      	subs	r3, #7
 8082350:	e7fb      	b.n	808234a <__tzcalc_limits+0x10e>
 8082352:	444b      	add	r3, r9
 8082354:	698c      	ldr	r4, [r1, #24]
 8082356:	4a0c      	ldr	r2, [pc, #48]	; (8082388 <__tzcalc_limits+0x14c>)
 8082358:	fb02 4303 	mla	r3, r2, r3, r4
 808235c:	6a0c      	ldr	r4, [r1, #32]
 808235e:	4423      	add	r3, r4
 8082360:	f841 3f1c 	str.w	r3, [r1, #28]!
 8082364:	9b01      	ldr	r3, [sp, #4]
 8082366:	4299      	cmp	r1, r3
 8082368:	d1a2      	bne.n	80822b0 <__tzcalc_limits+0x74>
 808236a:	69c3      	ldr	r3, [r0, #28]
 808236c:	6b82      	ldr	r2, [r0, #56]	; 0x38
 808236e:	4293      	cmp	r3, r2
 8082370:	bfac      	ite	ge
 8082372:	2300      	movge	r3, #0
 8082374:	2301      	movlt	r3, #1
 8082376:	6003      	str	r3, [r0, #0]
 8082378:	2001      	movs	r0, #1
 808237a:	e000      	b.n	808237e <__tzcalc_limits+0x142>
 808237c:	2000      	movs	r0, #0
 808237e:	b003      	add	sp, #12
 8082380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8082384:	08082d28 	.word	0x08082d28
 8082388:	00015180 	.word	0x00015180

0808238c <__tz_lock>:
 808238c:	4770      	bx	lr

0808238e <__tz_unlock>:
 808238e:	4770      	bx	lr

08082390 <_tzset_unlocked>:
 8082390:	4b01      	ldr	r3, [pc, #4]	; (8082398 <_tzset_unlocked+0x8>)
 8082392:	6818      	ldr	r0, [r3, #0]
 8082394:	f000 b802 	b.w	808239c <_tzset_unlocked_r>
 8082398:	20000074 	.word	0x20000074

0808239c <_tzset_unlocked_r>:
 808239c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80823a0:	b08d      	sub	sp, #52	; 0x34
 80823a2:	4607      	mov	r7, r0
 80823a4:	f000 f9be 	bl	8082724 <__gettzinfo>
 80823a8:	49b0      	ldr	r1, [pc, #704]	; (808266c <_tzset_unlocked_r+0x2d0>)
 80823aa:	4604      	mov	r4, r0
 80823ac:	4638      	mov	r0, r7
 80823ae:	f000 f9b1 	bl	8082714 <_getenv_r>
 80823b2:	4eaf      	ldr	r6, [pc, #700]	; (8082670 <_tzset_unlocked_r+0x2d4>)
 80823b4:	4605      	mov	r5, r0
 80823b6:	b960      	cbnz	r0, 80823d2 <_tzset_unlocked_r+0x36>
 80823b8:	4bae      	ldr	r3, [pc, #696]	; (8082674 <_tzset_unlocked_r+0x2d8>)
 80823ba:	4aaf      	ldr	r2, [pc, #700]	; (8082678 <_tzset_unlocked_r+0x2dc>)
 80823bc:	6018      	str	r0, [r3, #0]
 80823be:	4baf      	ldr	r3, [pc, #700]	; (808267c <_tzset_unlocked_r+0x2e0>)
 80823c0:	6018      	str	r0, [r3, #0]
 80823c2:	4baf      	ldr	r3, [pc, #700]	; (8082680 <_tzset_unlocked_r+0x2e4>)
 80823c4:	6830      	ldr	r0, [r6, #0]
 80823c6:	601a      	str	r2, [r3, #0]
 80823c8:	605a      	str	r2, [r3, #4]
 80823ca:	f7fe f90d 	bl	80805e8 <free>
 80823ce:	6035      	str	r5, [r6, #0]
 80823d0:	e148      	b.n	8082664 <_tzset_unlocked_r+0x2c8>
 80823d2:	6831      	ldr	r1, [r6, #0]
 80823d4:	b979      	cbnz	r1, 80823f6 <_tzset_unlocked_r+0x5a>
 80823d6:	6830      	ldr	r0, [r6, #0]
 80823d8:	f7fe f906 	bl	80805e8 <free>
 80823dc:	4628      	mov	r0, r5
 80823de:	f7ff fe88 	bl	80820f2 <strlen>
 80823e2:	1c41      	adds	r1, r0, #1
 80823e4:	4638      	mov	r0, r7
 80823e6:	f7fe f92f 	bl	8080648 <_malloc_r>
 80823ea:	6030      	str	r0, [r6, #0]
 80823ec:	b148      	cbz	r0, 8082402 <_tzset_unlocked_r+0x66>
 80823ee:	4629      	mov	r1, r5
 80823f0:	f7ff fe5c 	bl	80820ac <strcpy>
 80823f4:	e005      	b.n	8082402 <_tzset_unlocked_r+0x66>
 80823f6:	f7ff fe4f 	bl	8082098 <strcmp>
 80823fa:	2800      	cmp	r0, #0
 80823fc:	f000 8132 	beq.w	8082664 <_tzset_unlocked_r+0x2c8>
 8082400:	e7e9      	b.n	80823d6 <_tzset_unlocked_r+0x3a>
 8082402:	782b      	ldrb	r3, [r5, #0]
 8082404:	ae0a      	add	r6, sp, #40	; 0x28
 8082406:	2b3a      	cmp	r3, #58	; 0x3a
 8082408:	bf08      	it	eq
 808240a:	3501      	addeq	r5, #1
 808240c:	4633      	mov	r3, r6
 808240e:	4a9d      	ldr	r2, [pc, #628]	; (8082684 <_tzset_unlocked_r+0x2e8>)
 8082410:	499d      	ldr	r1, [pc, #628]	; (8082688 <_tzset_unlocked_r+0x2ec>)
 8082412:	4628      	mov	r0, r5
 8082414:	f7fe f900 	bl	8080618 <siscanf>
 8082418:	2800      	cmp	r0, #0
 808241a:	f340 8123 	ble.w	8082664 <_tzset_unlocked_r+0x2c8>
 808241e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8082420:	18ef      	adds	r7, r5, r3
 8082422:	5ceb      	ldrb	r3, [r5, r3]
 8082424:	2b2d      	cmp	r3, #45	; 0x2d
 8082426:	d103      	bne.n	8082430 <_tzset_unlocked_r+0x94>
 8082428:	3701      	adds	r7, #1
 808242a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 808242e:	e003      	b.n	8082438 <_tzset_unlocked_r+0x9c>
 8082430:	2b2b      	cmp	r3, #43	; 0x2b
 8082432:	bf08      	it	eq
 8082434:	3701      	addeq	r7, #1
 8082436:	2501      	movs	r5, #1
 8082438:	f10d 0a20 	add.w	sl, sp, #32
 808243c:	f10d 0b1e 	add.w	fp, sp, #30
 8082440:	f04f 0800 	mov.w	r8, #0
 8082444:	9603      	str	r6, [sp, #12]
 8082446:	f8cd a008 	str.w	sl, [sp, #8]
 808244a:	9601      	str	r6, [sp, #4]
 808244c:	f8cd b000 	str.w	fp, [sp]
 8082450:	4633      	mov	r3, r6
 8082452:	aa07      	add	r2, sp, #28
 8082454:	498d      	ldr	r1, [pc, #564]	; (808268c <_tzset_unlocked_r+0x2f0>)
 8082456:	4638      	mov	r0, r7
 8082458:	f8ad 801e 	strh.w	r8, [sp, #30]
 808245c:	f8ad 8020 	strh.w	r8, [sp, #32]
 8082460:	f7fe f8da 	bl	8080618 <siscanf>
 8082464:	4540      	cmp	r0, r8
 8082466:	f340 80fd 	ble.w	8082664 <_tzset_unlocked_r+0x2c8>
 808246a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 808246e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8082472:	213c      	movs	r1, #60	; 0x3c
 8082474:	fb01 3302 	mla	r3, r1, r2, r3
 8082478:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 808247c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8082480:	fb01 3302 	mla	r3, r1, r2, r3
 8082484:	435d      	muls	r5, r3
 8082486:	4b7f      	ldr	r3, [pc, #508]	; (8082684 <_tzset_unlocked_r+0x2e8>)
 8082488:	6225      	str	r5, [r4, #32]
 808248a:	4d7d      	ldr	r5, [pc, #500]	; (8082680 <_tzset_unlocked_r+0x2e4>)
 808248c:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8082698 <_tzset_unlocked_r+0x2fc>
 8082490:	602b      	str	r3, [r5, #0]
 8082492:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8082494:	464a      	mov	r2, r9
 8082496:	441f      	add	r7, r3
 8082498:	497b      	ldr	r1, [pc, #492]	; (8082688 <_tzset_unlocked_r+0x2ec>)
 808249a:	4633      	mov	r3, r6
 808249c:	4638      	mov	r0, r7
 808249e:	f7fe f8bb 	bl	8080618 <siscanf>
 80824a2:	4540      	cmp	r0, r8
 80824a4:	dc08      	bgt.n	80824b8 <_tzset_unlocked_r+0x11c>
 80824a6:	682b      	ldr	r3, [r5, #0]
 80824a8:	6a22      	ldr	r2, [r4, #32]
 80824aa:	606b      	str	r3, [r5, #4]
 80824ac:	4b71      	ldr	r3, [pc, #452]	; (8082674 <_tzset_unlocked_r+0x2d8>)
 80824ae:	601a      	str	r2, [r3, #0]
 80824b0:	4b72      	ldr	r3, [pc, #456]	; (808267c <_tzset_unlocked_r+0x2e0>)
 80824b2:	f8c3 8000 	str.w	r8, [r3]
 80824b6:	e0d5      	b.n	8082664 <_tzset_unlocked_r+0x2c8>
 80824b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80824ba:	f8c5 9004 	str.w	r9, [r5, #4]
 80824be:	18fd      	adds	r5, r7, r3
 80824c0:	5cfb      	ldrb	r3, [r7, r3]
 80824c2:	2b2d      	cmp	r3, #45	; 0x2d
 80824c4:	d103      	bne.n	80824ce <_tzset_unlocked_r+0x132>
 80824c6:	3501      	adds	r5, #1
 80824c8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80824cc:	e003      	b.n	80824d6 <_tzset_unlocked_r+0x13a>
 80824ce:	2b2b      	cmp	r3, #43	; 0x2b
 80824d0:	bf08      	it	eq
 80824d2:	3501      	addeq	r5, #1
 80824d4:	2701      	movs	r7, #1
 80824d6:	2300      	movs	r3, #0
 80824d8:	f8ad 301c 	strh.w	r3, [sp, #28]
 80824dc:	f8ad 301e 	strh.w	r3, [sp, #30]
 80824e0:	f8ad 3020 	strh.w	r3, [sp, #32]
 80824e4:	930a      	str	r3, [sp, #40]	; 0x28
 80824e6:	9603      	str	r6, [sp, #12]
 80824e8:	f8cd a008 	str.w	sl, [sp, #8]
 80824ec:	9601      	str	r6, [sp, #4]
 80824ee:	f8cd b000 	str.w	fp, [sp]
 80824f2:	4633      	mov	r3, r6
 80824f4:	aa07      	add	r2, sp, #28
 80824f6:	4965      	ldr	r1, [pc, #404]	; (808268c <_tzset_unlocked_r+0x2f0>)
 80824f8:	4628      	mov	r0, r5
 80824fa:	f7fe f88d 	bl	8080618 <siscanf>
 80824fe:	2800      	cmp	r0, #0
 8082500:	dc04      	bgt.n	808250c <_tzset_unlocked_r+0x170>
 8082502:	6a23      	ldr	r3, [r4, #32]
 8082504:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8082508:	63e3      	str	r3, [r4, #60]	; 0x3c
 808250a:	e00e      	b.n	808252a <_tzset_unlocked_r+0x18e>
 808250c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8082510:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8082514:	213c      	movs	r1, #60	; 0x3c
 8082516:	fb01 3302 	mla	r3, r1, r2, r3
 808251a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 808251e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8082522:	fb01 3302 	mla	r3, r1, r2, r3
 8082526:	435f      	muls	r7, r3
 8082528:	63e7      	str	r7, [r4, #60]	; 0x3c
 808252a:	4627      	mov	r7, r4
 808252c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808252e:	f04f 0900 	mov.w	r9, #0
 8082532:	441d      	add	r5, r3
 8082534:	782b      	ldrb	r3, [r5, #0]
 8082536:	2b2c      	cmp	r3, #44	; 0x2c
 8082538:	bf08      	it	eq
 808253a:	3501      	addeq	r5, #1
 808253c:	f895 8000 	ldrb.w	r8, [r5]
 8082540:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8082544:	d126      	bne.n	8082594 <_tzset_unlocked_r+0x1f8>
 8082546:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 808254a:	9302      	str	r3, [sp, #8]
 808254c:	ab09      	add	r3, sp, #36	; 0x24
 808254e:	9300      	str	r3, [sp, #0]
 8082550:	9603      	str	r6, [sp, #12]
 8082552:	9601      	str	r6, [sp, #4]
 8082554:	4633      	mov	r3, r6
 8082556:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 808255a:	494d      	ldr	r1, [pc, #308]	; (8082690 <_tzset_unlocked_r+0x2f4>)
 808255c:	4628      	mov	r0, r5
 808255e:	f7fe f85b 	bl	8080618 <siscanf>
 8082562:	2803      	cmp	r0, #3
 8082564:	d17e      	bne.n	8082664 <_tzset_unlocked_r+0x2c8>
 8082566:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 808256a:	1e4b      	subs	r3, r1, #1
 808256c:	2b0b      	cmp	r3, #11
 808256e:	d879      	bhi.n	8082664 <_tzset_unlocked_r+0x2c8>
 8082570:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8082574:	1e53      	subs	r3, r2, #1
 8082576:	2b04      	cmp	r3, #4
 8082578:	d874      	bhi.n	8082664 <_tzset_unlocked_r+0x2c8>
 808257a:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 808257e:	2b06      	cmp	r3, #6
 8082580:	d870      	bhi.n	8082664 <_tzset_unlocked_r+0x2c8>
 8082582:	f887 8008 	strb.w	r8, [r7, #8]
 8082586:	60f9      	str	r1, [r7, #12]
 8082588:	613a      	str	r2, [r7, #16]
 808258a:	617b      	str	r3, [r7, #20]
 808258c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808258e:	eb05 0803 	add.w	r8, r5, r3
 8082592:	e02a      	b.n	80825ea <_tzset_unlocked_r+0x24e>
 8082594:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8082598:	bf06      	itte	eq
 808259a:	4643      	moveq	r3, r8
 808259c:	3501      	addeq	r5, #1
 808259e:	2344      	movne	r3, #68	; 0x44
 80825a0:	220a      	movs	r2, #10
 80825a2:	a90b      	add	r1, sp, #44	; 0x2c
 80825a4:	4628      	mov	r0, r5
 80825a6:	9305      	str	r3, [sp, #20]
 80825a8:	f7ff fe3e 	bl	8082228 <strtoul>
 80825ac:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80825b0:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 80825b4:	4545      	cmp	r5, r8
 80825b6:	9b05      	ldr	r3, [sp, #20]
 80825b8:	d114      	bne.n	80825e4 <_tzset_unlocked_r+0x248>
 80825ba:	234d      	movs	r3, #77	; 0x4d
 80825bc:	f1b9 0f00 	cmp.w	r9, #0
 80825c0:	d107      	bne.n	80825d2 <_tzset_unlocked_r+0x236>
 80825c2:	7223      	strb	r3, [r4, #8]
 80825c4:	2303      	movs	r3, #3
 80825c6:	60e3      	str	r3, [r4, #12]
 80825c8:	2302      	movs	r3, #2
 80825ca:	6123      	str	r3, [r4, #16]
 80825cc:	f8c4 9014 	str.w	r9, [r4, #20]
 80825d0:	e00b      	b.n	80825ea <_tzset_unlocked_r+0x24e>
 80825d2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80825d6:	230b      	movs	r3, #11
 80825d8:	62a3      	str	r3, [r4, #40]	; 0x28
 80825da:	2301      	movs	r3, #1
 80825dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80825de:	2300      	movs	r3, #0
 80825e0:	6323      	str	r3, [r4, #48]	; 0x30
 80825e2:	e002      	b.n	80825ea <_tzset_unlocked_r+0x24e>
 80825e4:	b280      	uxth	r0, r0
 80825e6:	723b      	strb	r3, [r7, #8]
 80825e8:	6178      	str	r0, [r7, #20]
 80825ea:	2302      	movs	r3, #2
 80825ec:	f8ad 301c 	strh.w	r3, [sp, #28]
 80825f0:	2300      	movs	r3, #0
 80825f2:	f8ad 301e 	strh.w	r3, [sp, #30]
 80825f6:	f8ad 3020 	strh.w	r3, [sp, #32]
 80825fa:	930a      	str	r3, [sp, #40]	; 0x28
 80825fc:	f898 3000 	ldrb.w	r3, [r8]
 8082600:	2b2f      	cmp	r3, #47	; 0x2f
 8082602:	d10b      	bne.n	808261c <_tzset_unlocked_r+0x280>
 8082604:	9603      	str	r6, [sp, #12]
 8082606:	f8cd a008 	str.w	sl, [sp, #8]
 808260a:	9601      	str	r6, [sp, #4]
 808260c:	f8cd b000 	str.w	fp, [sp]
 8082610:	4633      	mov	r3, r6
 8082612:	aa07      	add	r2, sp, #28
 8082614:	491f      	ldr	r1, [pc, #124]	; (8082694 <_tzset_unlocked_r+0x2f8>)
 8082616:	4640      	mov	r0, r8
 8082618:	f7fd fffe 	bl	8080618 <siscanf>
 808261c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8082620:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8082624:	213c      	movs	r1, #60	; 0x3c
 8082626:	fb01 3302 	mla	r3, r1, r2, r3
 808262a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 808262e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8082632:	fb01 3302 	mla	r3, r1, r2, r3
 8082636:	61bb      	str	r3, [r7, #24]
 8082638:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 808263a:	f109 0901 	add.w	r9, r9, #1
 808263e:	f1b9 0f02 	cmp.w	r9, #2
 8082642:	4445      	add	r5, r8
 8082644:	f107 071c 	add.w	r7, r7, #28
 8082648:	f47f af74 	bne.w	8082534 <_tzset_unlocked_r+0x198>
 808264c:	6860      	ldr	r0, [r4, #4]
 808264e:	f7ff fdf5 	bl	808223c <__tzcalc_limits>
 8082652:	6a22      	ldr	r2, [r4, #32]
 8082654:	4b07      	ldr	r3, [pc, #28]	; (8082674 <_tzset_unlocked_r+0x2d8>)
 8082656:	601a      	str	r2, [r3, #0]
 8082658:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 808265a:	1a9b      	subs	r3, r3, r2
 808265c:	4a07      	ldr	r2, [pc, #28]	; (808267c <_tzset_unlocked_r+0x2e0>)
 808265e:	bf18      	it	ne
 8082660:	2301      	movne	r3, #1
 8082662:	6013      	str	r3, [r2, #0]
 8082664:	b00d      	add	sp, #52	; 0x34
 8082666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808266a:	bf00      	nop
 808266c:	08082d88 	.word	0x08082d88
 8082670:	20000730 	.word	0x20000730
 8082674:	20000738 	.word	0x20000738
 8082678:	08082d8b 	.word	0x08082d8b
 808267c:	20000734 	.word	0x20000734
 8082680:	20000078 	.word	0x20000078
 8082684:	20000723 	.word	0x20000723
 8082688:	08082d8f 	.word	0x08082d8f
 808268c:	08082db2 	.word	0x08082db2
 8082690:	08082d9e 	.word	0x08082d9e
 8082694:	08082db1 	.word	0x08082db1
 8082698:	20000718 	.word	0x20000718

0808269c <_findenv_r>:
 808269c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80826a0:	4607      	mov	r7, r0
 80826a2:	468b      	mov	fp, r1
 80826a4:	4690      	mov	r8, r2
 80826a6:	f000 f8d7 	bl	8082858 <__env_lock>
 80826aa:	4b19      	ldr	r3, [pc, #100]	; (8082710 <_findenv_r+0x74>)
 80826ac:	681d      	ldr	r5, [r3, #0]
 80826ae:	469a      	mov	sl, r3
 80826b0:	b13d      	cbz	r5, 80826c2 <_findenv_r+0x26>
 80826b2:	465c      	mov	r4, fp
 80826b4:	4623      	mov	r3, r4
 80826b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80826ba:	b142      	cbz	r2, 80826ce <_findenv_r+0x32>
 80826bc:	2a3d      	cmp	r2, #61	; 0x3d
 80826be:	461c      	mov	r4, r3
 80826c0:	d1f8      	bne.n	80826b4 <_findenv_r+0x18>
 80826c2:	4638      	mov	r0, r7
 80826c4:	f000 f8c9 	bl	808285a <__env_unlock>
 80826c8:	2000      	movs	r0, #0
 80826ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80826ce:	ebcb 0404 	rsb	r4, fp, r4
 80826d2:	46a9      	mov	r9, r5
 80826d4:	f859 0b04 	ldr.w	r0, [r9], #4
 80826d8:	2800      	cmp	r0, #0
 80826da:	d0f2      	beq.n	80826c2 <_findenv_r+0x26>
 80826dc:	4622      	mov	r2, r4
 80826de:	4659      	mov	r1, fp
 80826e0:	f7ff fd0f 	bl	8082102 <strncmp>
 80826e4:	b988      	cbnz	r0, 808270a <_findenv_r+0x6e>
 80826e6:	f859 3c04 	ldr.w	r3, [r9, #-4]
 80826ea:	191e      	adds	r6, r3, r4
 80826ec:	5d1b      	ldrb	r3, [r3, r4]
 80826ee:	2b3d      	cmp	r3, #61	; 0x3d
 80826f0:	d10b      	bne.n	808270a <_findenv_r+0x6e>
 80826f2:	f8da 3000 	ldr.w	r3, [sl]
 80826f6:	4638      	mov	r0, r7
 80826f8:	1aed      	subs	r5, r5, r3
 80826fa:	10ad      	asrs	r5, r5, #2
 80826fc:	f8c8 5000 	str.w	r5, [r8]
 8082700:	f000 f8ab 	bl	808285a <__env_unlock>
 8082704:	1c70      	adds	r0, r6, #1
 8082706:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808270a:	464d      	mov	r5, r9
 808270c:	e7e1      	b.n	80826d2 <_findenv_r+0x36>
 808270e:	bf00      	nop
 8082710:	200000c0 	.word	0x200000c0

08082714 <_getenv_r>:
 8082714:	b507      	push	{r0, r1, r2, lr}
 8082716:	aa01      	add	r2, sp, #4
 8082718:	f7ff ffc0 	bl	808269c <_findenv_r>
 808271c:	b003      	add	sp, #12
 808271e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08082724 <__gettzinfo>:
 8082724:	4800      	ldr	r0, [pc, #0]	; (8082728 <__gettzinfo+0x4>)
 8082726:	4770      	bx	lr
 8082728:	20000080 	.word	0x20000080

0808272c <gmtime_r>:
 808272c:	6802      	ldr	r2, [r0, #0]
 808272e:	4b46      	ldr	r3, [pc, #280]	; (8082848 <gmtime_r+0x11c>)
 8082730:	b5f0      	push	{r4, r5, r6, r7, lr}
 8082732:	fb92 f4f3 	sdiv	r4, r2, r3
 8082736:	fb03 2214 	mls	r2, r3, r4, r2
 808273a:	2a00      	cmp	r2, #0
 808273c:	bfbc      	itt	lt
 808273e:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 8082742:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8082746:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 808274a:	fb92 f3f0 	sdiv	r3, r2, r0
 808274e:	fb00 2213 	mls	r2, r0, r3, r2
 8082752:	f04f 003c 	mov.w	r0, #60	; 0x3c
 8082756:	608b      	str	r3, [r1, #8]
 8082758:	fb92 f3f0 	sdiv	r3, r2, r0
 808275c:	fb00 2213 	mls	r2, r0, r3, r2
 8082760:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
 8082764:	bfac      	ite	ge
 8082766:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
 808276a:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
 808276e:	604b      	str	r3, [r1, #4]
 8082770:	600a      	str	r2, [r1, #0]
 8082772:	2307      	movs	r3, #7
 8082774:	1ce2      	adds	r2, r4, #3
 8082776:	fb92 f3f3 	sdiv	r3, r2, r3
 808277a:	4d34      	ldr	r5, [pc, #208]	; (808284c <gmtime_r+0x120>)
 808277c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8082780:	fb94 f5f5 	sdiv	r5, r4, r5
 8082784:	1ad3      	subs	r3, r2, r3
 8082786:	f648 62ac 	movw	r2, #36524	; 0x8eac
 808278a:	f240 57b4 	movw	r7, #1460	; 0x5b4
 808278e:	618b      	str	r3, [r1, #24]
 8082790:	4b2f      	ldr	r3, [pc, #188]	; (8082850 <gmtime_r+0x124>)
 8082792:	4830      	ldr	r0, [pc, #192]	; (8082854 <gmtime_r+0x128>)
 8082794:	fb03 4405 	mla	r4, r3, r5, r4
 8082798:	fbb4 f2f2 	udiv	r2, r4, r2
 808279c:	fbb4 f3f7 	udiv	r3, r4, r7
 80827a0:	fbb4 f0f0 	udiv	r0, r4, r0
 80827a4:	4422      	add	r2, r4
 80827a6:	1ad2      	subs	r2, r2, r3
 80827a8:	f648 6694 	movw	r6, #36500	; 0x8e94
 80827ac:	1a13      	subs	r3, r2, r0
 80827ae:	f240 126d 	movw	r2, #365	; 0x16d
 80827b2:	fbb3 f6f6 	udiv	r6, r3, r6
 80827b6:	fbb3 f0f2 	udiv	r0, r3, r2
 80827ba:	fbb3 f3f7 	udiv	r3, r3, r7
 80827be:	4434      	add	r4, r6
 80827c0:	1ae3      	subs	r3, r4, r3
 80827c2:	fb02 3310 	mls	r3, r2, r0, r3
 80827c6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80827ca:	2499      	movs	r4, #153	; 0x99
 80827cc:	3202      	adds	r2, #2
 80827ce:	fbb2 f2f4 	udiv	r2, r2, r4
 80827d2:	4354      	muls	r4, r2
 80827d4:	1ca6      	adds	r6, r4, #2
 80827d6:	2405      	movs	r4, #5
 80827d8:	fbb6 f4f4 	udiv	r4, r6, r4
 80827dc:	2a0a      	cmp	r2, #10
 80827de:	bf34      	ite	cc
 80827e0:	2602      	movcc	r6, #2
 80827e2:	f06f 0609 	mvncs.w	r6, #9
 80827e6:	4416      	add	r6, r2
 80827e8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80827ec:	fb02 0505 	mla	r5, r2, r5, r0
 80827f0:	1c5f      	adds	r7, r3, #1
 80827f2:	2e01      	cmp	r6, #1
 80827f4:	bf98      	it	ls
 80827f6:	3501      	addls	r5, #1
 80827f8:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80827fc:	eba7 0704 	sub.w	r7, r7, r4
 8082800:	d302      	bcc.n	8082808 <gmtime_r+0xdc>
 8082802:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
 8082806:	e014      	b.n	8082832 <gmtime_r+0x106>
 8082808:	0782      	lsls	r2, r0, #30
 808280a:	d105      	bne.n	8082818 <gmtime_r+0xec>
 808280c:	2464      	movs	r4, #100	; 0x64
 808280e:	fbb0 f2f4 	udiv	r2, r0, r4
 8082812:	fb04 0212 	mls	r2, r4, r2, r0
 8082816:	b94a      	cbnz	r2, 808282c <gmtime_r+0x100>
 8082818:	f44f 72c8 	mov.w	r2, #400	; 0x190
 808281c:	fbb0 f4f2 	udiv	r4, r0, r2
 8082820:	fb02 0014 	mls	r0, r2, r4, r0
 8082824:	fab0 f280 	clz	r2, r0
 8082828:	0952      	lsrs	r2, r2, #5
 808282a:	e000      	b.n	808282e <gmtime_r+0x102>
 808282c:	2201      	movs	r2, #1
 808282e:	333b      	adds	r3, #59	; 0x3b
 8082830:	441a      	add	r2, r3
 8082832:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 8082836:	2300      	movs	r3, #0
 8082838:	61ca      	str	r2, [r1, #28]
 808283a:	614d      	str	r5, [r1, #20]
 808283c:	610e      	str	r6, [r1, #16]
 808283e:	60cf      	str	r7, [r1, #12]
 8082840:	620b      	str	r3, [r1, #32]
 8082842:	4608      	mov	r0, r1
 8082844:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8082846:	bf00      	nop
 8082848:	00015180 	.word	0x00015180
 808284c:	00023ab1 	.word	0x00023ab1
 8082850:	fffdc54f 	.word	0xfffdc54f
 8082854:	00023ab0 	.word	0x00023ab0

08082858 <__env_lock>:
 8082858:	4770      	bx	lr

0808285a <__env_unlock>:
 808285a:	4770      	bx	lr

0808285c <dynalib_user>:
 808285c:	001d 0808 005d 0808 0089 0808 008d 0808     ....]...........
 808286c:	0000 0000                                   ....

08082870 <_ZL17testTimesAndDates>:
 8082870:	76e0 5c3d 6d60 5c7b 3f60 5c8b 8960 5d04     .v=\`m{\`?.\`..]
 8082880:	6060 5da5 c9e0 5dbb ff40 5dbc 1b60 5dbd     ``.]...]@..]`..]
 8082890:	6fc0 5dbd cbe0 5df5 6946 696e 6873 6465     .o.]...]Finished
 80828a0:	5300 6174 7472 7075 5400 7572 2065 202d     .Startup.True - 
 80828b0:	7962 6d20 6e6f 6874 6900 4473 5453 7375     by month.isDSTus
 80828c0:	0061 6146 736c 2065 202d 7962 6d20 6e6f     a.False - by mon
 80828d0:	6874 4e00 766f 6d65 6562 2072 202d 7962     th.November - by
 80828e0:	6420 7961 4d00 7261 6863 2d20 6220 2079      day.March - by 
 80828f0:	6164 0079 6641 6574 2072 6132 206d 202d     day.After 2am - 
 8082900:	7962 6820 756f 0072 6542 6f66 6572 3220     by hour.Before 2
 8082910:	6d61 2d20 6220 2079 6f68 7275 5400 7572     am - by hour.Tru
 8082920:	0065 6146 736c 0065 6854 2065 6974 656d     e.False.The time
 8082930:	6920 2073 7325 6120 646e 7420 6568 5420      is %s and the T
 8082940:	6d69 5a65 6e6f 2065 7369 2520 0073 6554     imeZone is %s.Te
 8082950:	7473 0000                                   st..

08082954 <_ZTVN5spark13CellularClassE>:
	...
 808295c:	0729 0808 071f 0808 0715 0808 0687 0808     )...............
 808296c:	0709 0808 06fd 0808 06f1 0808 06e9 0808     ................
 808297c:	06df 0808 06d5 0808 0691 0808               ............

08082988 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 8082990:	0765 0808 076b 0808 07c1 0808 0779 0808     e...k.......y...
 80829a0:	0767 0808                                   g...

080829a4 <_ZTV9IPAddress>:
	...
 80829ac:	0d3d 0808 0d2d 0808 0d2f 0808 0066 6e6c     =...-.../...f.ln
 80829bc:	6600 006e 6f63 6564 6400 7465 6961 006c     .fn.code.detail.
 80829cc:	0a0d 2500 3130 7530 0020 205d 2500 0064     ...%010u .] .%d.
 80829dc:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
 80829ec:	203d 2500 0069 6564 6174 6c69 2073 203d     = .%i.details = 
 80829fc:	6200 7561 0064 6553 6972 6c61 5500 4253     .baud.Serial.USB
 8082a0c:	6553 6972 6c61 0031 7974 6570 7000 7261     Serial1.type.par
 8082a1c:	6d61 6300 646d 6900 0064 6e68 0064 7473     am.cmd.id.hnd.st
 8082a2c:	6d72 6600 6c69 0074 766c 006c 6461 4864     rm.filt.lvl.addH
 8082a3c:	6e61 6c64 7265 7200 6d65 766f 4865 6e61     andler.removeHan
 8082a4c:	6c64 7265 6500 756e 486d 6e61 6c64 7265     dler.enumHandler
 8082a5c:	0073 534a 4e4f 7453 6572 6d61 6f4c 4867     s.JSONStreamLogH
 8082a6c:	6e61 6c64 7265 6100 7070 6e00 6e6f 0065     andler.app.none.
 8082a7c:	7274 6361 0065 6e69 6f66 7700 7261 006e     trace.info.warn.
 8082a8c:	7265 6f72 0072 6170 696e 0063 6c61 006c     error.panic.all.

08082a9c <_ZTVN5spark12NetworkClassE>:
	...
 8082aa4:	0ddd 0808 0de7 0808 0df1 0808 0dfb 0808     ................
 8082ab4:	0e05 0808 0e11 0808 0e1d 0808 0e29 0808     ............)...
 8082ac4:	0e31 0808 0e3b 0808 0e45 0808               1...;...E...

08082ad0 <_ZTV8SPIClass>:
	...
 8082ad8:	0f79 0808 0f7b 0808 2b25 3330 3a64 3025     y...{...%+03d:%0
 8082ae8:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
 8082af8:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

08082b08 <_ZTV11USARTSerial>:
	...
 8082b10:	12ad 0808 12fd 0808 130b 0808 0ea5 0808     ................
 8082b20:	12c1 0808 12e3 0808 12cf 0808 12f7 0808     ................
 8082b30:	12af 0808 12b3 0808                         ........

08082b38 <_ZTV9USBSerial>:
	...
 8082b40:	13ad 0808 13fd 0808 140b 0808 0ea5 0808     ................
 8082b50:	13e9 0808 13af 0808 13c5 0808 13f7 0808     ................
 8082b60:	13db 0808 13a9 0808                         ........

08082b68 <day_name.4723>:
 8082b68:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
 8082b78:	6972 6153 4a74                                   riSat

08082b7d <mon_name.4724>:
 8082b7d:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
 8082b8d:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
 8082b9d:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
 8082bad:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
 8082bbd:	6425 000a                                   %d..

08082bc1 <_ctype_>:
 8082bc1:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 8082bd1:	2020 2020 2020 2020 2020 2020 2020 2020                     
 8082be1:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 8082bf1:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 8082c01:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 8082c11:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 8082c21:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 8082c31:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 8082c41:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

08082cc4 <__sf_fake_stdin>:
	...

08082ce4 <__sf_fake_stdout>:
	...

08082d04 <__sf_fake_stderr>:
	...
 8082d24:	0043 0000                                   C...

08082d28 <__month_lengths>:
 8082d28:	001f 0000 001c 0000 001f 0000 001e 0000     ................
 8082d38:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 8082d48:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 8082d58:	001f 0000 001d 0000 001f 0000 001e 0000     ................
 8082d68:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 8082d78:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 8082d88:	5a54 4700 544d 2500 3031 5e5b 2d30 2c39     TZ.GMT.%10[^0-9,
 8082d98:	2d2b 255d 006e 254d 7568 6e25 252e 7568     +-]%n.M%hu%n.%hu
 8082da8:	6e25 252e 7568 6e25 2f00 6825 2575 3a6e     %n.%hu%n./%hu%n:
 8082db8:	6825 2575 3a6e 6825 2575 006e               %hu%n:%hu%n.

08082dc4 <link_const_variable_data_end>:
 8082dc4:	080802e1 	.word	0x080802e1
 8082dc8:	08080735 	.word	0x08080735
 8082dcc:	08080dcd 	.word	0x08080dcd
 8082dd0:	08080e91 	.word	0x08080e91
 8082dd4:	08080f5d 	.word	0x08080f5d
 8082dd8:	08081065 	.word	0x08081065
 8082ddc:	08081299 	.word	0x08081299
 8082de0:	08081695 	.word	0x08081695
 8082de4:	080816c5 	.word	0x080816c5
 8082de8:	08081735 	.word	0x08081735
 8082dec:	080817f9 	.word	0x080817f9
 8082df0:	0808187d 	.word	0x0808187d
 8082df4:	08081901 	.word	0x08081901

08082df8 <link_constructors_end>:
	...
